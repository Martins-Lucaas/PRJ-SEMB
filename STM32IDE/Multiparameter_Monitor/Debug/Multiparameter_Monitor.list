
Multiparameter_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800557c  0800557c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005584  08005584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800558c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  2000000c  08005598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08005598  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001886f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a7  00000000  00000000  000388ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116c  00000000  00000000  0003d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000317c9  00000000  00000000  0003e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002140d  00000000  00000000  0006f9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0410  00000000  00000000  00090df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fc4  00000000  00000000  00171204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001771c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005544 	.word	0x08005544

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005544 	.word	0x08005544

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fed2 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f816 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa4c 	bl	80009a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 fa2a 	bl	8000968 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f9fa 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000518:	f000 f87c 	bl	8000614 <MX_ADC1_Init>
  MX_I2C3_Init();
 800051c:	f000 f90e 	bl	800073c <MX_I2C3_Init>
  MX_I2C2_Init();
 8000520:	f000 f8de 	bl	80006e0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000524:	f000 f938 	bl	8000798 <MX_SPI1_Init>
  MX_CRC_Init();
 8000528:	f000 f8c6 	bl	80006b8 <MX_CRC_Init>
  MX_TIM3_Init();
 800052c:	f000 f96a 	bl	8000804 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f9c2 	bl	80008b8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x34>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 ffd0 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <SystemClock_Config+0xd4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <SystemClock_Config+0xd4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005ac:	230f      	movs	r3, #15
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005b8:	2305      	movs	r3, #5
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 ffad 	bl	8003524 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d0:	f000 fa96 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2103      	movs	r1, #3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f976 	bl	80028e4 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005fe:	f000 fa7f 	bl	8000b00 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC1_Init+0x98>)
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x9c>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_ADC1_Init+0x98>)
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xa0>)
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_ADC1_Init+0x98>)
 8000674:	f000 fe80 	bl	8001378 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 fa3f 	bl	8000b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000682:	2301      	movs	r3, #1
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800068a:	2301      	movs	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_ADC1_Init+0x98>)
 8000694:	f000 feb4 	bl	8001400 <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069e:	f000 fa2f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_CRC_Init+0x20>)
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MX_CRC_Init+0x24>)
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_CRC_Init+0x20>)
 80006c4:	f001 f9ac 	bl	8001a20 <HAL_CRC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ce:	f000 fa17 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000070 	.word	0x20000070
 80006dc:	40023000 	.word	0x40023000

080006e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C2_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C2_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C2_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C2_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C2_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C2_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C2_Init+0x50>)
 800071e:	f001 fe55 	bl	80023cc <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f9ea 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000078 	.word	0x20000078
 8000734:	40005800 	.word	0x40005800
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C3_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C3_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C3_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C3_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C3_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C3_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C3_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C3_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C3_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C3_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C3_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C3_Init+0x50>)
 800077a:	f001 fe27 	bl	80023cc <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 f9bc 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000cc 	.word	0x200000cc
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f003 f939 	bl	8003a60 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f984 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000120 	.word	0x20000120
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <MX_TIM3_Init+0xb0>)
 800082a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM3_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM3_Init+0xac>)
 800083a:	f241 3287 	movw	r2, #4999	; 0x1387
 800083e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_TIM3_Init+0xac>)
 800084e:	f003 fb6d 	bl	8003f2c <HAL_TIM_PWM_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f952 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4619      	mov	r1, r3
 800086a:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_TIM3_Init+0xac>)
 800086c:	f003 fff0 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000876:	f000 f943 	bl	8000b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	2360      	movs	r3, #96	; 0x60
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 800087e:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000894:	f003 fca2 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800089e:	f000 f92f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM3_Init+0xac>)
 80008a4:	f000 fb24 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001d8 	.word	0x200001d8
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART3_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f004 f83e 	bl	8004970 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f901 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000220 	.word	0x20000220
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fe80 	bl	8002654 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8d1 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000264 	.word	0x20000264

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	203b      	movs	r0, #59	; 0x3b
 8000990:	f001 f81c 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000994:	203b      	movs	r0, #59	; 0x3b
 8000996:	f001 f835 	bl	8001a04 <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a42      	ldr	r2, [pc, #264]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3b      	ldr	r2, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <MX_GPIO_Init+0x128>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x128>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <MX_GPIO_Init+0x128>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <MX_GPIO_Init+0x128>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0x128>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_GPIO_Init+0x128>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, displ_cs_Pin|touch_cs_Pin|displ_dc_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000a34:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <MX_GPIO_Init+0x12c>)
 8000a36:	f001 fcaf 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(displ_rst_GPIO_Port, displ_rst_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0x12c>)
 8000a42:	f001 fca9 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0x130>)
 8000a4e:	f001 fca3 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : touch_int_Pin */
  GPIO_InitStruct.Pin = touch_int_Pin;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(touch_int_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0x130>)
 8000a68:	f001 fb02 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : displ_cs_Pin touch_cs_Pin displ_dc_Pin */
  GPIO_InitStruct.Pin = displ_cs_Pin|touch_cs_Pin|displ_dc_Pin;
 8000a6c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x12c>)
 8000a86:	f001 faf3 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : displ_rst_Pin */
  GPIO_InitStruct.Pin = displ_rst_Pin;
 8000a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(displ_rst_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0x12c>)
 8000aa4:	f001 fae4 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0x130>)
 8000ac2:	f001 fad5 	bl	8002070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 fbff 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010000 	.word	0x40010000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_ADC_MspInit+0x7c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d127      	bne.n	8000bce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_ADC_MspInit+0x80>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = emg_adc_Pin;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(emg_adc_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_ADC_MspInit+0x84>)
 8000bca:	f001 fa51 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_CRC_MspInit+0x3c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10d      	bne.n	8000c12 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_CRC_MspInit+0x40>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_CRC_MspInit+0x40>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_CRC_MspInit+0x40>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023000 	.word	0x40023000
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <HAL_I2C_MspInit+0x168>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d14c      	bne.n	8000ce4 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
 8000c4e:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a49      	ldr	r2, [pc, #292]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = temp_scl_Pin;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c88:	2312      	movs	r3, #18
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c94:	2304      	movs	r3, #4
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_scl_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	483e      	ldr	r0, [pc, #248]	; (8000d98 <HAL_I2C_MspInit+0x170>)
 8000ca0:	f001 f9e6 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = temp_sda_Pin;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_sda_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4836      	ldr	r0, [pc, #216]	; (8000d9c <HAL_I2C_MspInit+0x174>)
 8000cc2:	f001 f9d5 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ce2:	e050      	b.n	8000d86 <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_I2C_MspInit+0x178>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d14b      	bne.n	8000d86 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = oxi_sda_Pin;
 8000d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_sda_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <HAL_I2C_MspInit+0x174>)
 8000d44:	f001 f994 	bl	8002070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = oxi_scl_Pin;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_scl_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_I2C_MspInit+0x17c>)
 8000d66:	f001 f983 	bl	8002070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0x16c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	; 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005800 	.word	0x40005800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40005c00 	.word	0x40005c00
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <HAL_SPI_MspInit+0xf0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d161      	bne.n	8000e8e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a2b      	ldr	r2, [pc, #172]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <HAL_SPI_MspInit+0xf4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = displ_sck_Pin|touch_mosi_Pin|displ_mosi_Pin;
 8000e02:	23e0      	movs	r3, #224	; 0xe0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e12:	2305      	movs	r3, #5
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <HAL_SPI_MspInit+0xf8>)
 8000e1e:	f001 f927 	bl	8002070 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_SPI_MspInit+0x100>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e32:	2240      	movs	r2, #64	; 0x40
 8000e34:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e64:	f000 fdf8 	bl	8001a58 <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000e6e:	f7ff fe47 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e76:	649a      	str	r2, [r3, #72]	; 0x48
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_SPI_MspInit+0xfc>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2023      	movs	r0, #35	; 0x23
 8000e84:	f000 fda2 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e88:	2023      	movs	r0, #35	; 0x23
 8000e8a:	f000 fdbb 	bl	8001a04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	20000178 	.word	0x20000178
 8000ea8:	40026458 	.word	0x40026458

08000eac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10d      	bne.n	8000eda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_TIM_MspPostInit+0x68>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d11d      	bne.n	8000f4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_TIM_MspPostInit+0x6c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_TIM_MspPostInit+0x6c>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_TIM_MspPostInit+0x6c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = displ_led_Pin;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(displ_led_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_TIM_MspPostInit+0x70>)
 8000f4a:	f001 f891 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40000400 	.word	0x40000400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020800 	.word	0x40020800

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = usart_emg_rx_Pin|usart_emg_tx_Pin;
 8000fbe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fdc:	f001 f848 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a0      	sub	sp, #128	; 0x80
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	225c      	movs	r2, #92	; 0x5c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fa69 	bl	80054ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001022:	d141      	bne.n	80010a8 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800102a:	2300      	movs	r3, #0
 800102c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fda2 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff fd5f 	bl	8000b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800105e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001062:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001070:	230a      	movs	r3, #10
 8001072:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001078:	4619      	mov	r1, r3
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <HAL_PCD_MspInit+0xc0>)
 800107c:	f000 fff8 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108a:	6353      	str	r3, [r2, #52]	; 0x34
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109a:	6453      	str	r3, [r2, #68]	; 0x44
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_PCD_MspInit+0xbc>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3780      	adds	r7, #128	; 0x80
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_InitTick+0xd4>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	4a2e      	ldr	r2, [pc, #184]	; (800118c <HAL_InitTick+0xd4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6453      	str	r3, [r2, #68]	; 0x44
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_InitTick+0xd4>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fd12 	bl	8002b18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010f4:	f001 fcfc 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 80010f8:	4603      	mov	r3, r0
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_InitTick+0xd8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	3b01      	subs	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <HAL_InitTick+0xdc>)
 800110e:	4a22      	ldr	r2, [pc, #136]	; (8001198 <HAL_InitTick+0xe0>)
 8001110:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_InitTick+0xdc>)
 8001114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001118:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_InitTick+0xdc>)
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_InitTick+0xdc>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_InitTick+0xdc>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_InitTick+0xdc>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <HAL_InitTick+0xdc>)
 8001134:	f002 fe30 	bl	8003d98 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800113e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001142:	2b00      	cmp	r3, #0
 8001144:	d11b      	bne.n	800117e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001146:	4813      	ldr	r0, [pc, #76]	; (8001194 <HAL_InitTick+0xdc>)
 8001148:	f002 fe80 	bl	8003e4c <HAL_TIM_Base_Start_IT>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001156:	2b00      	cmp	r3, #0
 8001158:	d111      	bne.n	800117e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800115a:	2019      	movs	r0, #25
 800115c:	f000 fc52 	bl	8001a04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	d808      	bhi.n	8001178 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001166:	2200      	movs	r2, #0
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	2019      	movs	r0, #25
 800116c:	f000 fc2e 	bl	80019cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_InitTick+0xe4>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e002      	b.n	800117e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001182:	4618      	mov	r0, r3
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	431bde83 	.word	0x431bde83
 8001194:	20000770 	.word	0x20000770
 8001198:	40010000 	.word	0x40010000
 800119c:	20000004 	.word	0x20000004

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011fe:	f002 fee4 	bl	8003fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000770 	.word	0x20000770

0800120c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <SPI1_IRQHandler+0x10>)
 8001212:	f002 fcaf 	bl	8003b74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000120 	.word	0x20000120

08001220 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA2_Stream3_IRQHandler+0x10>)
 8001226:	f000 fce7 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000178 	.word	0x20000178

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
 8001262:	2300      	movs	r3, #0
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:
 8001266:	58d4      	ldr	r4, [r2, r3]
 8001268:	50c4      	str	r4, [r0, r3]
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:
 800126c:	18c4      	adds	r4, r0, r3
 800126e:	428c      	cmp	r4, r1
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
 8001276:	2300      	movs	r3, #0
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:
 800127e:	42a2      	cmp	r2, r4
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
 8001286:	f004 f939 	bl	80054fc <__libc_init_array>
 800128a:	f7ff f939 	bl	8000500 <main>
 800128e:	4770      	bx	lr
 8001290:	20020000 	.word	0x20020000
 8001294:	20000000 	.word	0x20000000
 8001298:	2000000c 	.word	0x2000000c
 800129c:	0800558c 	.word	0x0800558c
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	200007bc 	.word	0x200007bc

080012a8 <ADC_IRQHandler>:
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fb6e 	bl	80019b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff feec 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fc14 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	200007b8 	.word	0x200007b8

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200007b8 	.word	0x200007b8

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e033      	b.n	80013f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fbe0 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013be:	f023 0302 	bic.w	r3, r3, #2
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f94a 	bl	8001664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
 80013e6:	e001      	b.n	80013ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1c>
 8001418:	2302      	movs	r3, #2
 800141a:	e113      	b.n	8001644 <HAL_ADC_ConfigChannel+0x244>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d925      	bls.n	8001478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68d9      	ldr	r1, [r3, #12]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	3b1e      	subs	r3, #30
 8001442:	2207      	movs	r2, #7
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68d9      	ldr	r1, [r3, #12]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	4603      	mov	r3, r0
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4403      	add	r3, r0
 800146a:	3b1e      	subs	r3, #30
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	e022      	b.n	80014be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6919      	ldr	r1, [r3, #16]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	2207      	movs	r2, #7
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4403      	add	r3, r0
 80014b4:	409a      	lsls	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d824      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b05      	subs	r3, #5
 80014d8:	221f      	movs	r2, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	400a      	ands	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b05      	subs	r3, #5
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	e04c      	b.n	80015aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d824      	bhi.n	8001562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b23      	subs	r3, #35	; 0x23
 800152a:	221f      	movs	r2, #31
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43da      	mvns	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	400a      	ands	r2, r1
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b23      	subs	r3, #35	; 0x23
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
 8001560:	e023      	b.n	80015aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b41      	subs	r3, #65	; 0x41
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	400a      	ands	r2, r1
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b41      	subs	r3, #65	; 0x41
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_ADC_ConfigChannel+0x250>)
 80015ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_ADC_ConfigChannel+0x254>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d8>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b12      	cmp	r3, #18
 80015be:	d10b      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_ADC_ConfigChannel+0x254>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_ADC_ConfigChannel+0x258>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d003      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x1f4>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b11      	cmp	r3, #17
 80015f2:	d122      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_ADC_ConfigChannel+0x258>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d111      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_ADC_ConfigChannel+0x25c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_ADC_ConfigChannel+0x260>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40012300 	.word	0x40012300
 8001654:	40012000 	.word	0x40012000
 8001658:	10000012 	.word	0x10000012
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <ADC_Init+0x1f0>)
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ADC_Init+0x1f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00f      	b.n	8001762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	035a      	lsls	r2, r3, #13
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e007      	b.n	80017d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	051a      	lsls	r2, r3, #20
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	025a      	lsls	r2, r3, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	029a      	lsls	r2, r3, #10
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	0f000001 	.word	0x0f000001

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff4c 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019de:	f7ff ff61 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7ff ffb1 	bl	8001950 <NVIC_EncodePriority>
 80019ee:	4602      	mov	r2, r0
 80019f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff80 	bl	80018fc <__NVIC_SetPriority>
}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff54 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	795b      	ldrb	r3, [r3, #5]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff f8ce 	bl	8000be4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fc58 	bl	8001318 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e099      	b.n	8001ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a94:	e00f      	b.n	8001ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a96:	f7ff fc3f 	bl	8001318 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d908      	bls.n	8001ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e078      	b.n	8001ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e8      	bne.n	8001a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_DMA_Init+0x158>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f023 0307 	bic.w	r3, r3, #7
 8001b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d117      	bne.n	8001b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa0b 	bl	8001f78 <DMA_CheckFifoParam>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b76:	2301      	movs	r3, #1
 8001b78:	e016      	b.n	8001ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f9c2 	bl	8001f0c <DMA_CalcBaseAndBitshift>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	f010803f 	.word	0xf010803f

08001bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00c      	b.n	8001bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c04:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <HAL_DMA_IRQHandler+0x248>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a8e      	ldr	r2, [pc, #568]	; (8001e44 <HAL_DMA_IRQHandler+0x24c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	2208      	movs	r2, #8
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2208      	movs	r2, #8
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d012      	beq.n	8001c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2201      	movs	r2, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d012      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f043 0204 	orr.w	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d043      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03c      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d108      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d024      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
 8001d26:	e01f      	b.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
 8001d38:	e016      	b.n	8001d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0208 	bic.w	r2, r2, #8
 8001d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 808f 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8087 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2220      	movs	r2, #32
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d136      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0216 	bic.w	r2, r2, #22
 8001db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_DMA_IRQHandler+0x1da>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0208 	bic.w	r2, r2, #8
 8001de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	223f      	movs	r2, #63	; 0x3f
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d07e      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
        }
        return;
 8001e0e:	e079      	b.n	8001f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d031      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e02c      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000
 8001e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d023      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
 8001e58:	e01e      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10f      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d032      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2205      	movs	r2, #5
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d307      	bcc.n	8001ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f2      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x2cc>
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f04:	bf00      	nop
    }
  }
}
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b10      	subs	r3, #16
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <DMA_CalcBaseAndBitshift+0x64>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d909      	bls.n	8001f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4c:	e007      	b.n	8001f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	aaaaaaab 	.word	0xaaaaaaab
 8001f74:	08005574 	.word	0x08005574

08001f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d856      	bhi.n	8002046 <DMA_CheckFifoParam+0xce>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <DMA_CheckFifoParam+0x28>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fb1 	.word	0x08001fb1
 8001fac:	08002047 	.word	0x08002047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d046      	beq.n	800204a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e043      	b.n	800204a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fca:	d140      	bne.n	800204e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e03d      	b.n	800204e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d121      	bne.n	8002020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d837      	bhi.n	8002052 <DMA_CheckFifoParam+0xda>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x70>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08001fff 	.word	0x08001fff
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	08002011 	.word	0x08002011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e030      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d025      	beq.n	8002056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200e:	e022      	b.n	8002056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002018:	d11f      	bne.n	800205a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800201e:	e01c      	b.n	800205a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d903      	bls.n	800202e <DMA_CheckFifoParam+0xb6>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d003      	beq.n	8002034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800202c:	e018      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      break;
 8002032:	e015      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e00b      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002046:	bf00      	nop
 8002048:	e00a      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e008      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e006      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e004      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e002      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;   
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
    }
  } 
  
  return status; 
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e165      	b.n	8002358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800208c:	2201      	movs	r2, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8154 	bne.w	8002352 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d005      	beq.n	80020c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d130      	bne.n	8002124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 0201 	and.w	r2, r3, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b03      	cmp	r3, #3
 800212e:	d017      	beq.n	8002160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d123      	bne.n	80021b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80ae 	beq.w	8002352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_GPIO_Init+0x300>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_GPIO_Init+0x300>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <HAL_GPIO_Init+0x300>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_GPIO_Init+0x304>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HAL_GPIO_Init+0x308>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d025      	beq.n	800228a <HAL_GPIO_Init+0x21a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_GPIO_Init+0x30c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <HAL_GPIO_Init+0x216>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_GPIO_Init+0x310>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x212>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x314>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <HAL_GPIO_Init+0x318>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x20a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_GPIO_Init+0x31c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x206>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a49      	ldr	r2, [pc, #292]	; (8002390 <HAL_GPIO_Init+0x320>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x202>
 800226e:	2306      	movs	r3, #6
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x21c>
 8002272:	2307      	movs	r3, #7
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x21c>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x21c>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x21c>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x21c>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x21c>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x21c>
 800228a:	2300      	movs	r3, #0
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x304>)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_GPIO_Init+0x324>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a31      	ldr	r2, [pc, #196]	; (8002394 <HAL_GPIO_Init+0x324>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <HAL_GPIO_Init+0x324>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_GPIO_Init+0x324>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fe:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_GPIO_Init+0x324>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_GPIO_Init+0x324>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	f67f ae96 	bls.w	800208c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40013800 	.word	0x40013800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40021000 	.word	0x40021000
 800238c:	40021400 	.word	0x40021400
 8002390:	40021800 	.word	0x40021800
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e12b      	b.n	8002636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fc18 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002430:	f000 fb4a 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a81      	ldr	r2, [pc, #516]	; (8002640 <HAL_I2C_Init+0x274>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d807      	bhi.n	8002450 <HAL_I2C_Init+0x84>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a80      	ldr	r2, [pc, #512]	; (8002644 <HAL_I2C_Init+0x278>)
 8002444:	4293      	cmp	r3, r2
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e006      	b.n	800245e <HAL_I2C_Init+0x92>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <HAL_I2C_Init+0x27c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0e7      	b.n	8002636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a78      	ldr	r2, [pc, #480]	; (800264c <HAL_I2C_Init+0x280>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_I2C_Init+0x274>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d802      	bhi.n	80024a0 <HAL_I2C_Init+0xd4>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	e009      	b.n	80024b4 <HAL_I2C_Init+0xe8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_I2C_Init+0x284>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	3301      	adds	r3, #1
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	495c      	ldr	r1, [pc, #368]	; (8002640 <HAL_I2C_Init+0x274>)
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d819      	bhi.n	8002508 <HAL_I2C_Init+0x13c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e59      	subs	r1, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e2:	1c59      	adds	r1, r3, #1
 80024e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e8:	400b      	ands	r3, r1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_I2C_Init+0x138>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e59      	subs	r1, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002502:	e051      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002504:	2304      	movs	r3, #4
 8002506:	e04f      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <HAL_I2C_Init+0x168>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e012      	b.n	800255a <HAL_I2C_Init+0x18e>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Init+0x196>
 800255e:	2301      	movs	r3, #1
 8002560:	e022      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10e      	bne.n	8002588 <HAL_I2C_Init+0x1bc>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e58      	subs	r0, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	440b      	add	r3, r1
 8002578:	fbb0 f3f3 	udiv	r3, r0, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	fbb0 f3f3 	udiv	r3, r0, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	6809      	ldr	r1, [r1, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6911      	ldr	r1, [r2, #16]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	000186a0 	.word	0x000186a0
 8002644:	001e847f 	.word	0x001e847f
 8002648:	003d08ff 	.word	0x003d08ff
 800264c:	431bde83 	.word	0x431bde83
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	b08f      	sub	sp, #60	; 0x3c
 8002658:	af0a      	add	r7, sp, #40	; 0x28
 800265a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e116      	b.n	8002894 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe fcb7 	bl	8000ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2203      	movs	r2, #3
 800268a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fc86 	bl	8004fb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	687e      	ldr	r6, [r7, #4]
 80026b2:	466d      	mov	r5, sp
 80026b4:	f106 0410 	add.w	r4, r6, #16
 80026b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c8:	1d33      	adds	r3, r6, #4
 80026ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026cc:	6838      	ldr	r0, [r7, #0]
 80026ce:	f002 fc11 	bl	8004ef4 <USB_CoreInit>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d7      	b.n	8002894 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fc74 	bl	8004fd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e04a      	b.n	800278c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	333d      	adds	r3, #61	; 0x3d
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	333c      	adds	r3, #60	; 0x3c
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	b298      	uxth	r0, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3344      	adds	r3, #68	; 0x44
 8002732:	4602      	mov	r2, r0
 8002734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3340      	adds	r3, #64	; 0x40
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3348      	adds	r3, #72	; 0x48
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334c      	adds	r3, #76	; 0x4c
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3354      	adds	r3, #84	; 0x54
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3af      	bcc.n	80026f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e044      	b.n	8002826 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b5      	bcc.n	800279c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	687e      	ldr	r6, [r7, #4]
 8002838:	466d      	mov	r5, sp
 800283a:	f106 0410 	add.w	r4, r6, #16
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284a:	e885 0003 	stmia.w	r5, {r0, r1}
 800284e:	1d33      	adds	r3, r6, #4
 8002850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f002 fc0c 	bl	8005070 <USB_DevInit>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e014      	b.n	8002894 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f80a 	bl	800289c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fdca 	bl	8005426 <USB_DevDisconnect>

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	f043 0303 	orr.w	r3, r3, #3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fca0 	bl	8001318 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe fc9c 	bl	8001318 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 fbb1 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fb14 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	0800555c 	.word	0x0800555c
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	0800556c 	.word	0x0800556c

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffdc 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	0800556c 	.word	0x0800556c

08002b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	220f      	movs	r2, #15
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCC_GetClockConfig+0x60>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40023c00 	.word	0x40023c00

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	496c      	ldr	r1, [pc, #432]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002be2:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	4960      	ldr	r1, [pc, #384]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c00:	2301      	movs	r3, #1
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c10:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4955      	ldr	r1, [pc, #340]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c4c:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	4946      	ldr	r1, [pc, #280]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 808a 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fb31 	bl	8001318 <HAL_GetTick>
 8002cb6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fb2d 	bl	8001318 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e278      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d028      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d114      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fafb 	bl	8001318 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe faf7 	bl	8001318 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e240      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d54:	d114      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6a:	4902      	ldr	r1, [pc, #8]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42470e40 	.word	0x42470e40
 8002d80:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a49      	ldr	r2, [pc, #292]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d8a:	6093      	str	r3, [r2, #8]
 8002d8c:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	4944      	ldr	r1, [pc, #272]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002db0:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002db2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	4937      	ldr	r1, [pc, #220]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002de2:	4b32      	ldr	r3, [pc, #200]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	492e      	ldr	r1, [pc, #184]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	4926      	ldr	r1, [pc, #152]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d101      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e24:	2301      	movs	r3, #1
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	491a      	ldr	r1, [pc, #104]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d011      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	4911      	ldr	r1, [pc, #68]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e88:	f040 80ff 	bne.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e92:	f7fe fa41 	bl	8001318 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e98:	e00e      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e9a:	f7fe fa3d 	bl	8001318 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d907      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e188      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	424711e0 	.word	0x424711e0
 8002eb4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb8:	4b7e      	ldr	r3, [pc, #504]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ea      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d028      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d124      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002eec:	4b71      	ldr	r3, [pc, #452]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	431a      	orrs	r2, r3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	4961      	ldr	r1, [pc, #388]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d035      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f60:	d130      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	071b      	lsls	r3, r3, #28
 8002fa4:	4943      	ldr	r1, [pc, #268]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fac:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f023 021f 	bic.w	r2, r3, #31
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	493d      	ldr	r1, [pc, #244]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d029      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd8:	d124      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	3b01      	subs	r3, #1
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	071b      	lsls	r3, r3, #28
 800301c:	4925      	ldr	r1, [pc, #148]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d016      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	3b01      	subs	r3, #1
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	4917      	ldr	r1, [pc, #92]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe f958 	bl	8001318 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800306c:	f7fe f954 	bl	8001318 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e09f      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8095 	bne.w	80031bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003098:	f7fe f93e 	bl	8001318 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800309e:	e00f      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030a0:	f7fe f93a 	bl	8001318 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d908      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e085      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470068 	.word	0x42470068
 80030bc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c0:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030cc:	d0e8      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02b      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d127      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	3301      	adds	r3, #1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	431a      	orrs	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	3b01      	subs	r3, #1
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	4928      	ldr	r1, [pc, #160]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800312e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003132:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	3b01      	subs	r3, #1
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	4922      	ldr	r1, [pc, #136]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01d      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d118      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	0e1b      	lsrs	r3, r3, #24
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	4910      	ldr	r1, [pc, #64]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003194:	f7fe f8c0 	bl	8001318 <HAL_GetTick>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800319c:	f7fe f8bc 	bl	8001318 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e007      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ba:	d1ef      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3730      	adds	r7, #48	; 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470070 	.word	0x42470070

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b0a6      	sub	sp, #152	; 0x98
 80031d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f6:	4bc8      	ldr	r3, [pc, #800]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	f200 817e 	bhi.w	8003500 <HAL_RCC_GetSysClockFreq+0x330>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003241 	.word	0x08003241
 8003210:	08003501 	.word	0x08003501
 8003214:	08003501 	.word	0x08003501
 8003218:	08003501 	.word	0x08003501
 800321c:	08003249 	.word	0x08003249
 8003220:	08003501 	.word	0x08003501
 8003224:	08003501 	.word	0x08003501
 8003228:	08003501 	.word	0x08003501
 800322c:	08003251 	.word	0x08003251
 8003230:	08003501 	.word	0x08003501
 8003234:	08003501 	.word	0x08003501
 8003238:	08003501 	.word	0x08003501
 800323c:	080033bb 	.word	0x080033bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4bb6      	ldr	r3, [pc, #728]	; (800351c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003246:	e15f      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003248:	4bb5      	ldr	r3, [pc, #724]	; (8003520 <HAL_RCC_GetSysClockFreq+0x350>)
 800324a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800324e:	e15b      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003250:	4bb1      	ldr	r3, [pc, #708]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325c:	4bae      	ldr	r3, [pc, #696]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d031      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003268:	4bab      	ldr	r3, [pc, #684]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	2200      	movs	r2, #0
 8003270:	66bb      	str	r3, [r7, #104]	; 0x68
 8003272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327a:	663b      	str	r3, [r7, #96]	; 0x60
 800327c:	2300      	movs	r3, #0
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
 8003280:	4ba7      	ldr	r3, [pc, #668]	; (8003520 <HAL_RCC_GetSysClockFreq+0x350>)
 8003282:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003286:	462a      	mov	r2, r5
 8003288:	fb03 f202 	mul.w	r2, r3, r2
 800328c:	2300      	movs	r3, #0
 800328e:	4621      	mov	r1, r4
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	4aa2      	ldr	r2, [pc, #648]	; (8003520 <HAL_RCC_GetSysClockFreq+0x350>)
 8003298:	4621      	mov	r1, r4
 800329a:	fba1 1202 	umull	r1, r2, r1, r2
 800329e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032a0:	460a      	mov	r2, r1
 80032a2:	67ba      	str	r2, [r7, #120]	; 0x78
 80032a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032a6:	4413      	add	r3, r2
 80032a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ae:	2200      	movs	r2, #0
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032bc:	f7fc ffa2 	bl	8000204 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4613      	mov	r3, r2
 80032c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ca:	e064      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032cc:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	2200      	movs	r2, #0
 80032d4:	653b      	str	r3, [r7, #80]	; 0x50
 80032d6:	657a      	str	r2, [r7, #84]	; 0x54
 80032d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e0:	2300      	movs	r3, #0
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032e8:	4622      	mov	r2, r4
 80032ea:	462b      	mov	r3, r5
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fa:	0150      	lsls	r0, r2, #5
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4621      	mov	r1, r4
 8003302:	1a51      	subs	r1, r2, r1
 8003304:	6139      	str	r1, [r7, #16]
 8003306:	4629      	mov	r1, r5
 8003308:	eb63 0301 	sbc.w	r3, r3, r1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331a:	4659      	mov	r1, fp
 800331c:	018b      	lsls	r3, r1, #6
 800331e:	4651      	mov	r1, sl
 8003320:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003324:	4651      	mov	r1, sl
 8003326:	018a      	lsls	r2, r1, #6
 8003328:	4651      	mov	r1, sl
 800332a:	ebb2 0801 	subs.w	r8, r2, r1
 800332e:	4659      	mov	r1, fp
 8003330:	eb63 0901 	sbc.w	r9, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003340:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003344:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003348:	4690      	mov	r8, r2
 800334a:	4699      	mov	r9, r3
 800334c:	4623      	mov	r3, r4
 800334e:	eb18 0303 	adds.w	r3, r8, r3
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	462b      	mov	r3, r5
 8003356:	eb49 0303 	adc.w	r3, r9, r3
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003368:	4629      	mov	r1, r5
 800336a:	028b      	lsls	r3, r1, #10
 800336c:	4621      	mov	r1, r4
 800336e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003372:	4621      	mov	r1, r4
 8003374:	028a      	lsls	r2, r1, #10
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337e:	2200      	movs	r2, #0
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
 8003382:	647a      	str	r2, [r7, #68]	; 0x44
 8003384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003388:	f7fc ff3c 	bl	8000204 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003396:	4b60      	ldr	r3, [pc, #384]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	3301      	adds	r3, #1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80033a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033b8:	e0a6      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ba:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c6:	4b54      	ldr	r3, [pc, #336]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d02a      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b51      	ldr	r3, [pc, #324]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
 80033dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e4:	2100      	movs	r1, #0
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_RCC_GetSysClockFreq+0x350>)
 80033e8:	fb03 f201 	mul.w	r2, r3, r1
 80033ec:	2300      	movs	r3, #0
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_RCC_GetSysClockFreq+0x350>)
 80033f6:	fba0 1202 	umull	r1, r2, r0, r2
 80033fa:	677a      	str	r2, [r7, #116]	; 0x74
 80033fc:	460a      	mov	r2, r1
 80033fe:	673a      	str	r2, [r7, #112]	; 0x70
 8003400:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003402:	4413      	add	r3, r2
 8003404:	677b      	str	r3, [r7, #116]	; 0x74
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340a:	2200      	movs	r2, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	637a      	str	r2, [r7, #52]	; 0x34
 8003410:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003414:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003418:	f7fc fef4 	bl	8000204 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003426:	e05b      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	2200      	movs	r2, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	f04f 0000 	mov.w	r0, #0
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	0159      	lsls	r1, r3, #5
 8003452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003456:	0150      	lsls	r0, r2, #5
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4641      	mov	r1, r8
 800345e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb63 0b01 	sbc.w	fp, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800347c:	ebb2 040a 	subs.w	r4, r2, sl
 8003480:	eb63 050b 	sbc.w	r5, r3, fp
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	00eb      	lsls	r3, r5, #3
 800348e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003492:	00e2      	lsls	r2, r4, #3
 8003494:	4614      	mov	r4, r2
 8003496:	461d      	mov	r5, r3
 8003498:	4643      	mov	r3, r8
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	464b      	mov	r3, r9
 80034a0:	eb45 0303 	adc.w	r3, r5, r3
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b2:	4629      	mov	r1, r5
 80034b4:	028b      	lsls	r3, r1, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034bc:	4621      	mov	r1, r4
 80034be:	028a      	lsls	r2, r1, #10
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c8:	2200      	movs	r2, #0
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	61fa      	str	r2, [r7, #28]
 80034ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d2:	f7fc fe97 	bl	8000204 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4613      	mov	r3, r2
 80034dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCC_GetSysClockFreq+0x348>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0f1b      	lsrs	r3, r3, #28
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80034ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034fe:	e003      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800350c:	4618      	mov	r0, r3
 800350e:	3798      	adds	r7, #152	; 0x98
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	017d7840 	.word	0x017d7840

08003524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e28d      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8083 	beq.w	800364a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003544:	4b94      	ldr	r3, [pc, #592]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b04      	cmp	r3, #4
 800354e:	d019      	beq.n	8003584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003550:	4b91      	ldr	r3, [pc, #580]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003558:	2b08      	cmp	r3, #8
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003568:	d00c      	beq.n	8003584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b84      	ldr	r3, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x124>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d157      	bne.n	8003648 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e25a      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x90>
 80035a6:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7b      	ldr	r2, [pc, #492]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xcc>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0xb4>
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xcc>
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6b      	ldr	r2, [pc, #428]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fe8e 	bl	8001318 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fd fe8a 	bl	8001318 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e21f      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b61      	ldr	r3, [pc, #388]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xdc>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fe7a 	bl	8001318 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fd fe76 	bl	8001318 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e20b      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x104>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06f      	beq.n	8003736 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003656:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d017      	beq.n	8003692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003662:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800366a:	2b08      	cmp	r3, #8
 800366c:	d105      	bne.n	800367a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d11c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x186>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1d3      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4937      	ldr	r1, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	e03a      	b.n	8003736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x278>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fe23 	bl	8001318 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fd fe1f 	bl	8001318 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1b4      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4925      	ldr	r1, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x278>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fe02 	bl	8001318 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003718:	f7fd fdfe 	bl	8001318 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e193      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d036      	beq.n	80037b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x27c>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fde2 	bl	8001318 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fd fdde 	bl	8001318 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e173      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800376c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x234>
 8003776:	e01b      	b.n	80037b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_OscConfig+0x27c>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fdcb 	bl	8001318 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	e00e      	b.n	80037a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd fdc7 	bl	8001318 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d907      	bls.n	80037a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e15c      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
 8003798:	40023800 	.word	0x40023800
 800379c:	42470000 	.word	0x42470000
 80037a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ea      	bne.n	8003786 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8097 	beq.w	80038ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b83      	ldr	r3, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b7c      	ldr	r3, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_RCC_OscConfig+0x4b0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x4b0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x4b0>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd fd87 	bl	8001318 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fd83 	bl	8001318 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e118      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x4b0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x31e>
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a65      	ldr	r2, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e01c      	b.n	800387c <HAL_RCC_OscConfig+0x358>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b05      	cmp	r3, #5
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x340>
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a60      	ldr	r2, [pc, #384]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x358>
 8003864:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4a56      	ldr	r2, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fd fd48 	bl	8001318 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fd fd44 	bl	8001318 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0d7      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCC_OscConfig+0x368>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fd32 	bl	8001318 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd fd2e 	bl	8001318 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0c1      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ee      	bne.n	80038b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80ad 	beq.w	8003a50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d060      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d145      	bne.n	8003996 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x4b4>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fd02 	bl	8001318 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fcfe 	bl	8001318 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e093      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x4b4>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fd fcd3 	bl	8001318 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7fd fccf 	bl	8001318 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e064      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x452>
 8003994:	e05c      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x4b4>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fcbc 	bl	8001318 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fcb8 	bl	8001318 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04d      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x480>
 80039c2:	e045      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e040      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_OscConfig+0x538>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d030      	beq.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d129      	bne.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d122      	bne.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d119      	bne.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d10f      	bne.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07b      	b.n	8003b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a82:	d009      	beq.n	8003a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	61da      	str	r2, [r3, #28]
 8003a8a:	e005      	b.n	8003a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd f978 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0104 	and.w	r1, r3, #4
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0210 	and.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10e      	bne.n	8003bb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
    return;
 8003bb2:	e0ce      	b.n	8003d52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x5e>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
    return;
 8003bd0:	e0bf      	b.n	8003d52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_SPI_IRQHandler+0x7e>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80b0 	beq.w	8003d52 <HAL_SPI_IRQHandler+0x1de>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80aa 	beq.w	8003d52 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d023      	beq.n	8003c50 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d011      	beq.n	8003c38 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0204 	orr.w	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e00b      	b.n	8003c50 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
        return;
 8003c4e:	e080      	b.n	8003d52 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f043 0208 	orr.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d04f      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cbe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_SPI_IRQHandler+0x168>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d034      	beq.n	8003d46 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0203 	bic.w	r2, r2, #3
 8003cea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d011      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_SPI_IRQHandler+0x1e4>)
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd ff57 	bl	8001bb4 <HAL_DMA_Abort_IT>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <HAL_SPI_IRQHandler+0x1e4>)
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd ff41 	bl	8001bb4 <HAL_DMA_Abort_IT>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d44:	e003      	b.n	8003d4e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f808 	bl	8003d5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d4c:	e000      	b.n	8003d50 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d4e:	bf00      	nop
    return;
 8003d50:	bf00      	nop
  }
}
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08003d71 	.word	0x08003d71

08003d5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ffe6 	bl	8003d5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e041      	b.n	8003e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f839 	bl	8003e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 faea 	bl	80043b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d001      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04e      	b.n	8003f02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d01d      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d111      	bne.n	8003ef0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d010      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	e007      	b.n	8003f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40010400 	.word	0x40010400
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40001800 	.word	0x40001800

08003f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e041      	b.n	8003fc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc ffaa 	bl	8000eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 fa20 	bl	80043b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d122      	bne.n	8004026 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0202 	mvn.w	r2, #2
 8003ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f9b1 	bl	8004374 <HAL_TIM_IC_CaptureCallback>
 8004012:	e005      	b.n	8004020 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f9a3 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f9b4 	bl	8004388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d122      	bne.n	800407a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d11b      	bne.n	800407a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0204 	mvn.w	r2, #4
 800404a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f987 	bl	8004374 <HAL_TIM_IC_CaptureCallback>
 8004066:	e005      	b.n	8004074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f979 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f98a 	bl	8004388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d122      	bne.n	80040ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11b      	bne.n	80040ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0208 	mvn.w	r2, #8
 800409e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f95d 	bl	8004374 <HAL_TIM_IC_CaptureCallback>
 80040ba:	e005      	b.n	80040c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f94f 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f960 	bl	8004388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d122      	bne.n	8004122 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d11b      	bne.n	8004122 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0210 	mvn.w	r2, #16
 80040f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2208      	movs	r2, #8
 80040f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f933 	bl	8004374 <HAL_TIM_IC_CaptureCallback>
 800410e:	e005      	b.n	800411c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f925 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f936 	bl	8004388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10e      	bne.n	800414e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0201 	mvn.w	r2, #1
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fc fcc7 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d10e      	bne.n	800417a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fbf1 	bl	800495c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d10e      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8fb 	bl	800439c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d10e      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0220 	mvn.w	r2, #32
 80041ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fbbb 	bl	8004948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0ae      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	f200 809f 	bhi.w	8004348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004245 	.word	0x08004245
 8004214:	08004349 	.word	0x08004349
 8004218:	08004349 	.word	0x08004349
 800421c:	08004349 	.word	0x08004349
 8004220:	08004285 	.word	0x08004285
 8004224:	08004349 	.word	0x08004349
 8004228:	08004349 	.word	0x08004349
 800422c:	08004349 	.word	0x08004349
 8004230:	080042c7 	.word	0x080042c7
 8004234:	08004349 	.word	0x08004349
 8004238:	08004349 	.word	0x08004349
 800423c:	08004349 	.word	0x08004349
 8004240:	08004307 	.word	0x08004307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f950 	bl	80044f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6999      	ldr	r1, [r3, #24]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	619a      	str	r2, [r3, #24]
      break;
 8004282:	e064      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f9a0 	bl	80045d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]
      break;
 80042c4:	e043      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f9f5 	bl	80046bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0208 	orr.w	r2, r2, #8
 80042e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0204 	bic.w	r2, r2, #4
 80042f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
      break;
 8004304:	e023      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fa49 	bl	80047a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69d9      	ldr	r1, [r3, #28]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	021a      	lsls	r2, r3, #8
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	61da      	str	r2, [r3, #28]
      break;
 8004346:	e002      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a40      	ldr	r2, [pc, #256]	; (80044c4 <TIM_Base_SetConfig+0x114>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d00f      	beq.n	80043f0 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <TIM_Base_SetConfig+0x118>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <TIM_Base_SetConfig+0x11c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <TIM_Base_SetConfig+0x40>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <TIM_Base_SetConfig+0x120>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_Base_SetConfig+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a3a      	ldr	r2, [pc, #232]	; (80044d4 <TIM_Base_SetConfig+0x124>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d108      	bne.n	8004402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <TIM_Base_SetConfig+0x114>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02b      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d027      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <TIM_Base_SetConfig+0x118>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d023      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <TIM_Base_SetConfig+0x11c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01f      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <TIM_Base_SetConfig+0x120>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01b      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a29      	ldr	r2, [pc, #164]	; (80044d4 <TIM_Base_SetConfig+0x124>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d017      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <TIM_Base_SetConfig+0x128>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a27      	ldr	r2, [pc, #156]	; (80044dc <TIM_Base_SetConfig+0x12c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00f      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <TIM_Base_SetConfig+0x130>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <TIM_Base_SetConfig+0x134>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d007      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <TIM_Base_SetConfig+0x138>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <TIM_Base_SetConfig+0x13c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d108      	bne.n	8004474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <TIM_Base_SetConfig+0x114>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0xf8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <TIM_Base_SetConfig+0x124>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40010400 	.word	0x40010400
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40014400 	.word	0x40014400
 80044e0:	40014800 	.word	0x40014800
 80044e4:	40001800 	.word	0x40001800
 80044e8:	40001c00 	.word	0x40001c00
 80044ec:	40002000 	.word	0x40002000

080044f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0201 	bic.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 0302 	bic.w	r3, r3, #2
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <TIM_OC1_SetConfig+0xd8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_OC1_SetConfig+0x64>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <TIM_OC1_SetConfig+0xdc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10c      	bne.n	800456e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0308 	bic.w	r3, r3, #8
 800455a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <TIM_OC1_SetConfig+0xd8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_OC1_SetConfig+0x8e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <TIM_OC1_SetConfig+0xdc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d111      	bne.n	80045a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	621a      	str	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400

080045d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0210 	bic.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0320 	bic.w	r3, r3, #32
 800461a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <TIM_OC2_SetConfig+0xe4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC2_SetConfig+0x68>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_OC2_SetConfig+0xe8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <TIM_OC2_SetConfig+0xe4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC2_SetConfig+0x94>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <TIM_OC2_SetConfig+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d113      	bne.n	800468c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40010400 	.word	0x40010400

080046bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <TIM_OC3_SetConfig+0xe0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_OC3_SetConfig+0x66>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <TIM_OC3_SetConfig+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10d      	bne.n	800473e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800473c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <TIM_OC3_SetConfig+0xe0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC3_SetConfig+0x92>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <TIM_OC3_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d113      	bne.n	8004776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400

080047a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <TIM_OC4_SetConfig+0xa4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC4_SetConfig+0x68>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <TIM_OC4_SetConfig+0xa8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d109      	bne.n	8004820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e05a      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d01d      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10c      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40001800 	.word	0x40001800

08004948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e03f      	b.n	8004a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fae4 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f829 	bl	8004a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b0c0      	sub	sp, #256	; 0x100
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	ea40 0301 	orr.w	r3, r0, r1
 8004a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a64:	f021 010c 	bic.w	r1, r1, #12
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	6999      	ldr	r1, [r3, #24]
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	ea40 0301 	orr.w	r3, r0, r1
 8004a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b8f      	ldr	r3, [pc, #572]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d005      	beq.n	8004aac <UART_SetConfig+0xa0>
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b8d      	ldr	r3, [pc, #564]	; (8004cdc <UART_SetConfig+0x2d0>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d104      	bne.n	8004ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe f820 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ab4:	e003      	b.n	8004abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ab6:	f7fe f807 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8004aba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	f040 810c 	bne.w	8004ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	1891      	adds	r1, r2, r2
 8004ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aee:	4621      	mov	r1, r4
 8004af0:	eb12 0801 	adds.w	r8, r2, r1
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb43 0901 	adc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	eb49 0303 	adc.w	r3, r9, r3
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	18db      	adds	r3, r3, r3
 8004b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b40:	4613      	mov	r3, r2
 8004b42:	eb42 0303 	adc.w	r3, r2, r3
 8004b46:	657b      	str	r3, [r7, #84]	; 0x54
 8004b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b50:	f7fb fb58 	bl	8000204 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	011c      	lsls	r4, r3, #4
 8004b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b84:	4641      	mov	r1, r8
 8004b86:	eb12 0a01 	adds.w	sl, r2, r1
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba4:	4692      	mov	sl, r2
 8004ba6:	469b      	mov	fp, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	eb1a 0303 	adds.w	r3, sl, r3
 8004bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	18db      	adds	r3, r3, r3
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	eb42 0303 	adc.w	r3, r2, r3
 8004bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004be6:	f7fb fb0d 	bl	8000204 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2264      	movs	r2, #100	; 0x64
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	1acb      	subs	r3, r1, r3
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004c08:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c14:	441c      	add	r4, r3
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c30:	415b      	adcs	r3, r3
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ca2:	f7fb faaf 	bl	8000204 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	; 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3332      	adds	r3, #50	; 0x32
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 0207 	and.w	r2, r3, #7
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4422      	add	r2, r4
 8004cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cd4:	e106      	b.n	8004ee4 <UART_SetConfig+0x4d8>
 8004cd6:	bf00      	nop
 8004cd8:	40011000 	.word	0x40011000
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	1891      	adds	r1, r2, r2
 8004cfc:	6239      	str	r1, [r7, #32]
 8004cfe:	415b      	adcs	r3, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d06:	4641      	mov	r1, r8
 8004d08:	1854      	adds	r4, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb43 0501 	adc.w	r5, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	00eb      	lsls	r3, r5, #3
 8004d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1e:	00e2      	lsls	r2, r4, #3
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	18e3      	adds	r3, r4, r3
 8004d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	eb45 0303 	adc.w	r3, r5, r3
 8004d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d52:	4629      	mov	r1, r5
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	008a      	lsls	r2, r1, #2
 8004d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d64:	f7fb fa4e 	bl	8000204 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	61b9      	str	r1, [r7, #24]
 8004d90:	415b      	adcs	r3, r3
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	4641      	mov	r1, r8
 8004d9a:	1851      	adds	r1, r2, r1
 8004d9c:	6139      	str	r1, [r7, #16]
 8004d9e:	4649      	mov	r1, r9
 8004da0:	414b      	adcs	r3, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db0:	4659      	mov	r1, fp
 8004db2:	00cb      	lsls	r3, r1, #3
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dba:	4651      	mov	r1, sl
 8004dbc:	00ca      	lsls	r2, r1, #3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dcc:	464b      	mov	r3, r9
 8004dce:	460a      	mov	r2, r1
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e02:	f7fb f9ff 	bl	8000204 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2264      	movs	r2, #100	; 0x64
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	1acb      	subs	r3, r1, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	; 0x32
 8004e20:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2c:	441c      	add	r4, r3
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	673b      	str	r3, [r7, #112]	; 0x70
 8004e36:	677a      	str	r2, [r7, #116]	; 0x74
 8004e38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	415b      	adcs	r3, r3
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7e:	464b      	mov	r3, r9
 8004e80:	460a      	mov	r2, r1
 8004e82:	eb42 0303 	adc.w	r3, r2, r3
 8004e86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60
 8004e92:	667a      	str	r2, [r7, #100]	; 0x64
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	008b      	lsls	r3, r1, #2
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eaa:	4641      	mov	r1, r8
 8004eac:	008a      	lsls	r2, r1, #2
 8004eae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004eb2:	f7fb f9a7 	bl	8000204 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	3332      	adds	r3, #50	; 0x32
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <UART_SetConfig+0x4e4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4422      	add	r2, r4
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eea:	46bd      	mov	sp, r7
 8004eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef0:	51eb851f 	.word	0x51eb851f

08004ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	f107 001c 	add.w	r0, r7, #28
 8004f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d122      	bne.n	8004f52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa9c 	bl	8005484 <USB_CoreReset>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	e01a      	b.n	8004f88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa90 	bl	8005484 <USB_CoreReset>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
 8004f7a:	e005      	b.n	8004f88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10b      	bne.n	8004fa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f043 0206 	orr.w	r2, r3, #6
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb2:	b004      	add	sp, #16
 8004fb4:	4770      	bx	lr

08004fb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d115      	bne.n	8005026 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005006:	2001      	movs	r0, #1
 8005008:	f7fc f992 	bl	8001330 <HAL_Delay>
      ms++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa28 	bl	8005468 <USB_GetMode>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d01e      	beq.n	800505c <USB_SetCurrentMode+0x84>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b31      	cmp	r3, #49	; 0x31
 8005022:	d9f0      	bls.n	8005006 <USB_SetCurrentMode+0x2e>
 8005024:	e01a      	b.n	800505c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d115      	bne.n	8005058 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005038:	2001      	movs	r0, #1
 800503a:	f7fc f979 	bl	8001330 <HAL_Delay>
      ms++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fa0f 	bl	8005468 <USB_GetMode>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <USB_SetCurrentMode+0x84>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b31      	cmp	r3, #49	; 0x31
 8005054:	d9f0      	bls.n	8005038 <USB_SetCurrentMode+0x60>
 8005056:	e001      	b.n	800505c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e005      	b.n	8005068 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b32      	cmp	r3, #50	; 0x32
 8005060:	d101      	bne.n	8005066 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005070:	b084      	sub	sp, #16
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800507e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e009      	b.n	80050a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3340      	adds	r3, #64	; 0x40
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b0e      	cmp	r3, #14
 80050a8:	d9f2      	bls.n	8005090 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11c      	bne.n	80050ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e005      	b.n	80050f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	4619      	mov	r1, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	461a      	mov	r2, r3
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10c      	bne.n	8005136 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f965 	bl	80053f4 <USB_SetDevSpeed>
 800512a:	e008      	b.n	800513e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800512c:	2101      	movs	r1, #1
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f960 	bl	80053f4 <USB_SetDevSpeed>
 8005134:	e003      	b.n	800513e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005136:	2103      	movs	r1, #3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f95b 	bl	80053f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800513e:	2110      	movs	r1, #16
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8f3 	bl	800532c <USB_FlushTxFifo>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f91f 	bl	8005394 <USB_FlushRxFifo>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e043      	b.n	8005212 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a0:	d118      	bne.n	80051d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e013      	b.n	80051e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e008      	b.n	80051e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3301      	adds	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3b7      	bcc.n	800518a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e043      	b.n	80052a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005236:	d118      	bne.n	800526a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e013      	b.n	800527c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e008      	b.n	800527c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3b7      	bcc.n	8005220 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f043 0210 	orr.w	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <USB_DevInit+0x2b8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f043 0208 	orr.w	r2, r3, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005324:	b004      	add	sp, #16
 8005326:	4770      	bx	lr
 8005328:	803c3800 	.word	0x803c3800

0800532c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <USB_FlushTxFifo+0x64>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e01b      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	daf2      	bge.n	800533a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushTxFifo+0x64>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b20      	cmp	r3, #32
 8005380:	d0f0      	beq.n	8005364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e018      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	daf2      	bge.n	80053a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2210      	movs	r2, #16
 80053c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e006      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d0f0      	beq.n	80053c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	00030d40 	.word	0x00030d40

080053f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005440:	f023 0303 	bic.w	r3, r3, #3
 8005444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0301 	and.w	r3, r3, #1
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <USB_CoreReset+0x64>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e01b      	b.n	80054da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	daf2      	bge.n	8005490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f043 0201 	orr.w	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <USB_CoreReset+0x64>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e006      	b.n	80054da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d0f0      	beq.n	80054ba <USB_CoreReset+0x36>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	00030d40 	.word	0x00030d40

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 f818 	bl	8005544 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08005584 	.word	0x08005584
 8005538:	08005584 	.word	0x08005584
 800553c:	08005584 	.word	0x08005584
 8005540:	08005588 	.word	0x08005588

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
