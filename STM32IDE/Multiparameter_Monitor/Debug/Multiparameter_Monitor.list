
Multiparameter_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000121a  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000008  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08009220  08009220  00020074  2**0
                  CONTENTS
  6 .ARM          00000008  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08009228  08009228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000074  20000000  0800923c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b38  20000074  080092b0  00020074  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000bac  080092b0  00020bac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 14 .comment      000000c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024bc9  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005785  00000000  00000000  00044d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a88  00000000  00000000  0004a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001480  00000000  00000000  0004bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00036112  00000000  00000000  0004d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026ebf  00000000  00000000  000834d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000eef3a  00000000  00000000  000aa391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007bec  00000000  00000000  001992cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000095  00000000  00000000  001a0eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b90 	.word	0x08007b90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007b90 	.word	0x08007b90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fff4 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f816 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa54 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 fa2a 	bl	8000a14 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f9fa 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005c4:	f000 f87c 	bl	80006c0 <MX_ADC1_Init>
  MX_I2C3_Init();
 80005c8:	f000 f90e 	bl	80007e8 <MX_I2C3_Init>
  MX_I2C2_Init();
 80005cc:	f000 f8de 	bl	800078c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005d0:	f000 f938 	bl	8000844 <MX_SPI1_Init>
  MX_CRC_Init();
 80005d4:	f000 f8c6 	bl	8000764 <MX_CRC_Init>
  MX_TIM3_Init();
 80005d8:	f000 f96a 	bl	80008b0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f9c2 	bl	8000964 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x34>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 fcb7 	bl	8006f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a29      	ldr	r2, [pc, #164]	; (80006b8 <SystemClock_Config+0xd4>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <SystemClock_Config+0xd4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xd8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd8>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000658:	230f      	movs	r3, #15
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800065c:	2390      	movs	r3, #144	; 0x90
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000664:	2305      	movs	r3, #5
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f8cf 	bl	8003814 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800067c:	f000 fa9e 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fa98 	bl	8002bd4 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006aa:	f000 fa87 	bl	8000bbc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_ADC1_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_ADC1_Init+0x98>)
 8000720:	f000 ffa2 	bl	8001668 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fa47 	bl	8000bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072e:	2301      	movs	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0x98>)
 8000740:	f000 ffd6 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 fa37 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000090 	.word	0x20000090
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CRC_Init+0x20>)
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <MX_CRC_Init+0x24>)
 800076c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_CRC_Init+0x20>)
 8000770:	f001 face 	bl	8001d10 <HAL_CRC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800077a:	f000 fa1f 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000138 	.word	0x20000138
 8000788:	40023000 	.word	0x40023000

0800078c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C2_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C2_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C2_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C2_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C2_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C2_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C2_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C2_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C2_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C2_Init+0x50>)
 80007ca:	f001 ff77 	bl	80026bc <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f9f2 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000140 	.word	0x20000140
 80007e0:	40005800 	.word	0x40005800
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C3_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2C3_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C3_Init+0x50>)
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_I2C3_Init+0x58>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C3_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2C3_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2C3_Init+0x50>)
 8000806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2C3_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2C3_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2C3_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2C3_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C3_Init+0x50>)
 8000826:	f001 ff49 	bl	80026bc <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f9c4 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000194 	.word	0x20000194
 800083c:	40005c00 	.word	0x40005c00
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_SPI1_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <MX_SPI1_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000890:	220a      	movs	r2, #10
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000896:	f003 fa5b 	bl	8003d50 <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f98c 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001e8 	.word	0x200001e8
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_TIM3_Init+0xac>)
 80008d4:	4a22      	ldr	r2, [pc, #136]	; (8000960 <MX_TIM3_Init+0xb0>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM3_Init+0xac>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM3_Init+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM3_Init+0xac>)
 80008e6:	2264      	movs	r2, #100	; 0x64
 80008e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM3_Init+0xac>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM3_Init+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f6:	4819      	ldr	r0, [pc, #100]	; (800095c <MX_TIM3_Init+0xac>)
 80008f8:	f003 fc86 	bl	8004208 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000902:	f000 f95b 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_TIM3_Init+0xac>)
 8000916:	f004 f909 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000920:	f000 f94c 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 8000928:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800092c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2204      	movs	r2, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM3_Init+0xac>)
 800093e:	f003 fdbb 	bl	80044b8 <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000948:	f000 f938 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM3_Init+0xac>)
 800094e:	f000 fb61 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200002a0 	.word	0x200002a0
 8000960:	40000400 	.word	0x40000400

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART3_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800099c:	f004 f956 	bl	8004c4c <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f909 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002e8 	.word	0x200002e8
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f001 ffa2 	bl	8002944 <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f8d9 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000032c 	.word	0x2000032c

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2038      	movs	r0, #56	; 0x38
 8000a3c:	f001 f93e 	bl	8001cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a40:	2038      	movs	r0, #56	; 0x38
 8000a42:	f001 f957 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	203b      	movs	r0, #59	; 0x3b
 8000a4c:	f001 f936 	bl	8001cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a50:	203b      	movs	r0, #59	; 0x3b
 8000a52:	f001 f94f 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a42      	ldr	r2, [pc, #264]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a34      	ldr	r2, [pc, #208]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_CS_Pin|TOUCH_CS_Pin|DISPL_DC_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000af0:	4827      	ldr	r0, [pc, #156]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000af2:	f001 fdc9 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afc:	4824      	ldr	r0, [pc, #144]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000afe:	f001 fdc3 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_adc_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_GPIO_Init+0x130>)
 8000b0a:	f001 fdbd 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x130>)
 8000b24:	f001 fc1c 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin TOUCH_CS_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|TOUCH_CS_Pin|DISPL_DC_Pin;
 8000b28:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000b42:	f001 fc0d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8000b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000b60:	f001 fbfe 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_adc_Pin PA10 */
  GPIO_InitStruct.Pin = led_adc_Pin|GPIO_PIN_10;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_GPIO_Init+0x130>)
 8000b7e:	f001 fbef 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fd19 	bl	80015e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010000 	.word	0x40010000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <HAL_ADC_MspInit+0xdc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d157      	bne.n	8000cea <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_ADC_MspInit+0xe0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c72:	2302      	movs	r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	481d      	ldr	r0, [pc, #116]	; (8000cfc <HAL_ADC_MspInit+0xe4>)
 8000c86:	f001 fb6b 	bl	8002360 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_ADC_MspInit+0xec>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000cd0:	f001 f83a 	bl	8001d48 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cda:	f7ff ff6f 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_ADC_MspInit+0xe8>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	200000d8 	.word	0x200000d8
 8000d04:	40026410 	.word	0x40026410

08000d08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_CRC_MspInit+0x3c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10d      	bne.n	8000d36 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_CRC_MspInit+0x40>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_CRC_MspInit+0x40>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_CRC_MspInit+0x40>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023000 	.word	0x40023000
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <HAL_I2C_MspInit+0x168>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d14c      	bne.n	8000e08 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a49      	ldr	r2, [pc, #292]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = temp_scl_Pin;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dac:	2312      	movs	r3, #18
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_scl_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	483e      	ldr	r0, [pc, #248]	; (8000ebc <HAL_I2C_MspInit+0x170>)
 8000dc4:	f001 facc 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = temp_sda_Pin;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dce:	2312      	movs	r3, #18
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_sda_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4836      	ldr	r0, [pc, #216]	; (8000ec0 <HAL_I2C_MspInit+0x174>)
 8000de6:	f001 fabb 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e06:	e050      	b.n	8000eaa <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <HAL_I2C_MspInit+0x178>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d14b      	bne.n	8000eaa <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = oxi_sda_Pin;
 8000e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_sda_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <HAL_I2C_MspInit+0x174>)
 8000e68:	f001 fa7a 	bl	8002360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = oxi_scl_Pin;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_scl_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <HAL_I2C_MspInit+0x17c>)
 8000e8a:	f001 fa69 	bl	8002360 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_I2C_MspInit+0x16c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40005c00 	.word	0x40005c00
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <HAL_SPI_MspInit+0xf0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d161      	bne.n	8000fb2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <HAL_SPI_MspInit+0xf4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8000f26:	23e0      	movs	r3, #224	; 0xe0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f36:	2305      	movs	r3, #5
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <HAL_SPI_MspInit+0xf8>)
 8000f42:	f001 fa0d 	bl	8002360 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f48:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_SPI_MspInit+0x100>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f88:	f000 fede 	bl	8001d48 <HAL_DMA_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000f92:	f7ff fe13 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f9a:	649a      	str	r2, [r3, #72]	; 0x48
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_SPI_MspInit+0xfc>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2023      	movs	r0, #35	; 0x23
 8000fa8:	f000 fe88 	bl	8001cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fac:	2023      	movs	r0, #35	; 0x23
 8000fae:	f000 fea1 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40013000 	.word	0x40013000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	20000240 	.word	0x20000240
 8000fcc:	40026458 	.word	0x40026458

08000fd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_TIM_PWM_MspInit+0x3c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10d      	bne.n	8000ffe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_PWM_MspInit+0x40>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_TIM_PWM_MspInit+0x40>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_TIM_PWM_MspInit+0x40>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_TIM_MspPostInit+0x68>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d11d      	bne.n	8001072 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_TIM_MspPostInit+0x6c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DISPL_LED_Pin;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_TIM_MspPostInit+0x70>)
 800106e:	f001 f977 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40000400 	.word	0x40000400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_UART_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12c      	bne.n	8001104 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = usart_emg_rx_Pin|usart_emg_tx_Pin;
 80010e2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f4:	2307      	movs	r3, #7
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_UART_MspInit+0x8c>)
 8001100:	f001 f92e 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40004800 	.word	0x40004800
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800

08001118 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0a0      	sub	sp, #128	; 0x80
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	225c      	movs	r2, #92	; 0x5c
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f005 ff14 	bl	8006f66 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001146:	d141      	bne.n	80011cc <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800114e:	2300      	movs	r3, #0
 8001150:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fe88 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff fd2b 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001182:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001186:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001194:	230a      	movs	r3, #10
 8001196:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_PCD_MspInit+0xc0>)
 80011a0:	f001 f8de 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 80011aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ae:	6353      	str	r3, [r2, #52]	; 0x34
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_PCD_MspInit+0xbc>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3780      	adds	r7, #128	; 0x80
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <HAL_InitTick+0xd4>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <HAL_InitTick+0xd4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6453      	str	r3, [r2, #68]	; 0x44
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_InitTick+0xd4>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fdf8 	bl	8002e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001218:	f001 fde2 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 800121c:	4603      	mov	r3, r0
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_InitTick+0xd8>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3b01      	subs	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_InitTick+0xdc>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_InitTick+0xe0>)
 8001234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_InitTick+0xdc>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_InitTick+0xdc>)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xdc>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_InitTick+0xdc>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xdc>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_InitTick+0xdc>)
 8001258:	f002 ff0c 	bl	8004074 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11b      	bne.n	80012a2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_InitTick+0xdc>)
 800126c:	f002 ff5c 	bl	8004128 <HAL_TIM_Base_Start_IT>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800127e:	2019      	movs	r0, #25
 8001280:	f000 fd38 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d808      	bhi.n	800129c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	2019      	movs	r0, #25
 8001290:	f000 fd14 	bl	8001cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0xe4>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e002      	b.n	80012a2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	20000838 	.word	0x20000838
 80012bc:	40010000 	.word	0x40010000
 80012c0:	20000008 	.word	0x20000008

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001322:	f002 ffc0 	bl	80042a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000838 	.word	0x20000838

08001330 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <SPI1_IRQHandler+0x10>)
 8001336:	f002 fd95 	bl	8003e64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001e8 	.word	0x200001e8

08001344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA2_Stream0_IRQHandler+0x10>)
 800134a:	f000 fdcd 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000d8 	.word	0x200000d8

08001358 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA2_Stream3_IRQHandler+0x10>)
 800135e:	f000 fdc3 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000240 	.word	0x20000240

0800136c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_kill>:

int _kill(int pid, int sig)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001386:	f005 fe91 	bl	80070ac <__errno>
 800138a:	4603      	mov	r3, r0
 800138c:	2216      	movs	r2, #22
 800138e:	601a      	str	r2, [r3, #0]
  return -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_exit>:

void _exit (int status)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ffe7 	bl	800137c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ae:	e7fe      	b.n	80013ae <_exit+0x12>

080013b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e009      	b.n	8001410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf1      	blt.n	80013fc <_write+0x12>
  }
  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_close>:

int _close(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144a:	605a      	str	r2, [r3, #4]
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_isatty>:

int _isatty(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f005 fdf6 	bl	80070ac <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000880 	.word	0x20000880
 80014f4:	20000bb0 	.word	0x20000bb0

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <HAL_SPI_ErrorCallback>:
}




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_SPI_ErrorCallback+0x24>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d102      	bne.n	8001534 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_SPI_ErrorCallback+0x28>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
	}
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40003800 	.word	0x40003800
 8001544:	20000004 	.word	0x20000004

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001572:	f7ff ffc1 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f005 fd9f 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff f817 	bl	80005ac <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800158c:	0800923c 	.word	0x0800923c
  ldr r2, =_sbss
 8001590:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001594:	20000bac 	.word	0x20000bac

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 fb6e 	bl	8001ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff fe06 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fafa 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000884 	.word	0x20000884

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000884 	.word	0x20000884

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fac6 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f94a 	bl	8001954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e113      	b.n	8001934 <HAL_ADC_ConfigChannel+0x244>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d925      	bls.n	8001768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1e      	subs	r3, #30
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	4603      	mov	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4403      	add	r3, r0
 800175a:	3b1e      	subs	r3, #30
 800175c:	409a      	lsls	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e022      	b.n	80017ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	2207      	movs	r2, #7
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4403      	add	r3, r0
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d824      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b05      	subs	r3, #5
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	400a      	ands	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	e04c      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d824      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b23      	subs	r3, #35	; 0x23
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	; 0x23
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	e023      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b41      	subs	r3, #65	; 0x41
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_ADC_ConfigChannel+0x250>)
 800189c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_ADC_ConfigChannel+0x254>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d10f      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d8>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d10b      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_ADC_ConfigChannel+0x254>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12b      	bne.n	800192a <HAL_ADC_ConfigChannel+0x23a>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_ADC_ConfigChannel+0x258>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d003      	beq.n	80018e4 <HAL_ADC_ConfigChannel+0x1f4>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d122      	bne.n	800192a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_ADC_ConfigChannel+0x258>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d111      	bne.n	800192a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_ADC_ConfigChannel+0x25c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_ADC_ConfigChannel+0x260>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9a      	lsrs	r2, r3, #18
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800191c:	e002      	b.n	8001924 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3b01      	subs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	40012000 	.word	0x40012000
 8001948:	10000012 	.word	0x10000012
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83

08001954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <ADC_Init+0x1f0>)
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	021a      	lsls	r2, r3, #8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6899      	ldr	r1, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <ADC_Init+0x1f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e00f      	b.n	8001a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0202 	bic.w	r2, r2, #2
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7e1b      	ldrb	r3, [r3, #24]
 8001a6c:	005a      	lsls	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	035a      	lsls	r2, r3, #13
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	e007      	b.n	8001ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	051a      	lsls	r2, r3, #20
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b0a:	025a      	lsls	r2, r3, #9
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	029a      	lsls	r2, r3, #10
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40012300 	.word	0x40012300
 8001b48:	0f000001 	.word	0x0f000001

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff4c 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cce:	f7ff ff61 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff ffb1 	bl	8001c40 <NVIC_EncodePriority>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff80 	bl	8001bec <__NVIC_SetPriority>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff54 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	795b      	ldrb	r3, [r3, #5]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe ffe8 	bl	8000d08 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fc58 	bl	8001608 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e099      	b.n	8001e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	e00f      	b.n	8001da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d86:	f7ff fc3f 	bl	8001608 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d908      	bls.n	8001da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e078      	b.n	8001e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e8      	bne.n	8001d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_DMA_Init+0x158>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d107      	bne.n	8001e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d117      	bne.n	8001e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fa0b 	bl	8002268 <DMA_CheckFifoParam>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e66:	2301      	movs	r3, #1
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f9c2 	bl	80021fc <DMA_CalcBaseAndBitshift>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	f010803f 	.word	0xf010803f

08001ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00c      	b.n	8001edc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_DMA_IRQHandler+0x248>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8e      	ldr	r2, [pc, #568]	; (8002134 <HAL_DMA_IRQHandler+0x24c>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d043      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d024      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e01f      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e016      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2220      	movs	r2, #32
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808f 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8087 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2220      	movs	r2, #32
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d136      	bne.n	8002100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x1da>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07e      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
        }
        return;
 80020fe:	e079      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e02c      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e01e      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d032      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d307      	bcc.n	80021d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f2      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x2cc>
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f4:	bf00      	nop
    }
  }
}
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3b10      	subs	r3, #16
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <DMA_CalcBaseAndBitshift+0x64>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <DMA_CalcBaseAndBitshift+0x68>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d909      	bls.n	800223e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	1d1a      	adds	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58
 800223c:	e007      	b.n	800224e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	aaaaaaab 	.word	0xaaaaaaab
 8002264:	08007e64 	.word	0x08007e64

08002268 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11f      	bne.n	80022c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d856      	bhi.n	8002336 <DMA_CheckFifoParam+0xce>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <DMA_CheckFifoParam+0x28>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022b3 	.word	0x080022b3
 8002298:	080022a1 	.word	0x080022a1
 800229c:	08002337 	.word	0x08002337
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d046      	beq.n	800233a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b0:	e043      	b.n	800233a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ba:	d140      	bne.n	800233e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e03d      	b.n	800233e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ca:	d121      	bne.n	8002310 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d837      	bhi.n	8002342 <DMA_CheckFifoParam+0xda>
 80022d2:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x70>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022ef 	.word	0x080022ef
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	08002301 	.word	0x08002301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e030      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d025      	beq.n	8002346 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fe:	e022      	b.n	8002346 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800230e:	e01c      	b.n	800234a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d903      	bls.n	800231e <DMA_CheckFifoParam+0xb6>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d003      	beq.n	8002324 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800231c:	e018      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      break;
 8002322:	e015      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e00b      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 8002336:	bf00      	nop
 8002338:	e00a      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800233a:	bf00      	nop
 800233c:	e008      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e006      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e004      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e002      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;   
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
    }
  } 
  
  return status; 
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e165      	b.n	8002648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8154 	bne.w	8002642 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d005      	beq.n	80023b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b03      	cmp	r3, #3
 800241e:	d017      	beq.n	8002450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ae 	beq.w	8002642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_GPIO_Init+0x300>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a5c      	ldr	r2, [pc, #368]	; (8002660 <HAL_GPIO_Init+0x300>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_GPIO_Init+0x300>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002502:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x304>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x308>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_GPIO_Init+0x30c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_GPIO_Init+0x310>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_GPIO_Init+0x314>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_GPIO_Init+0x318>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x20a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4a      	ldr	r2, [pc, #296]	; (800267c <HAL_GPIO_Init+0x31c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x206>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a49      	ldr	r2, [pc, #292]	; (8002680 <HAL_GPIO_Init+0x320>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x202>
 800255e:	2306      	movs	r3, #6
 8002560:	e00c      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002562:	2307      	movs	r3, #7
 8002564:	e00a      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002566:	2305      	movs	r3, #5
 8002568:	e008      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800256a:	2304      	movs	r3, #4
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800257a:	2300      	movs	r3, #0
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f002 0203 	and.w	r2, r2, #3
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4093      	lsls	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258c:	4935      	ldr	r1, [pc, #212]	; (8002664 <HAL_GPIO_Init+0x304>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_GPIO_Init+0x324>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025be:	4a31      	ldr	r2, [pc, #196]	; (8002684 <HAL_GPIO_Init+0x324>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_GPIO_Init+0x324>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_GPIO_Init+0x324>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_GPIO_Init+0x324>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_GPIO_Init+0x324>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_GPIO_Init+0x324>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_GPIO_Init+0x324>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	f67f ae96 	bls.w	800237c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40013800 	.word	0x40013800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40021400 	.word	0x40021400
 8002680:	40021800 	.word	0x40021800
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e12b      	b.n	8002926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fb32 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002720:	f000 fb4a 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a81      	ldr	r2, [pc, #516]	; (8002930 <HAL_I2C_Init+0x274>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d807      	bhi.n	8002740 <HAL_I2C_Init+0x84>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a80      	ldr	r2, [pc, #512]	; (8002934 <HAL_I2C_Init+0x278>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e006      	b.n	800274e <HAL_I2C_Init+0x92>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a7d      	ldr	r2, [pc, #500]	; (8002938 <HAL_I2C_Init+0x27c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0e7      	b.n	8002926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a78      	ldr	r2, [pc, #480]	; (800293c <HAL_I2C_Init+0x280>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0c9b      	lsrs	r3, r3, #18
 8002760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a6a      	ldr	r2, [pc, #424]	; (8002930 <HAL_I2C_Init+0x274>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d802      	bhi.n	8002790 <HAL_I2C_Init+0xd4>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3301      	adds	r3, #1
 800278e:	e009      	b.n	80027a4 <HAL_I2C_Init+0xe8>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_I2C_Init+0x284>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	3301      	adds	r3, #1
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	495c      	ldr	r1, [pc, #368]	; (8002930 <HAL_I2C_Init+0x274>)
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d819      	bhi.n	80027f8 <HAL_I2C_Init+0x13c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e59      	subs	r1, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d8:	400b      	ands	r3, r1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_I2C_Init+0x138>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e59      	subs	r1, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f2:	e051      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e04f      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d111      	bne.n	8002824 <HAL_I2C_Init+0x168>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e58      	subs	r0, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e012      	b.n	800284a <HAL_I2C_Init+0x18e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	0099      	lsls	r1, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x196>
 800284e:	2301      	movs	r3, #1
 8002850:	e022      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10e      	bne.n	8002878 <HAL_I2C_Init+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1e58      	subs	r0, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	440b      	add	r3, r1
 8002868:	fbb0 f3f3 	udiv	r3, r0, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002876:	e00f      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e58      	subs	r0, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	0099      	lsls	r1, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	6809      	ldr	r1, [r1, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6911      	ldr	r1, [r2, #16]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	000186a0 	.word	0x000186a0
 8002934:	001e847f 	.word	0x001e847f
 8002938:	003d08ff 	.word	0x003d08ff
 800293c:	431bde83 	.word	0x431bde83
 8002940:	10624dd3 	.word	0x10624dd3

08002944 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b08f      	sub	sp, #60	; 0x3c
 8002948:	af0a      	add	r7, sp, #40	; 0x28
 800294a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e116      	b.n	8002b84 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fe fbd1 	bl	8001118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2203      	movs	r2, #3
 800297a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fc7c 	bl	8005292 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	687e      	ldr	r6, [r7, #4]
 80029a2:	466d      	mov	r5, sp
 80029a4:	f106 0410 	add.w	r4, r6, #16
 80029a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b8:	1d33      	adds	r3, r6, #4
 80029ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	f002 fc07 	bl	80051d0 <USB_CoreInit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d7      	b.n	8002b84 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fc6a 	bl	80052b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	e04a      	b.n	8002a7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	333d      	adds	r3, #61	; 0x3d
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	333c      	adds	r3, #60	; 0x3c
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	b298      	uxth	r0, r3
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	; 0x44
 8002a22:	4602      	mov	r2, r0
 8002a24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3340      	adds	r3, #64	; 0x40
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3348      	adds	r3, #72	; 0x48
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	334c      	adds	r3, #76	; 0x4c
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3354      	adds	r3, #84	; 0x54
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3af      	bcc.n	80029e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e044      	b.n	8002b16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	3301      	adds	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3b5      	bcc.n	8002a8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	687e      	ldr	r6, [r7, #4]
 8002b28:	466d      	mov	r5, sp
 8002b2a:	f106 0410 	add.w	r4, r6, #16
 8002b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b3e:	1d33      	adds	r3, r6, #4
 8002b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b42:	6838      	ldr	r0, [r7, #0]
 8002b44:	f002 fc02 	bl	800534c <USB_DevInit>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e014      	b.n	8002b84 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f80a 	bl	8002b8c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 fdc0 	bl	8005702 <USB_DevDisconnect>

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	f043 0303 	orr.w	r3, r3, #3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fca0 	bl	8001608 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fc9c 	bl	8001608 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 fbb1 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fa2e 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08007e4c 	.word	0x08007e4c
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08007e5c 	.word	0x08007e5c

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffdc 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08007e5c 	.word	0x08007e5c

08002e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	220f      	movs	r2, #15
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_RCC_GetClockConfig+0x60>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eaa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	496c      	ldr	r1, [pc, #432]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ed2:	4b64      	ldr	r3, [pc, #400]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	4960      	ldr	r1, [pc, #384]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d017      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f00:	4b58      	ldr	r3, [pc, #352]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4955      	ldr	r1, [pc, #340]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f20:	2301      	movs	r3, #1
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d017      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f3c:	4b49      	ldr	r3, [pc, #292]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	4946      	ldr	r1, [pc, #280]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 808a 	beq.w	800308e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b39      	ldr	r3, [pc, #228]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a33      	ldr	r2, [pc, #204]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa2:	f7fe fb31 	bl	8001608 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe fb2d 	bl	8001608 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e278      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02f      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	6a3a      	ldr	r2, [r7, #32]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d028      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d114      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fafb 	bl	8001608 <HAL_GetTick>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe faf7 	bl	8001608 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e240      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ee      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003044:	d114      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305a:	4902      	ldr	r1, [pc, #8]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
 8003060:	e00c      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
 800306c:	42470e40 	.word	0x42470e40
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a49      	ldr	r2, [pc, #292]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003076:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800307e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	4944      	ldr	r1, [pc, #272]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308a:	4313      	orrs	r3, r2
 800308c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80030a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4937      	ldr	r1, [pc, #220]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030d2:	4b32      	ldr	r3, [pc, #200]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e0:	492e      	ldr	r1, [pc, #184]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d011      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	4926      	ldr	r1, [pc, #152]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003112:	d101      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003114:	2301      	movs	r3, #1
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	491a      	ldr	r1, [pc, #104]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d011      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	4911      	ldr	r1, [pc, #68]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003166:	2301      	movs	r3, #1
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d005      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	f040 80ff 	bne.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003182:	f7fe fa41 	bl	8001608 <HAL_GetTick>
 8003186:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003188:	e00e      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800318a:	f7fe fa3d 	bl	8001608 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d907      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e188      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800319c:	40023800 	.word	0x40023800
 80031a0:	424711e0 	.word	0x424711e0
 80031a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a8:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ea      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d028      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d124      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031dc:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	3301      	adds	r3, #1
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ee:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	431a      	orrs	r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	4961      	ldr	r1, [pc, #388]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003244:	2b00      	cmp	r3, #0
 8003246:	d035      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d130      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3301      	adds	r3, #1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003264:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	0f1b      	lsrs	r3, r3, #28
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	019b      	lsls	r3, r3, #6
 800327c:	431a      	orrs	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	431a      	orrs	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	071b      	lsls	r3, r3, #28
 8003294:	4943      	ldr	r1, [pc, #268]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	f023 021f 	bic.w	r2, r3, #31
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	493d      	ldr	r1, [pc, #244]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d124      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	019b      	lsls	r3, r3, #6
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	4925      	ldr	r1, [pc, #148]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d016      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	071b      	lsls	r3, r3, #28
 8003346:	4917      	ldr	r1, [pc, #92]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe f958 	bl	8001608 <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800335c:	f7fe f954 	bl	8001608 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e09f      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 8095 	bne.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003388:	f7fe f93e 	bl	8001608 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800338e:	e00f      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003390:	f7fe f93a 	bl	8001608 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d908      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e085      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470068 	.word	0x42470068
 80033ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033b0:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033bc:	d0e8      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02b      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d127      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	431a      	orrs	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	4928      	ldr	r1, [pc, #160]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800341e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003422:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	3b01      	subs	r3, #1
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4922      	ldr	r1, [pc, #136]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344a:	d118      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	0e1b      	lsrs	r3, r3, #24
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	019b      	lsls	r3, r3, #6
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	3b01      	subs	r3, #1
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	4910      	ldr	r1, [pc, #64]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003484:	f7fe f8c0 	bl	8001608 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800348c:	f7fe f8bc 	bl	8001608 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e007      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034aa:	d1ef      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3730      	adds	r7, #48	; 0x30
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	42470070 	.word	0x42470070

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0a6      	sub	sp, #152	; 0x98
 80034c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e6:	4bc8      	ldr	r3, [pc, #800]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	f200 817e 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x330>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003531 	.word	0x08003531
 8003500:	080037f1 	.word	0x080037f1
 8003504:	080037f1 	.word	0x080037f1
 8003508:	080037f1 	.word	0x080037f1
 800350c:	08003539 	.word	0x08003539
 8003510:	080037f1 	.word	0x080037f1
 8003514:	080037f1 	.word	0x080037f1
 8003518:	080037f1 	.word	0x080037f1
 800351c:	08003541 	.word	0x08003541
 8003520:	080037f1 	.word	0x080037f1
 8003524:	080037f1 	.word	0x080037f1
 8003528:	080037f1 	.word	0x080037f1
 800352c:	080036ab 	.word	0x080036ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4bb6      	ldr	r3, [pc, #728]	; (800380c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003536:	e15f      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003538:	4bb5      	ldr	r3, [pc, #724]	; (8003810 <HAL_RCC_GetSysClockFreq+0x350>)
 800353a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800353e:	e15b      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4bb1      	ldr	r3, [pc, #708]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354c:	4bae      	ldr	r3, [pc, #696]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d031      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003558:	4bab      	ldr	r3, [pc, #684]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	2200      	movs	r2, #0
 8003560:	66bb      	str	r3, [r7, #104]	; 0x68
 8003562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	663b      	str	r3, [r7, #96]	; 0x60
 800356c:	2300      	movs	r3, #0
 800356e:	667b      	str	r3, [r7, #100]	; 0x64
 8003570:	4ba7      	ldr	r3, [pc, #668]	; (8003810 <HAL_RCC_GetSysClockFreq+0x350>)
 8003572:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003576:	462a      	mov	r2, r5
 8003578:	fb03 f202 	mul.w	r2, r3, r2
 800357c:	2300      	movs	r3, #0
 800357e:	4621      	mov	r1, r4
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	4aa2      	ldr	r2, [pc, #648]	; (8003810 <HAL_RCC_GetSysClockFreq+0x350>)
 8003588:	4621      	mov	r1, r4
 800358a:	fba1 1202 	umull	r1, r2, r1, r2
 800358e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003590:	460a      	mov	r2, r1
 8003592:	67ba      	str	r2, [r7, #120]	; 0x78
 8003594:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003596:	4413      	add	r3, r2
 8003598:	67fb      	str	r3, [r7, #124]	; 0x7c
 800359a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359e:	2200      	movs	r2, #0
 80035a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80035ac:	f7fc fe80 	bl	80002b0 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035ba:	e064      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4b92      	ldr	r3, [pc, #584]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	2200      	movs	r2, #0
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
 80035c6:	657a      	str	r2, [r7, #84]	; 0x54
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d0:	2300      	movs	r3, #0
 80035d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80035d8:	4622      	mov	r2, r4
 80035da:	462b      	mov	r3, r5
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	0159      	lsls	r1, r3, #5
 80035e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ea:	0150      	lsls	r0, r2, #5
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4621      	mov	r1, r4
 80035f2:	1a51      	subs	r1, r2, r1
 80035f4:	6139      	str	r1, [r7, #16]
 80035f6:	4629      	mov	r1, r5
 80035f8:	eb63 0301 	sbc.w	r3, r3, r1
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800360a:	4659      	mov	r1, fp
 800360c:	018b      	lsls	r3, r1, #6
 800360e:	4651      	mov	r1, sl
 8003610:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003614:	4651      	mov	r1, sl
 8003616:	018a      	lsls	r2, r1, #6
 8003618:	4651      	mov	r1, sl
 800361a:	ebb2 0801 	subs.w	r8, r2, r1
 800361e:	4659      	mov	r1, fp
 8003620:	eb63 0901 	sbc.w	r9, r3, r1
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003630:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003634:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003638:	4690      	mov	r8, r2
 800363a:	4699      	mov	r9, r3
 800363c:	4623      	mov	r3, r4
 800363e:	eb18 0303 	adds.w	r3, r8, r3
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	462b      	mov	r3, r5
 8003646:	eb49 0303 	adc.w	r3, r9, r3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003658:	4629      	mov	r1, r5
 800365a:	028b      	lsls	r3, r1, #10
 800365c:	4621      	mov	r1, r4
 800365e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003662:	4621      	mov	r1, r4
 8003664:	028a      	lsls	r2, r1, #10
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366e:	2200      	movs	r2, #0
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	647a      	str	r2, [r7, #68]	; 0x44
 8003674:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003678:	f7fc fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	3301      	adds	r3, #1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003698:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800369c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036a8:	e0a6      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02a      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b51      	ldr	r3, [pc, #324]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	2200      	movs	r2, #0
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80036cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d4:	2100      	movs	r1, #0
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_GetSysClockFreq+0x350>)
 80036d8:	fb03 f201 	mul.w	r2, r3, r1
 80036dc:	2300      	movs	r3, #0
 80036de:	fb00 f303 	mul.w	r3, r0, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <HAL_RCC_GetSysClockFreq+0x350>)
 80036e6:	fba0 1202 	umull	r1, r2, r0, r2
 80036ea:	677a      	str	r2, [r7, #116]	; 0x74
 80036ec:	460a      	mov	r2, r1
 80036ee:	673a      	str	r2, [r7, #112]	; 0x70
 80036f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036f2:	4413      	add	r3, r2
 80036f4:	677b      	str	r3, [r7, #116]	; 0x74
 80036f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036fa:	2200      	movs	r2, #0
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
 80036fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003700:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003704:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003708:	f7fc fdd2 	bl	80002b0 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003716:	e05b      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
 8003722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
 8003730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0159      	lsls	r1, r3, #5
 8003742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003746:	0150      	lsls	r0, r2, #5
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4641      	mov	r1, r8
 800374e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003752:	4649      	mov	r1, r9
 8003754:	eb63 0b01 	sbc.w	fp, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800376c:	ebb2 040a 	subs.w	r4, r2, sl
 8003770:	eb63 050b 	sbc.w	r5, r3, fp
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	00eb      	lsls	r3, r5, #3
 800377e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003782:	00e2      	lsls	r2, r4, #3
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	4643      	mov	r3, r8
 800378a:	18e3      	adds	r3, r4, r3
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	464b      	mov	r3, r9
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b8:	2200      	movs	r2, #0
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	61fa      	str	r2, [r7, #28]
 80037be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c2:	f7fc fd75 	bl	80002b0 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4613      	mov	r3, r2
 80037cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <HAL_RCC_GetSysClockFreq+0x348>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0f1b      	lsrs	r3, r3, #28
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80037de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037ee:	e003      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_GetSysClockFreq+0x34c>)
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3798      	adds	r7, #152	; 0x98
 8003800:	46bd      	mov	sp, r7
 8003802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	00f42400 	.word	0x00f42400
 8003810:	017d7840 	.word	0x017d7840

08003814 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e28d      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8083 	beq.w	800393a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003834:	4b94      	ldr	r3, [pc, #592]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d019      	beq.n	8003874 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003848:	2b08      	cmp	r3, #8
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800384c:	4b8e      	ldr	r3, [pc, #568]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003858:	d00c      	beq.n	8003874 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b8b      	ldr	r3, [pc, #556]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d112      	bne.n	800388c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x124>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d157      	bne.n	8003938 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e25a      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x90>
 8003896:	4b7c      	ldr	r3, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7b      	ldr	r2, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xcc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0xb4>
 80038ae:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a72      	ldr	r2, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xcc>
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6b      	ldr	r2, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fe8e 	bl	8001608 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd fe8a 	bl	8001608 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e21f      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xdc>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fe7a 	bl	8001608 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd fe76 	bl	8001608 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e20b      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x104>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d06f      	beq.n	8003a26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003946:	4b50      	ldr	r3, [pc, #320]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003952:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d105      	bne.n	800396a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x186>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1d3      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4937      	ldr	r1, [pc, #220]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fe23 	bl	8001608 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd fe1f 	bl	8001608 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1b4      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4925      	ldr	r1, [pc, #148]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fe02 	bl	8001608 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fd fdfe 	bl	8001608 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e193      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fde2 	bl	8001608 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd fdde 	bl	8001608 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e173      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x234>
 8003a66:	e01b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x27c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fdcb 	bl	8001608 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e00e      	b.n	8003a94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fdc7 	bl	8001608 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d907      	bls.n	8003a94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e15c      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	42470000 	.word	0x42470000
 8003a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b8a      	ldr	r3, [pc, #552]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ea      	bne.n	8003a76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8097 	beq.w	8003bdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b83      	ldr	r3, [pc, #524]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a7e      	ldr	r2, [pc, #504]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b79      	ldr	r3, [pc, #484]	; (8003cc4 <HAL_RCC_OscConfig+0x4b0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x4b0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a75      	ldr	r2, [pc, #468]	; (8003cc4 <HAL_RCC_OscConfig+0x4b0>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fd fd87 	bl	8001608 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fd fd83 	bl	8001608 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e118      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x4b0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x31e>
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a65      	ldr	r2, [pc, #404]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x358>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x340>
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	4a60      	ldr	r2, [pc, #384]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6713      	str	r3, [r2, #112]	; 0x70
 8003b46:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x358>
 8003b54:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a59      	ldr	r2, [pc, #356]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd fd48 	bl	8001608 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fd44 	bl	8001608 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0d7      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCC_OscConfig+0x368>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fd fd32 	bl	8001608 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fd2e 	bl	8001608 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0c1      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbe:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ee      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	4a3a      	ldr	r2, [pc, #232]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80ad 	beq.w	8003d40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d060      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d145      	bne.n	8003c86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_OscConfig+0x4b4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fd02 	bl	8001608 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fcfe 	bl	8001608 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e093      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	491b      	ldr	r1, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4b4>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fcd3 	bl	8001608 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fccf 	bl	8001608 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e064      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x452>
 8003c84:	e05c      	b.n	8003d40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_OscConfig+0x4b4>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fcbc 	bl	8001608 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd fcb8 	bl	8001608 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04d      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x480>
 8003cb2:	e045      	b.n	8003d40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e040      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <HAL_RCC_OscConfig+0x538>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d030      	beq.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d129      	bne.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d122      	bne.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d119      	bne.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d10f      	bne.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800

08003d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07b      	b.n	8003e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d009      	beq.n	8003d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
 8003d7a:	e005      	b.n	8003d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd f892 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0104 	and.w	r1, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0210 	and.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10e      	bne.n	8003ea4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
    return;
 8003ea2:	e0ce      	b.n	8004042 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_SPI_IRQHandler+0x5e>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
    return;
 8003ec0:	e0bf      	b.n	8004042 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_SPI_IRQHandler+0x7e>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80b0 	beq.w	8004042 <HAL_SPI_IRQHandler+0x1de>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80aa 	beq.w	8004042 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d023      	beq.n	8003f40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d011      	beq.n	8003f28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	e00b      	b.n	8003f40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
        return;
 8003f3e:	e080      	b.n	8004042 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00c      	beq.n	8003f98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f043 0208 	orr.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d04f      	beq.n	8004040 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_SPI_IRQHandler+0x168>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d034      	beq.n	8004036 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0203 	bic.w	r2, r2, #3
 8003fda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d011      	beq.n	8004008 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <HAL_SPI_IRQHandler+0x1e4>)
 8003fea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd ff57 	bl	8001ea4 <HAL_DMA_Abort_IT>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	2b00      	cmp	r3, #0
 800400e:	d016      	beq.n	800403e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <HAL_SPI_IRQHandler+0x1e4>)
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401c:	4618      	mov	r0, r3
 800401e:	f7fd ff41 	bl	8001ea4 <HAL_DMA_Abort_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004034:	e003      	b.n	800403e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fa70 	bl	800151c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800403c:	e000      	b.n	8004040 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800403e:	bf00      	nop
    return;
 8004040:	bf00      	nop
  }
}
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0800404d 	.word	0x0800404d

0800404c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7fd fa58 	bl	800151c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f839 	bl	8004112 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 faea 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04e      	b.n	80041de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a23      	ldr	r2, [pc, #140]	; (80041ec <HAL_TIM_Base_Start_IT+0xc4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d01d      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_TIM_Base_Start_IT+0xd8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x80>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_TIM_Base_Start_IT+0xdc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d111      	bne.n	80041cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d010      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ca:	e007      	b.n	80041dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40010400 	.word	0x40010400
 8004200:	40014000 	.word	0x40014000
 8004204:	40001800 	.word	0x40001800

08004208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e041      	b.n	800429e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fece 	bl	8000fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 fa20 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d122      	bne.n	8004302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d11b      	bne.n	8004302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0202 	mvn.w	r2, #2
 80042d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9b1 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 80042ee:	e005      	b.n	80042fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9a3 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9b4 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d122      	bne.n	8004356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d11b      	bne.n	8004356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0204 	mvn.w	r2, #4
 8004326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f987 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004342:	e005      	b.n	8004350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f979 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f98a 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d122      	bne.n	80043aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11b      	bne.n	80043aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f06f 0208 	mvn.w	r2, #8
 800437a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2204      	movs	r2, #4
 8004380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f95d 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004396:	e005      	b.n	80043a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f94f 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f960 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d122      	bne.n	80043fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d11b      	bne.n	80043fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0210 	mvn.w	r2, #16
 80043ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2208      	movs	r2, #8
 80043d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f933 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 80043ea:	e005      	b.n	80043f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f925 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f936 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10e      	bne.n	800442a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f06f 0201 	mvn.w	r2, #1
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fc fbb7 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d10e      	bne.n	8004456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d107      	bne.n	8004456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800444e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fbf1 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d107      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800447a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8fb 	bl	8004678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d10e      	bne.n	80044ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0220 	mvn.w	r2, #32
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fbbb 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0ae      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	f200 809f 	bhi.w	8004624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044e6:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004625 	.word	0x08004625
 80044f4:	08004625 	.word	0x08004625
 80044f8:	08004625 	.word	0x08004625
 80044fc:	08004561 	.word	0x08004561
 8004500:	08004625 	.word	0x08004625
 8004504:	08004625 	.word	0x08004625
 8004508:	08004625 	.word	0x08004625
 800450c:	080045a3 	.word	0x080045a3
 8004510:	08004625 	.word	0x08004625
 8004514:	08004625 	.word	0x08004625
 8004518:	08004625 	.word	0x08004625
 800451c:	080045e3 	.word	0x080045e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f950 	bl	80047cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	619a      	str	r2, [r3, #24]
      break;
 800455e:	e064      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f9a0 	bl	80048ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	619a      	str	r2, [r3, #24]
      break;
 80045a0:	e043      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f9f5 	bl	8004998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0208 	orr.w	r2, r2, #8
 80045bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0204 	bic.w	r2, r2, #4
 80045cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      break;
 80045e0:	e023      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fa49 	bl	8004a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]
      break;
 8004622:	e002      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a40      	ldr	r2, [pc, #256]	; (80047a0 <TIM_Base_SetConfig+0x114>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d00f      	beq.n	80046cc <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3d      	ldr	r2, [pc, #244]	; (80047a4 <TIM_Base_SetConfig+0x118>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <TIM_Base_SetConfig+0x11c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3b      	ldr	r2, [pc, #236]	; (80047ac <TIM_Base_SetConfig+0x120>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <TIM_Base_SetConfig+0x124>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d108      	bne.n	80046de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <TIM_Base_SetConfig+0x114>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02b      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d027      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <TIM_Base_SetConfig+0x118>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d023      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <TIM_Base_SetConfig+0x11c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <TIM_Base_SetConfig+0x120>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01b      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a29      	ldr	r2, [pc, #164]	; (80047b0 <TIM_Base_SetConfig+0x124>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d017      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <TIM_Base_SetConfig+0x128>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <TIM_Base_SetConfig+0x12c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a26      	ldr	r2, [pc, #152]	; (80047bc <TIM_Base_SetConfig+0x130>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <TIM_Base_SetConfig+0x134>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <TIM_Base_SetConfig+0x138>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <TIM_Base_SetConfig+0x13c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <TIM_Base_SetConfig+0x114>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0xf8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <TIM_Base_SetConfig+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40010400 	.word	0x40010400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	40001800 	.word	0x40001800
 80047c4:	40001c00 	.word	0x40001c00
 80047c8:	40002000 	.word	0x40002000

080047cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 0302 	bic.w	r3, r3, #2
 8004814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <TIM_OC1_SetConfig+0xd8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_OC1_SetConfig+0x64>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <TIM_OC1_SetConfig+0xdc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10c      	bne.n	800484a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0308 	bic.w	r3, r3, #8
 8004836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <TIM_OC1_SetConfig+0xd8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_OC1_SetConfig+0x8e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <TIM_OC1_SetConfig+0xdc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40010400 	.word	0x40010400

080048ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0210 	bic.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a22      	ldr	r2, [pc, #136]	; (8004990 <TIM_OC2_SetConfig+0xe4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC2_SetConfig+0x68>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <TIM_OC2_SetConfig+0xe8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10d      	bne.n	8004930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <TIM_OC2_SetConfig+0xe4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC2_SetConfig+0x94>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <TIM_OC2_SetConfig+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d113      	bne.n	8004968 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40010400 	.word	0x40010400

08004998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <TIM_OC3_SetConfig+0xe0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d003      	beq.n	80049fe <TIM_OC3_SetConfig+0x66>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <TIM_OC3_SetConfig+0xe4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10d      	bne.n	8004a1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <TIM_OC3_SetConfig+0xe0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_OC3_SetConfig+0x92>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <TIM_OC3_SetConfig+0xe4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d113      	bne.n	8004a52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010400 	.word	0x40010400

08004a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	031b      	lsls	r3, r3, #12
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <TIM_OC4_SetConfig+0xa4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC4_SetConfig+0x68>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <TIM_OC4_SetConfig+0xa8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d109      	bne.n	8004afc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e05a      	b.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d022      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d01d      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d018      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10c      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40010400 	.word	0x40010400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40001800 	.word	0x40001800

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e03f      	b.n	8004cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fa08 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f829 	bl	8004ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b0c0      	sub	sp, #256	; 0x100
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	ea40 0301 	orr.w	r3, r0, r1
 8004d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d40:	f021 010c 	bic.w	r1, r1, #12
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	6999      	ldr	r1, [r3, #24]
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	ea40 0301 	orr.w	r3, r0, r1
 8004d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b8f      	ldr	r3, [pc, #572]	; (8004fb4 <UART_SetConfig+0x2cc>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d005      	beq.n	8004d88 <UART_SetConfig+0xa0>
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b8d      	ldr	r3, [pc, #564]	; (8004fb8 <UART_SetConfig+0x2d0>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d104      	bne.n	8004d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fe f82a 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d90:	e003      	b.n	8004d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7fe f811 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da4:	f040 810c 	bne.w	8004fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	1891      	adds	r1, r2, r2
 8004dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc2:	415b      	adcs	r3, r3
 8004dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dca:	4621      	mov	r1, r4
 8004dcc:	eb12 0801 	adds.w	r8, r2, r1
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	eb43 0901 	adc.w	r9, r3, r1
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	eb18 0303 	adds.w	r3, r8, r3
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df8:	462b      	mov	r3, r5
 8004dfa:	eb49 0303 	adc.w	r3, r9, r3
 8004dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e16:	460b      	mov	r3, r1
 8004e18:	18db      	adds	r3, r3, r3
 8004e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	eb42 0303 	adc.w	r3, r2, r3
 8004e22:	657b      	str	r3, [r7, #84]	; 0x54
 8004e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e2c:	f7fb fa40 	bl	80002b0 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e60:	4641      	mov	r1, r8
 8004e62:	eb12 0a01 	adds.w	sl, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0b01 	adc.w	fp, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e80:	4692      	mov	sl, r2
 8004e82:	469b      	mov	fp, r3
 8004e84:	4643      	mov	r3, r8
 8004e86:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb4b 0303 	adc.w	r3, fp, r3
 8004e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eac:	460b      	mov	r3, r1
 8004eae:	18db      	adds	r3, r3, r3
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ec2:	f7fb f9f5 	bl	80002b0 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004ece:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2264      	movs	r2, #100	; 0x64
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	1acb      	subs	r3, r1, r3
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ee2:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ef0:	441c      	add	r4, r3
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f7e:	f7fb f997 	bl	80002b0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 0207 	and.w	r2, r3, #7
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb0:	e106      	b.n	80051c0 <UART_SetConfig+0x4d8>
 8004fb2:	bf00      	nop
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	6239      	str	r1, [r7, #32]
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	eb43 0501 	adc.w	r5, r3, r1
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	00eb      	lsls	r3, r5, #3
 8004ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffa:	00e2      	lsls	r2, r4, #3
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	461d      	mov	r5, r3
 8005000:	4643      	mov	r3, r8
 8005002:	18e3      	adds	r3, r4, r3
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005008:	464b      	mov	r3, r9
 800500a:	eb45 0303 	adc.w	r3, r5, r3
 800500e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800501e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800502e:	4629      	mov	r1, r5
 8005030:	008b      	lsls	r3, r1, #2
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005038:	4621      	mov	r1, r4
 800503a:	008a      	lsls	r2, r1, #2
 800503c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005040:	f7fb f936 	bl	80002b0 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4b60      	ldr	r3, [pc, #384]	; (80051cc <UART_SetConfig+0x4e4>)
 800504a:	fba3 2302 	umull	r2, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	011c      	lsls	r4, r3, #4
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	61b9      	str	r1, [r7, #24]
 800506c:	415b      	adcs	r3, r3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005074:	4641      	mov	r1, r8
 8005076:	1851      	adds	r1, r2, r1
 8005078:	6139      	str	r1, [r7, #16]
 800507a:	4649      	mov	r1, r9
 800507c:	414b      	adcs	r3, r1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800508c:	4659      	mov	r1, fp
 800508e:	00cb      	lsls	r3, r1, #3
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005096:	4651      	mov	r1, sl
 8005098:	00ca      	lsls	r2, r1, #3
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	4642      	mov	r2, r8
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050a8:	464b      	mov	r3, r9
 80050aa:	460a      	mov	r2, r1
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80050be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050de:	f7fb f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	4b38      	ldr	r3, [pc, #224]	; (80051cc <UART_SetConfig+0x4e4>)
 80050ea:	fba3 2301 	umull	r2, r3, r3, r1
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2264      	movs	r2, #100	; 0x64
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	1acb      	subs	r3, r1, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a33      	ldr	r2, [pc, #204]	; (80051cc <UART_SetConfig+0x4e4>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005108:	441c      	add	r4, r3
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	673b      	str	r3, [r7, #112]	; 0x70
 8005112:	677a      	str	r2, [r7, #116]	; 0x74
 8005114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005118:	4642      	mov	r2, r8
 800511a:	464b      	mov	r3, r9
 800511c:	1891      	adds	r1, r2, r2
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	415b      	adcs	r3, r3
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005128:	4641      	mov	r1, r8
 800512a:	1851      	adds	r1, r2, r1
 800512c:	6039      	str	r1, [r7, #0]
 800512e:	4649      	mov	r1, r9
 8005130:	414b      	adcs	r3, r1
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005140:	4659      	mov	r1, fp
 8005142:	00cb      	lsls	r3, r1, #3
 8005144:	4651      	mov	r1, sl
 8005146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514a:	4651      	mov	r1, sl
 800514c:	00ca      	lsls	r2, r1, #3
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	4603      	mov	r3, r0
 8005154:	4642      	mov	r2, r8
 8005156:	189b      	adds	r3, r3, r2
 8005158:	66bb      	str	r3, [r7, #104]	; 0x68
 800515a:	464b      	mov	r3, r9
 800515c:	460a      	mov	r2, r1
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	663b      	str	r3, [r7, #96]	; 0x60
 800516e:	667a      	str	r2, [r7, #100]	; 0x64
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800517c:	4649      	mov	r1, r9
 800517e:	008b      	lsls	r3, r1, #2
 8005180:	4641      	mov	r1, r8
 8005182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005186:	4641      	mov	r1, r8
 8005188:	008a      	lsls	r2, r1, #2
 800518a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800518e:	f7fb f88f 	bl	80002b0 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <UART_SetConfig+0x4e4>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	; 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <UART_SetConfig+0x4e4>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4422      	add	r2, r4
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051cc:	51eb851f 	.word	0x51eb851f

080051d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d0:	b084      	sub	sp, #16
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	f107 001c 	add.w	r0, r7, #28
 80051de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d122      	bne.n	800522e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa9c 	bl	8005760 <USB_CoreReset>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e01a      	b.n	8005264 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa90 	bl	8005760 <USB_CoreReset>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
 8005256:	e005      	b.n	8005264 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10b      	bne.n	8005282 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f043 0206 	orr.w	r2, r3, #6
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528e:	b004      	add	sp, #16
 8005290:	4770      	bx	lr

08005292 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d115      	bne.n	8005302 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f7fc f99c 	bl	8001620 <HAL_Delay>
      ms++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa28 	bl	8005744 <USB_GetMode>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d01e      	beq.n	8005338 <USB_SetCurrentMode+0x84>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b31      	cmp	r3, #49	; 0x31
 80052fe:	d9f0      	bls.n	80052e2 <USB_SetCurrentMode+0x2e>
 8005300:	e01a      	b.n	8005338 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d115      	bne.n	8005334 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005314:	2001      	movs	r0, #1
 8005316:	f7fc f983 	bl	8001620 <HAL_Delay>
      ms++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa0f 	bl	8005744 <USB_GetMode>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <USB_SetCurrentMode+0x84>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b31      	cmp	r3, #49	; 0x31
 8005330:	d9f0      	bls.n	8005314 <USB_SetCurrentMode+0x60>
 8005332:	e001      	b.n	8005338 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e005      	b.n	8005344 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b32      	cmp	r3, #50	; 0x32
 800533c:	d101      	bne.n	8005342 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800534c:	b084      	sub	sp, #16
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800535a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e009      	b.n	8005380 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3340      	adds	r3, #64	; 0x40
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	2200      	movs	r2, #0
 8005378:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b0e      	cmp	r3, #14
 8005384:	d9f2      	bls.n	800536c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11c      	bne.n	80053c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e005      	b.n	80053d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	4619      	mov	r1, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	461a      	mov	r2, r3
 80053ee:	680b      	ldr	r3, [r1, #0]
 80053f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10c      	bne.n	8005412 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053fe:	2100      	movs	r1, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f965 	bl	80056d0 <USB_SetDevSpeed>
 8005406:	e008      	b.n	800541a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005408:	2101      	movs	r1, #1
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f960 	bl	80056d0 <USB_SetDevSpeed>
 8005410:	e003      	b.n	800541a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005412:	2103      	movs	r1, #3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f95b 	bl	80056d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800541a:	2110      	movs	r1, #16
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8f3 	bl	8005608 <USB_FlushTxFifo>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f91f 	bl	8005670 <USB_FlushRxFifo>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e043      	b.n	80054ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547c:	d118      	bne.n	80054b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	461a      	mov	r2, r3
 8005492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e013      	b.n	80054c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e008      	b.n	80054c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	461a      	mov	r2, r3
 80054e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3301      	adds	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3b7      	bcc.n	8005466 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	e043      	b.n	8005584 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800550e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005512:	d118      	bne.n	8005546 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e013      	b.n	8005558 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e008      	b.n	8005558 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	461a      	mov	r2, r3
 8005578:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800557c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3301      	adds	r3, #1
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b7      	bcc.n	80054fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800559e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f043 0210 	orr.w	r2, r3, #16
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <USB_DevInit+0x2b8>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f043 0208 	orr.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	f043 0304 	orr.w	r3, r3, #4
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005600:	b004      	add	sp, #16
 8005602:	4770      	bx	lr
 8005604:	803c3800 	.word	0x803c3800

08005608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a13      	ldr	r2, [pc, #76]	; (800566c <USB_FlushTxFifo+0x64>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e01b      	b.n	8005660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	daf2      	bge.n	8005616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	019b      	lsls	r3, r3, #6
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a08      	ldr	r2, [pc, #32]	; (800566c <USB_FlushTxFifo+0x64>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e006      	b.n	8005660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d0f0      	beq.n	8005640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	00030d40 	.word	0x00030d40

08005670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a11      	ldr	r2, [pc, #68]	; (80056cc <USB_FlushRxFifo+0x5c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e018      	b.n	80056c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	daf2      	bge.n	800567c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2210      	movs	r2, #16
 800569e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <USB_FlushRxFifo+0x5c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e006      	b.n	80056c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d0f0      	beq.n	80056a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	00030d40 	.word	0x00030d40

080056d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0301 	and.w	r3, r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <USB_CoreReset+0x64>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e01b      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	daf2      	bge.n	800576c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <USB_CoreReset+0x64>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d0f0      	beq.n	8005796 <USB_CoreReset+0x36>

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	00030d40 	.word	0x00030d40

080057c8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    {
 80057d0:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
    }
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	08007ed4 	.word	0x08007ed4

080057e8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    }
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ffe9 	bl	80057c8 <_ZN8touchgfx4FontD1Ev>
 80057f6:	2114      	movs	r1, #20
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 f9a1 	bl	8006b40 <_ZdlPvj>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800581a:	2300      	movs	r3, #0
 800581c:	e010      	b.n	8005840 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	681c      	ldr	r4, [r3, #0]
 800582e:	f107 030f 	add.w	r3, r7, #15
 8005832:	f107 0210 	add.w	r2, r7, #16
 8005836:	8879      	ldrh	r1, [r7, #2]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	47a0      	blx	r4
 800583c:	6178      	str	r0, [r7, #20]
        return glyph;
 800583e:	697b      	ldr	r3, [r7, #20]
    }
 8005840:	4618      	mov	r0, r3
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd90      	pop	{r4, r7, pc}

08005848 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	89db      	ldrh	r3, [r3, #14]
    }
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	88db      	ldrh	r3, [r3, #6]
    }
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	889b      	ldrh	r3, [r3, #4]
    }
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7a9b      	ldrb	r3, [r3, #10]
 80058b4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80058b8:	b2db      	uxtb	r3, r3
    }
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7a9b      	ldrb	r3, [r3, #10]
 80058d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058d6:	b2db      	uxtb	r3, r3
    }
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	4a05      	ldr	r2, [pc, #20]	; (8005904 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff67 	bl	80057c8 <_ZN8touchgfx4FontD1Ev>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	08007f30 	.word	0x08007f30

08005908 <_ZN8touchgfx9ConstFontD0Ev>:
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ffe7 	bl	80058e4 <_ZN8touchgfx9ConstFontD1Ev>
 8005916:	211c      	movs	r1, #28
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f911 	bl	8006b40 <_ZdlPvj>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	4a05      	ldr	r2, [pc, #20]	; (8005948 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff ffd3 	bl	80058e4 <_ZN8touchgfx9ConstFontD1Ev>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08007e74 	.word	0x08007e74

0800594c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ffe7 	bl	8005928 <_ZN8touchgfx13GeneratedFontD1Ev>
 800595a:	212c      	movs	r1, #44	; 0x2c
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 f8ef 	bl	8006b40 <_ZdlPvj>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800599c:	b580      	push	{r7, lr}
 800599e:	b08e      	sub	sp, #56	; 0x38
 80059a0:	af0a      	add	r7, sp, #40	; 0x28
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	460b      	mov	r3, r1
 80059ac:	80fb      	strh	r3, [r7, #6]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	88b9      	ldrh	r1, [r7, #4]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059c0:	9307      	str	r3, [sp, #28]
 80059c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80059c6:	9306      	str	r3, [sp, #24]
 80059c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059d8:	9303      	str	r3, [sp, #12]
 80059da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	7f3b      	ldrb	r3, [r7, #28]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	8b3b      	ldrh	r3, [r7, #24]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	460b      	mov	r3, r1
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	f000 fb34 	bl	8006058 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80059f0:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fa:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a00:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	08007e74 	.word	0x08007e74

08005a1c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	889b      	ldrh	r3, [r3, #4]
 8005a30:	0adb      	lsrs	r3, r3, #11
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4413      	add	r3, r2
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b089      	sub	sp, #36	; 0x24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	460b      	mov	r3, r1
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7b1b      	ldrb	r3, [r3, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e031      	b.n	8005ad2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	7b5b      	ldrb	r3, [r3, #13]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a82:	b219      	sxth	r1, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	7adb      	ldrb	r3, [r3, #11]
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	b21b      	sxth	r3, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7b1b      	ldrb	r3, [r3, #12]
 8005a9a:	837b      	strh	r3, [r7, #26]
 8005a9c:	e013      	b.n	8005ac6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	897a      	ldrh	r2, [r7, #10]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d103      	bne.n	8005ab0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005aae:	e010      	b.n	8005ad2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	897a      	ldrh	r2, [r7, #10]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d309      	bcc.n	8005ace <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005aba:	8b7b      	ldrh	r3, [r7, #26]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	837b      	strh	r3, [r7, #26]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	8b7b      	ldrh	r3, [r7, #26]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e8      	bne.n	8005a9e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8005acc:	e000      	b.n	8005ad0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8005ace:	bf00      	nop
        }
    }
    return 0;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3724      	adds	r7, #36	; 0x24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_35_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_35_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_35_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_35_4bpp(glyphs_Asap_Regular_35_4bpp, 23, 42, 35, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_35_4bpp, kerning_Asap_Regular_35_4bpp, 0, 0, 0, 0);
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__tcf_0+0xc>)
 8005ae6:	f7ff ff1f 	bl	8005928 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000888 	.word	0x20000888

08005af0 <_Z28getFont_Asap_Regular_35_4bppv>:
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont Asap_Regular_35_4bpp(glyphs_Asap_Regular_35_4bpp, 23, 42, 35, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_35_4bpp, kerning_Asap_Regular_35_4bpp, 0, 0, 0, 0);
 8005af6:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <_Z28getFont_Asap_Regular_35_4bppv+0x8c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f3bf 8f5b 	dmb	ish
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d030      	beq.n	8005b72 <_Z28getFont_Asap_Regular_35_4bppv+0x82>
 8005b10:	481a      	ldr	r0, [pc, #104]	; (8005b7c <_Z28getFont_Asap_Regular_35_4bppv+0x8c>)
 8005b12:	f001 f817 	bl	8006b44 <__cxa_guard_acquire>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d025      	beq.n	8005b72 <_Z28getFont_Asap_Regular_35_4bppv+0x82>
 8005b26:	2300      	movs	r3, #0
 8005b28:	930c      	str	r3, [sp, #48]	; 0x30
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b2e:	2300      	movs	r3, #0
 8005b30:	930a      	str	r3, [sp, #40]	; 0x28
 8005b32:	2300      	movs	r3, #0
 8005b34:	9309      	str	r3, [sp, #36]	; 0x24
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <_Z28getFont_Asap_Regular_35_4bppv+0x90>)
 8005b38:	9308      	str	r3, [sp, #32]
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <_Z28getFont_Asap_Regular_35_4bppv+0x94>)
 8005b3c:	9307      	str	r3, [sp, #28]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	9306      	str	r3, [sp, #24]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	2301      	movs	r3, #1
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	2304      	movs	r3, #4
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	2323      	movs	r3, #35	; 0x23
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	232a      	movs	r3, #42	; 0x2a
 8005b5c:	2217      	movs	r2, #23
 8005b5e:	490a      	ldr	r1, [pc, #40]	; (8005b88 <_Z28getFont_Asap_Regular_35_4bppv+0x98>)
 8005b60:	480a      	ldr	r0, [pc, #40]	; (8005b8c <_Z28getFont_Asap_Regular_35_4bppv+0x9c>)
 8005b62:	f7ff ff1b 	bl	800599c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005b66:	480a      	ldr	r0, [pc, #40]	; (8005b90 <_Z28getFont_Asap_Regular_35_4bppv+0xa0>)
 8005b68:	f001 f836 	bl	8006bd8 <atexit>
 8005b6c:	4803      	ldr	r0, [pc, #12]	; (8005b7c <_Z28getFont_Asap_Regular_35_4bppv+0x8c>)
 8005b6e:	f000 fff5 	bl	8006b5c <__cxa_guard_release>
    return Asap_Regular_35_4bpp;
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <_Z28getFont_Asap_Regular_35_4bppv+0x9c>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200008b4 	.word	0x200008b4
 8005b80:	08009218 	.word	0x08009218
 8005b84:	0800921c 	.word	0x0800921c
 8005b88:	080090d4 	.word	0x080090d4
 8005b8c:	20000888 	.word	0x20000888
 8005b90:	08005ae1 	.word	0x08005ae1

08005b94 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8005ba2:	2300      	movs	r3, #0
    }
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005bb8:	2300      	movs	r3, #0
    }
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005bce:	2300      	movs	r3, #0
    }
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005bdc:	b40e      	push	{r1, r2, r3}
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8005be6:	f107 0320 	add.w	r3, r7, #32
 8005bea:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f906 	bl	8005e04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c08:	b003      	add	sp, #12
 8005c0a:	4770      	bx	lr

08005c0c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005c0c:	b40c      	push	{r2, r3}
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8005c1a:	f107 031c 	add.w	r3, r7, #28
 8005c1e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005c20:	78f9      	ldrb	r1, [r7, #3]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8ec 	bl	8005e04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005c30:	89fb      	ldrh	r3, [r7, #14]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3c:	b002      	add	sp, #8
 8005c3e:	4770      	bx	lr

08005c40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3322      	adds	r3, #34	; 0x22
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	8adb      	ldrh	r3, [r3, #22]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8005c62:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005c64:	4a43      	ldr	r2, [pc, #268]	; (8005d74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005c66:	21c5      	movs	r1, #197	; 0xc5
 8005c68:	4843      	ldr	r0, [pc, #268]	; (8005d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005c6a:	f000 ff97 	bl	8006b9c <__assert_func>
            return buffer[pos];
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	8a9b      	ldrh	r3, [r3, #20]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d06a      	beq.n	8005d5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 ff3a 	bl	8006b02 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3322      	adds	r3, #34	; 0x22
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	2301      	movs	r3, #1
 8005c96:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	8adb      	ldrh	r3, [r3, #22]
 8005c9c:	8bfa      	ldrh	r2, [r7, #30]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d305      	bcc.n	8005cae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8005ca2:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8005ca4:	4a36      	ldr	r2, [pc, #216]	; (8005d80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8005ca6:	21cb      	movs	r1, #203	; 0xcb
 8005ca8:	4833      	ldr	r0, [pc, #204]	; (8005d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005caa:	f000 ff77 	bl	8006b9c <__assert_func>
            const uint16_t index = pos + offset;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	8a9a      	ldrh	r2, [r3, #20]
 8005cb2:	8bfb      	ldrh	r3, [r7, #30]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8005cb8:	8bbb      	ldrh	r3, [r7, #28]
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d801      	bhi.n	8005cc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8005cbe:	8bbb      	ldrh	r3, [r7, #28]
 8005cc0:	e001      	b.n	8005cc6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8005cc2:	8bbb      	ldrh	r3, [r7, #28]
 8005cc4:	3b0a      	subs	r3, #10
 8005cc6:	6a3a      	ldr	r2, [r7, #32]
 8005cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ccc:	f640 123f 	movw	r2, #2367	; 0x93f
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03f      	beq.n	8005d5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3322      	adds	r3, #34	; 0x22
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	3222      	adds	r2, #34	; 0x22
 8005ce6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	8ad2      	ldrh	r2, [r2, #22]
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	d105      	bne.n	8005cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8005cf0:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005cf2:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005cf4:	21c5      	movs	r1, #197	; 0xc5
 8005cf6:	4820      	ldr	r0, [pc, #128]	; (8005d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005cf8:	f000 ff50 	bl	8006b9c <__assert_func>
            return buffer[pos];
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	8a92      	ldrh	r2, [r2, #20]
 8005d00:	4611      	mov	r1, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	8adb      	ldrh	r3, [r3, #22]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d806      	bhi.n	8005d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8005d16:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8005d1a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005d1e:	4816      	ldr	r0, [pc, #88]	; (8005d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005d20:	f000 ff3c 	bl	8006b9c <__assert_func>
            const uint16_t index = pos + 1;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	8a9b      	ldrh	r3, [r3, #20]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8005d2c:	89bb      	ldrh	r3, [r7, #12]
 8005d2e:	2b09      	cmp	r3, #9
 8005d30:	d801      	bhi.n	8005d36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8005d32:	89bb      	ldrh	r3, [r7, #12]
 8005d34:	e000      	b.n	8005d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8005d36:	2300      	movs	r3, #0
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	89f9      	ldrh	r1, [r7, #14]
 8005d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8005d40:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3322      	adds	r3, #34	; 0x22
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	f640 133f 	movw	r3, #2367	; 0x93f
 8005d4c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	8a9b      	ldrh	r3, [r3, #20]
 8005d52:	4619      	mov	r1, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	8afa      	ldrh	r2, [r7, #22]
 8005d58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8005d5c:	bf00      	nop
        }
    }
    return getNextChar();
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fdd2 	bl	8006908 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005d64:	4603      	mov	r3, r0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08007ba8 	.word	0x08007ba8
 8005d74:	08007bb4 	.word	0x08007bb4
 8005d78:	08007c60 	.word	0x08007c60
 8005d7c:	08007ca8 	.word	0x08007ca8
 8005d80:	08007cb8 	.word	0x08007cb8
 8005d84:	08007d8c 	.word	0x08007d8c
 8005d88:	08007d98 	.word	0x08007d98

08005d8c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fd7e 	bl	8006896 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <_Z41__static_initialization_and_destruction_0ii>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_35_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d109      	bne.n	8005dc8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d104      	bne.n	8005dc8 <_Z41__static_initialization_and_destruction_0ii+0x24>
    &(getFont_Asap_Regular_35_4bpp())
 8005dbe:	f7ff fe97 	bl	8005af0 <_Z28getFont_Asap_Regular_35_4bppv>
 8005dc2:	4603      	mov	r3, r0
};
 8005dc4:	4a02      	ldr	r2, [pc, #8]	; (8005dd0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005dc6:	6013      	str	r3, [r2, #0]
} // namespace TypedTextDatabase
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	200008b8 	.word	0x200008b8

08005dd4 <_GLOBAL__sub_I_touchgfx_fonts>:
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7ff ffe1 	bl	8005da4 <_Z41__static_initialization_and_destruction_0ii>
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8005de4:	4b01      	ldr	r3, [pc, #4]	; (8005dec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	4770      	bx	lr
 8005dec:	200008bc 	.word	0x200008bc

08005df0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	805a      	strh	r2, [r3, #2]
 8005df8:	809a      	strh	r2, [r3, #4]
 8005dfa:	80da      	strh	r2, [r3, #6]
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200008c0 	.word	0x200008c0

08005e04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	4606      	mov	r6, r0
 8005e0a:	b09d      	sub	sp, #116	; 0x74
 8005e0c:	a803      	add	r0, sp, #12
 8005e0e:	4614      	mov	r4, r2
 8005e10:	468a      	mov	sl, r1
 8005e12:	461d      	mov	r5, r3
 8005e14:	f000 f9b2 	bl	800617c <_ZN8touchgfx12TextProviderC1Ev>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1e:	4798      	blx	r3
 8005e20:	6833      	ldr	r3, [r6, #0]
 8005e22:	4607      	mov	r7, r0
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	4630      	mov	r0, r6
 8005e28:	4798      	blx	r3
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	9000      	str	r0, [sp, #0]
 8005e2e:	4621      	mov	r1, r4
 8005e30:	463b      	mov	r3, r7
 8005e32:	a803      	add	r0, sp, #12
 8005e34:	f000 f9f5 	bl	8006222 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005e38:	2500      	movs	r5, #0
 8005e3a:	462c      	mov	r4, r5
 8005e3c:	46a9      	mov	r9, r5
 8005e3e:	46a8      	mov	r8, r5
 8005e40:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8005e44:	2300      	movs	r3, #0
 8005e46:	9302      	str	r3, [sp, #8]
 8005e48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d002      	beq.n	8005e56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8005e50:	455c      	cmp	r4, fp
 8005e52:	bf18      	it	ne
 8005e54:	4625      	movne	r5, r4
 8005e56:	ab02      	add	r3, sp, #8
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4651      	mov	r1, sl
 8005e5c:	a803      	add	r0, sp, #12
 8005e5e:	f000 fcd1 	bl	8006804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005e62:	4604      	mov	r4, r0
 8005e64:	b108      	cbz	r0, 8005e6a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8005e66:	280a      	cmp	r0, #10
 8005e68:	d10a      	bne.n	8005e80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8005e6a:	45c1      	cmp	r9, r8
 8005e6c:	bf38      	it	cc
 8005e6e:	46c1      	movcc	r9, r8
 8005e70:	f04f 0800 	mov.w	r8, #0
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	d1e5      	bne.n	8005e44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8005e78:	4648      	mov	r0, r9
 8005e7a:	b01d      	add	sp, #116	; 0x74
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	9a02      	ldr	r2, [sp, #8]
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d0de      	beq.n	8005e44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8005e86:	7b57      	ldrb	r7, [r2, #13]
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	8894      	ldrh	r4, [r2, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	007f      	lsls	r7, r7, #1
 8005e90:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8005e94:	7a97      	ldrb	r7, [r2, #10]
 8005e96:	4629      	mov	r1, r5
 8005e98:	4307      	orrs	r7, r0
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	4798      	blx	r3
 8005e9e:	4438      	add	r0, r7
 8005ea0:	4480      	add	r8, r0
 8005ea2:	fa1f f888 	uxth.w	r8, r8
 8005ea6:	e7e5      	b.n	8005e74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08005ea8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8005ea8:	b508      	push	{r3, lr}
 8005eaa:	6803      	ldr	r3, [r0, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	b128      	cbz	r0, 8005ebe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8005eb2:	7b43      	ldrb	r3, [r0, #13]
 8005eb4:	7a80      	ldrb	r0, [r0, #10]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	4318      	orrs	r0, r3
 8005ebe:	bd08      	pop	{r3, pc}

08005ec0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8005ec0:	b40e      	push	{r1, r2, r3}
 8005ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec4:	b09e      	sub	sp, #120	; 0x78
 8005ec6:	ab23      	add	r3, sp, #140	; 0x8c
 8005ec8:	4605      	mov	r5, r0
 8005eca:	f853 4b04 	ldr.w	r4, [r3], #4
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	a805      	add	r0, sp, #20
 8005ed2:	f000 f953 	bl	800617c <_ZN8touchgfx12TextProviderC1Ev>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	4628      	mov	r0, r5
 8005eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005edc:	4798      	blx	r3
 8005ede:	682b      	ldr	r3, [r5, #0]
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	4798      	blx	r3
 8005ee8:	4633      	mov	r3, r6
 8005eea:	ae1e      	add	r6, sp, #120	; 0x78
 8005eec:	4621      	mov	r1, r4
 8005eee:	9000      	str	r0, [sp, #0]
 8005ef0:	9a03      	ldr	r2, [sp, #12]
 8005ef2:	2400      	movs	r4, #0
 8005ef4:	a805      	add	r0, sp, #20
 8005ef6:	f000 f994 	bl	8006222 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005efa:	f846 4d68 	str.w	r4, [r6, #-104]!
 8005efe:	462a      	mov	r2, r5
 8005f00:	4633      	mov	r3, r6
 8005f02:	4621      	mov	r1, r4
 8005f04:	a805      	add	r0, sp, #20
 8005f06:	f000 fc7d 	bl	8006804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8005f0a:	b1f0      	cbz	r0, 8005f4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8005f0c:	280a      	cmp	r0, #10
 8005f0e:	d018      	beq.n	8005f42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8005f10:	9f04      	ldr	r7, [sp, #16]
 8005f12:	b1b7      	cbz	r7, 8005f42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8005f14:	7b78      	ldrb	r0, [r7, #13]
 8005f16:	7a3b      	ldrb	r3, [r7, #8]
 8005f18:	88ea      	ldrh	r2, [r5, #6]
 8005f1a:	00c1      	lsls	r1, r0, #3
 8005f1c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8005f20:	4319      	orrs	r1, r3
 8005f22:	0643      	lsls	r3, r0, #25
 8005f24:	bf44      	itt	mi
 8005f26:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8005f2a:	b219      	sxthmi	r1, r3
 8005f2c:	0100      	lsls	r0, r0, #4
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8005f34:	4303      	orrs	r3, r0
 8005f36:	4413      	add	r3, r2
 8005f38:	1a5b      	subs	r3, r3, r1
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	bfb8      	it	lt
 8005f40:	461c      	movlt	r4, r3
 8005f42:	4633      	mov	r3, r6
 8005f44:	462a      	mov	r2, r5
 8005f46:	2100      	movs	r1, #0
 8005f48:	e7dc      	b.n	8005f04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8005f4a:	b2a0      	uxth	r0, r4
 8005f4c:	b01e      	add	sp, #120	; 0x78
 8005f4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f52:	b003      	add	sp, #12
 8005f54:	4770      	bx	lr

08005f56 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8005f56:	7a43      	ldrb	r3, [r0, #9]
 8005f58:	8880      	ldrh	r0, [r0, #4]
 8005f5a:	4418      	add	r0, r3
 8005f5c:	b280      	uxth	r0, r0
 8005f5e:	4770      	bx	lr

08005f60 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8005f60:	6803      	ldr	r3, [r0, #0]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	4718      	bx	r3

08005f66 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8005f66:	b40e      	push	{r1, r2, r3}
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	b09d      	sub	sp, #116	; 0x74
 8005f6c:	ab21      	add	r3, sp, #132	; 0x84
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	a803      	add	r0, sp, #12
 8005f78:	f000 f900 	bl	800617c <_ZN8touchgfx12TextProviderC1Ev>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	4798      	blx	r3
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	4606      	mov	r6, r0
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4798      	blx	r3
 8005f8e:	4633      	mov	r3, r6
 8005f90:	9000      	str	r0, [sp, #0]
 8005f92:	9a02      	ldr	r2, [sp, #8]
 8005f94:	4629      	mov	r1, r5
 8005f96:	a803      	add	r0, sp, #12
 8005f98:	f000 f943 	bl	8006222 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005f9c:	a803      	add	r0, sp, #12
 8005f9e:	f000 fcb3 	bl	8006908 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005fa2:	2401      	movs	r4, #1
 8005fa4:	b2a3      	uxth	r3, r4
 8005fa6:	b140      	cbz	r0, 8005fba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8005fa8:	280a      	cmp	r0, #10
 8005faa:	bf08      	it	eq
 8005fac:	3301      	addeq	r3, #1
 8005fae:	a803      	add	r0, sp, #12
 8005fb0:	bf08      	it	eq
 8005fb2:	b21c      	sxtheq	r4, r3
 8005fb4:	f000 fca8 	bl	8006908 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005fb8:	e7f4      	b.n	8005fa4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8005fba:	4618      	mov	r0, r3
 8005fbc:	b01d      	add	sp, #116	; 0x74
 8005fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fc2:	b003      	add	sp, #12
 8005fc4:	4770      	bx	lr

08005fc6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8005fc6:	b40e      	push	{r1, r2, r3}
 8005fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fca:	b09e      	sub	sp, #120	; 0x78
 8005fcc:	ab23      	add	r3, sp, #140	; 0x8c
 8005fce:	4604      	mov	r4, r0
 8005fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd4:	9303      	str	r3, [sp, #12]
 8005fd6:	a805      	add	r0, sp, #20
 8005fd8:	f000 f8d0 	bl	800617c <_ZN8touchgfx12TextProviderC1Ev>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe2:	4798      	blx	r3
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	4620      	mov	r0, r4
 8005fec:	4798      	blx	r3
 8005fee:	4633      	mov	r3, r6
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	9000      	str	r0, [sp, #0]
 8005ff4:	9a03      	ldr	r2, [sp, #12]
 8005ff6:	a805      	add	r0, sp, #20
 8005ff8:	ad1e      	add	r5, sp, #120	; 0x78
 8005ffa:	f000 f912 	bl	8006222 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8005ffe:	2100      	movs	r1, #0
 8006000:	f845 1d68 	str.w	r1, [r5, #-104]!
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	a805      	add	r0, sp, #20
 800600a:	f000 fbfb 	bl	8006804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800600e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8006012:	b1d8      	cbz	r0, 800604c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8006014:	280a      	cmp	r0, #10
 8006016:	d012      	beq.n	800603e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8006018:	9804      	ldr	r0, [sp, #16]
 800601a:	b180      	cbz	r0, 800603e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800601c:	7b47      	ldrb	r7, [r0, #13]
 800601e:	88e2      	ldrh	r2, [r4, #6]
 8006020:	00fb      	lsls	r3, r7, #3
 8006022:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8006026:	7a03      	ldrb	r3, [r0, #8]
 8006028:	430b      	orrs	r3, r1
 800602a:	0679      	lsls	r1, r7, #25
 800602c:	bf44      	itt	mi
 800602e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006032:	b21b      	sxthmi	r3, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	b21b      	sxth	r3, r3
 8006038:	429e      	cmp	r6, r3
 800603a:	bfa8      	it	ge
 800603c:	461e      	movge	r6, r3
 800603e:	462b      	mov	r3, r5
 8006040:	4622      	mov	r2, r4
 8006042:	2100      	movs	r1, #0
 8006044:	a805      	add	r0, sp, #20
 8006046:	f000 fbdd 	bl	8006804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800604a:	e7e2      	b.n	8006012 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800604c:	4630      	mov	r0, r6
 800604e:	b01e      	add	sp, #120	; 0x78
 8006050:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006054:	b003      	add	sp, #12
 8006056:	4770      	bx	lr

08006058 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8006058:	b530      	push	{r4, r5, lr}
 800605a:	8083      	strh	r3, [r0, #4]
 800605c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006060:	80c3      	strh	r3, [r0, #6]
 8006062:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006066:	7203      	strb	r3, [r0, #8]
 8006068:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800606c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8006070:	7243      	strb	r3, [r0, #9]
 8006072:	7a83      	ldrb	r3, [r0, #10]
 8006074:	6141      	str	r1, [r0, #20]
 8006076:	f365 0306 	bfi	r3, r5, #0, #7
 800607a:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800607e:	8302      	strh	r2, [r0, #24]
 8006080:	f365 13c7 	bfi	r3, r5, #7, #1
 8006084:	7283      	strb	r3, [r0, #10]
 8006086:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800608a:	72c3      	strb	r3, [r0, #11]
 800608c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8006090:	7303      	strb	r3, [r0, #12]
 8006092:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8006096:	81c3      	strh	r3, [r0, #14]
 8006098:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800609c:	8203      	strh	r3, [r0, #16]
 800609e:	4b01      	ldr	r3, [pc, #4]	; (80060a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80060a0:	6003      	str	r3, [r0, #0]
 80060a2:	bd30      	pop	{r4, r5, pc}
 80060a4:	08007f30 	.word	0x08007f30

080060a8 <_ZNK8touchgfx9ConstFont4findEt>:
 80060a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060aa:	6944      	ldr	r4, [r0, #20]
 80060ac:	b3bc      	cbz	r4, 800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060ae:	88a3      	ldrh	r3, [r4, #4]
 80060b0:	8b02      	ldrh	r2, [r0, #24]
 80060b2:	1acb      	subs	r3, r1, r3
 80060b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80060b8:	d431      	bmi.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060ba:	4293      	cmp	r3, r2
 80060bc:	dd0c      	ble.n	80060d8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80060be:	230e      	movs	r3, #14
 80060c0:	fb03 4302 	mla	r3, r3, r2, r4
 80060c4:	889b      	ldrh	r3, [r3, #4]
 80060c6:	1a5b      	subs	r3, r3, r1
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	429a      	cmp	r2, r3
 80060cc:	db27      	blt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfbc      	itt	lt
 80060d2:	2302      	movlt	r3, #2
 80060d4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80060d8:	2500      	movs	r5, #0
 80060da:	260e      	movs	r6, #14
 80060dc:	4295      	cmp	r5, r2
 80060de:	dc1e      	bgt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060e0:	fb06 4003 	mla	r0, r6, r3, r4
 80060e4:	8887      	ldrh	r7, [r0, #4]
 80060e6:	42b9      	cmp	r1, r7
 80060e8:	d01a      	beq.n	8006120 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80060ea:	d20d      	bcs.n	8006108 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	4295      	cmp	r5, r2
 80060f0:	dc15      	bgt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060f2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80060f6:	1a5b      	subs	r3, r3, r1
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	429a      	cmp	r2, r3
 80060fc:	db0f      	blt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80060fe:	429d      	cmp	r5, r3
 8006100:	ddec      	ble.n	80060dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006102:	1953      	adds	r3, r2, r5
 8006104:	105b      	asrs	r3, r3, #1
 8006106:	e7e9      	b.n	80060dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006108:	1c5d      	adds	r5, r3, #1
 800610a:	42aa      	cmp	r2, r5
 800610c:	db07      	blt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800610e:	8a43      	ldrh	r3, [r0, #18]
 8006110:	1acb      	subs	r3, r1, r3
 8006112:	442b      	add	r3, r5
 8006114:	429d      	cmp	r5, r3
 8006116:	dc02      	bgt.n	800611e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006118:	429a      	cmp	r2, r3
 800611a:	dadf      	bge.n	80060dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800611c:	e7f1      	b.n	8006102 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800611e:	2000      	movs	r0, #0
 8006120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006122 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8006122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	4617      	mov	r7, r2
 8006128:	461e      	mov	r6, r3
 800612a:	b911      	cbnz	r1, 8006132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800612c:	2500      	movs	r5, #0
 800612e:	4628      	mov	r0, r5
 8006130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006132:	290a      	cmp	r1, #10
 8006134:	d0fa      	beq.n	800612c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006136:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800613a:	4291      	cmp	r1, r2
 800613c:	d0f6      	beq.n	800612c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800613e:	f242 020b 	movw	r2, #8203	; 0x200b
 8006142:	4291      	cmp	r1, r2
 8006144:	d0f2      	beq.n	800612c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006146:	f7ff ffaf 	bl	80060a8 <_ZNK8touchgfx9ConstFont4findEt>
 800614a:	4605      	mov	r5, r0
 800614c:	b950      	cbnz	r0, 8006164 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	4620      	mov	r0, r4
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	4798      	blx	r3
 8006156:	4601      	mov	r1, r0
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ffa5 	bl	80060a8 <_ZNK8touchgfx9ConstFont4findEt>
 800615e:	4605      	mov	r5, r0
 8006160:	2800      	cmp	r0, #0
 8006162:	d0e3      	beq.n	800612c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	4629      	mov	r1, r5
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	4620      	mov	r0, r4
 800616c:	4798      	blx	r3
 800616e:	6038      	str	r0, [r7, #0]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	4798      	blx	r3
 8006178:	7030      	strb	r0, [r6, #0]
 800617a:	e7d8      	b.n	800612e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800617c <_ZN8touchgfx12TextProviderC1Ev>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	2500      	movs	r5, #0
 8006180:	2302      	movs	r3, #2
 8006182:	4604      	mov	r4, r0
 8006184:	e9c0 5500 	strd	r5, r5, [r0]
 8006188:	7403      	strb	r3, [r0, #16]
 800618a:	6145      	str	r5, [r0, #20]
 800618c:	7605      	strb	r5, [r0, #24]
 800618e:	83c5      	strh	r5, [r0, #30]
 8006190:	8405      	strh	r5, [r0, #32]
 8006192:	86c5      	strh	r5, [r0, #54]	; 0x36
 8006194:	8705      	strh	r5, [r0, #56]	; 0x38
 8006196:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8006198:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800619c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80061a0:	220e      	movs	r2, #14
 80061a2:	4629      	mov	r1, r5
 80061a4:	304c      	adds	r0, #76	; 0x4c
 80061a6:	f000 fede 	bl	8006f66 <memset>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4620      	mov	r0, r4
 80061ae:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80061b2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80061b6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80061ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80061be:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80061c2:	f7ff fde3 	bl	8005d8c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80061c6:	4620      	mov	r0, r4
 80061c8:	bd38      	pop	{r3, r4, r5, pc}

080061ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80061ca:	b530      	push	{r4, r5, lr}
 80061cc:	2500      	movs	r5, #0
 80061ce:	2401      	movs	r4, #1
 80061d0:	6843      	ldr	r3, [r0, #4]
 80061d2:	b913      	cbnz	r3, 80061da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80061d4:	6803      	ldr	r3, [r0, #0]
 80061d6:	b313      	cbz	r3, 800621e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80061d8:	6043      	str	r3, [r0, #4]
 80061da:	7e03      	ldrb	r3, [r0, #24]
 80061dc:	b143      	cbz	r3, 80061f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80061de:	6943      	ldr	r3, [r0, #20]
 80061e0:	b12b      	cbz	r3, 80061ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	b11a      	cbz	r2, 80061ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	6142      	str	r2, [r0, #20]
 80061ea:	8818      	ldrh	r0, [r3, #0]
 80061ec:	bd30      	pop	{r4, r5, pc}
 80061ee:	7605      	strb	r5, [r0, #24]
 80061f0:	6843      	ldr	r3, [r0, #4]
 80061f2:	8819      	ldrh	r1, [r3, #0]
 80061f4:	b199      	cbz	r1, 800621e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	2902      	cmp	r1, #2
 80061fa:	6042      	str	r2, [r0, #4]
 80061fc:	d1f5      	bne.n	80061ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80061fe:	7c03      	ldrb	r3, [r0, #16]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d8e5      	bhi.n	80061d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	3302      	adds	r3, #2
 8006208:	7402      	strb	r2, [r0, #16]
 800620a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800620e:	6143      	str	r3, [r0, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0dd      	beq.n	80061d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0da      	beq.n	80061d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800621a:	7604      	strb	r4, [r0, #24]
 800621c:	e7d8      	b.n	80061d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800621e:	2000      	movs	r0, #0
 8006220:	e7e4      	b.n	80061ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08006222 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8006222:	b430      	push	{r4, r5}
 8006224:	6001      	str	r1, [r0, #0]
 8006226:	2100      	movs	r1, #0
 8006228:	6041      	str	r1, [r0, #4]
 800622a:	6815      	ldr	r5, [r2, #0]
 800622c:	6085      	str	r5, [r0, #8]
 800622e:	6852      	ldr	r2, [r2, #4]
 8006230:	6443      	str	r3, [r0, #68]	; 0x44
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	60c2      	str	r2, [r0, #12]
 8006236:	7401      	strb	r1, [r0, #16]
 8006238:	6141      	str	r1, [r0, #20]
 800623a:	7601      	strb	r1, [r0, #24]
 800623c:	8701      	strh	r1, [r0, #56]	; 0x38
 800623e:	8401      	strh	r1, [r0, #32]
 8006240:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006244:	6483      	str	r3, [r0, #72]	; 0x48
 8006246:	bc30      	pop	{r4, r5}
 8006248:	f7ff bda0 	b.w	8005d8c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800624c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800624c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624e:	4605      	mov	r5, r0
 8006250:	4608      	mov	r0, r1
 8006252:	b1e9      	cbz	r1, 8006290 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8006254:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8006258:	460b      	mov	r3, r1
 800625a:	f101 0708 	add.w	r7, r1, #8
 800625e:	4622      	mov	r2, r4
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	4626      	mov	r6, r4
 8006266:	c603      	stmia	r6!, {r0, r1}
 8006268:	3308      	adds	r3, #8
 800626a:	42bb      	cmp	r3, r7
 800626c:	4634      	mov	r4, r6
 800626e:	d1f7      	bne.n	8006260 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	6030      	str	r0, [r6, #0]
 8006274:	889b      	ldrh	r3, [r3, #4]
 8006276:	80b3      	strh	r3, [r6, #4]
 8006278:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800627c:	015b      	lsls	r3, r3, #5
 800627e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8006282:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8006286:	430b      	orrs	r3, r1
 8006288:	425b      	negs	r3, r3
 800628a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800628e:	4610      	mov	r0, r2
 8006290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006292 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8006292:	b538      	push	{r3, r4, r5, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	6811      	ldr	r1, [r2, #0]
 8006298:	4610      	mov	r0, r2
 800629a:	68cd      	ldr	r5, [r1, #12]
 800629c:	4619      	mov	r1, r3
 800629e:	47a8      	blx	r5
 80062a0:	2800      	cmp	r0, #0
 80062a2:	bf08      	it	eq
 80062a4:	4620      	moveq	r0, r4
 80062a6:	bd38      	pop	{r3, r4, r5, pc}

080062a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	4615      	mov	r5, r2
 80062ae:	4608      	mov	r0, r1
 80062b0:	b93a      	cbnz	r2, 80062c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80062b2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80062b6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80062ba:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80062be:	4628      	mov	r0, r5
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80062c6:	8893      	ldrh	r3, [r2, #4]
 80062c8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80062cc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80062d0:	79ee      	ldrb	r6, [r5, #7]
 80062d2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80062d6:	4316      	orrs	r6, r2
 80062d8:	19da      	adds	r2, r3, r7
 80062da:	b291      	uxth	r1, r2
 80062dc:	291d      	cmp	r1, #29
 80062de:	b2b7      	uxth	r7, r6
 80062e0:	d87a      	bhi.n	80063d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80062e2:	2201      	movs	r2, #1
 80062e4:	408a      	lsls	r2, r1
 80062e6:	4975      	ldr	r1, [pc, #468]	; (80064bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80062e8:	420a      	tst	r2, r1
 80062ea:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80062ee:	d12d      	bne.n	800634c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80062f0:	f412 7f60 	tst.w	r2, #896	; 0x380
 80062f4:	d070      	beq.n	80063d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80062f6:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80062fa:	462b      	mov	r3, r5
 80062fc:	f105 0e08 	add.w	lr, r5, #8
 8006300:	4615      	mov	r5, r2
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
 8006306:	4694      	mov	ip, r2
 8006308:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800630c:	3308      	adds	r3, #8
 800630e:	4573      	cmp	r3, lr
 8006310:	4662      	mov	r2, ip
 8006312:	d1f6      	bne.n	8006302 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f8cc 0000 	str.w	r0, [ip]
 800631a:	889b      	ldrh	r3, [r3, #4]
 800631c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8006320:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006324:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8006328:	b2b3      	uxth	r3, r6
 800632a:	1aca      	subs	r2, r1, r3
 800632c:	b292      	uxth	r2, r2
 800632e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8006332:	10d2      	asrs	r2, r2, #3
 8006334:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8006338:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800633c:	4302      	orrs	r2, r0
 800633e:	1bcf      	subs	r7, r1, r7
 8006340:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8006344:	1afb      	subs	r3, r7, r3
 8006346:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800634a:	e7b8      	b.n	80062be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800634c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800634e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006352:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8006354:	f640 6333 	movw	r3, #3635	; 0xe33
 8006358:	4299      	cmp	r1, r3
 800635a:	d110      	bne.n	800637e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800635c:	6803      	ldr	r3, [r0, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4798      	blx	r3
 8006362:	7b41      	ldrb	r1, [r0, #13]
 8006364:	00cb      	lsls	r3, r1, #3
 8006366:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800636a:	7a03      	ldrb	r3, [r0, #8]
 800636c:	0648      	lsls	r0, r1, #25
 800636e:	ea43 0302 	orr.w	r3, r3, r2
 8006372:	bf44      	itt	mi
 8006374:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006378:	b21b      	sxthmi	r3, r3
 800637a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800637e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006382:	443b      	add	r3, r7
 8006384:	4433      	add	r3, r6
 8006386:	b29b      	uxth	r3, r3
 8006388:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800638c:	462a      	mov	r2, r5
 800638e:	f105 0c08 	add.w	ip, r5, #8
 8006392:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006396:	4635      	mov	r5, r6
 8006398:	6810      	ldr	r0, [r2, #0]
 800639a:	6851      	ldr	r1, [r2, #4]
 800639c:	4637      	mov	r7, r6
 800639e:	c703      	stmia	r7!, {r0, r1}
 80063a0:	3208      	adds	r2, #8
 80063a2:	4562      	cmp	r2, ip
 80063a4:	463e      	mov	r6, r7
 80063a6:	d1f7      	bne.n	8006398 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80063a8:	6810      	ldr	r0, [r2, #0]
 80063aa:	6038      	str	r0, [r7, #0]
 80063ac:	8892      	ldrh	r2, [r2, #4]
 80063ae:	80ba      	strh	r2, [r7, #4]
 80063b0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80063b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80063b8:	10db      	asrs	r3, r3, #3
 80063ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80063c8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80063cc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80063d6:	e772      	b.n	80062be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80063d8:	f023 0204 	bic.w	r2, r3, #4
 80063dc:	f640 611b 	movw	r1, #3611	; 0xe1b
 80063e0:	428a      	cmp	r2, r1
 80063e2:	d003      	beq.n	80063ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80063e4:	f640 621d 	movw	r2, #3613	; 0xe1d
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d120      	bne.n	800642e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 80063ec:	3b01      	subs	r3, #1
 80063ee:	4602      	mov	r2, r0
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	4629      	mov	r1, r5
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff ff4c 	bl	8006292 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80063fa:	7b41      	ldrb	r1, [r0, #13]
 80063fc:	00cb      	lsls	r3, r1, #3
 80063fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8006402:	7a03      	ldrb	r3, [r0, #8]
 8006404:	0649      	lsls	r1, r1, #25
 8006406:	ea43 0302 	orr.w	r3, r3, r2
 800640a:	bf44      	itt	mi
 800640c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006410:	b21b      	sxthmi	r3, r3
 8006412:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006416:	7b6b      	ldrb	r3, [r5, #13]
 8006418:	7aaa      	ldrb	r2, [r5, #10]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006420:	4313      	orrs	r3, r2
 8006422:	115a      	asrs	r2, r3, #5
 8006424:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8006428:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800642c:	e036      	b.n	800649c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800642e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8006432:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8006436:	7a2a      	ldrb	r2, [r5, #8]
 8006438:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800643c:	ea42 0201 	orr.w	r2, r2, r1
 8006440:	bf1c      	itt	ne
 8006442:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8006446:	b212      	sxthne	r2, r2
 8006448:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800644c:	f640 6109 	movw	r1, #3593	; 0xe09
 8006450:	f023 0210 	bic.w	r2, r3, #16
 8006454:	428a      	cmp	r2, r1
 8006456:	d003      	beq.n	8006460 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8006458:	f640 6213 	movw	r2, #3603	; 0xe13
 800645c:	4293      	cmp	r3, r2
 800645e:	d12a      	bne.n	80064b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8006460:	7b6e      	ldrb	r6, [r5, #13]
 8006462:	0076      	lsls	r6, r6, #1
 8006464:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8006468:	7aae      	ldrb	r6, [r5, #10]
 800646a:	4316      	orrs	r6, r2
 800646c:	f640 6213 	movw	r2, #3603	; 0xe13
 8006470:	4293      	cmp	r3, r2
 8006472:	bf18      	it	ne
 8006474:	f103 33ff 	addne.w	r3, r3, #4294967295
 8006478:	4602      	mov	r2, r0
 800647a:	bf14      	ite	ne
 800647c:	b29b      	uxthne	r3, r3
 800647e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8006482:	4629      	mov	r1, r5
 8006484:	4620      	mov	r0, r4
 8006486:	f7ff ff04 	bl	8006292 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800648a:	7b43      	ldrb	r3, [r0, #13]
 800648c:	7a82      	ldrb	r2, [r0, #10]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	4313      	orrs	r3, r2
 8006496:	1af6      	subs	r6, r6, r3
 8006498:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800649c:	7b69      	ldrb	r1, [r5, #13]
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80064a4:	7a2b      	ldrb	r3, [r5, #8]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	064a      	lsls	r2, r1, #25
 80064aa:	bf44      	itt	mi
 80064ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80064b0:	b21b      	sxthmi	r3, r3
 80064b2:	1bdb      	subs	r3, r3, r7
 80064b4:	e747      	b.n	8006346 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80064b6:	2300      	movs	r3, #0
 80064b8:	e7b6      	b.n	8006428 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 80064ba:	bf00      	nop
 80064bc:	3fc00079 	.word	0x3fc00079

080064c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4604      	mov	r4, r0
 80064c6:	b942      	cbnz	r2, 80064da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80064c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064cc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80064d0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80064d4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80064d8:	e047      	b.n	800656a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80064da:	7b51      	ldrb	r1, [r2, #13]
 80064dc:	8893      	ldrh	r3, [r2, #4]
 80064de:	010d      	lsls	r5, r1, #4
 80064e0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80064e4:	79d5      	ldrb	r5, [r2, #7]
 80064e6:	4305      	orrs	r5, r0
 80064e8:	2d04      	cmp	r5, #4
 80064ea:	bfcc      	ite	gt
 80064ec:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80064f0:	f04f 0e01 	movle.w	lr, #1
 80064f4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80064f8:	f200 80ab 	bhi.w	8006652 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80064fc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8006500:	4283      	cmp	r3, r0
 8006502:	d216      	bcs.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006504:	f240 605b 	movw	r0, #1627	; 0x65b
 8006508:	4283      	cmp	r3, r0
 800650a:	d859      	bhi.n	80065c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800650c:	f240 6057 	movw	r0, #1623	; 0x657
 8006510:	4283      	cmp	r3, r0
 8006512:	d20e      	bcs.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006514:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8006518:	d24a      	bcs.n	80065b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800651a:	f240 604e 	movw	r0, #1614	; 0x64e
 800651e:	4283      	cmp	r3, r0
 8006520:	d207      	bcs.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006522:	f240 601a 	movw	r0, #1562	; 0x61a
 8006526:	4283      	cmp	r3, r0
 8006528:	d02a      	beq.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800652a:	d821      	bhi.n	8006570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800652c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8006530:	d35b      	bcc.n	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8006532:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8006536:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800653a:	f040 80d0 	bne.w	80066de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800653e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8006542:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8006546:	f040 80ca 	bne.w	80066de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8006550:	7a13      	ldrb	r3, [r2, #8]
 8006552:	0649      	lsls	r1, r1, #25
 8006554:	ea43 0300 	orr.w	r3, r3, r0
 8006558:	bf44      	itt	mi
 800655a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800655e:	b21b      	sxthmi	r3, r3
 8006560:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006564:	1b5d      	subs	r5, r3, r5
 8006566:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800656a:	4610      	mov	r0, r2
 800656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006570:	f240 604b 	movw	r0, #1611	; 0x64b
 8006574:	4283      	cmp	r3, r0
 8006576:	d338      	bcc.n	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8006578:	f240 604c 	movw	r0, #1612	; 0x64c
 800657c:	4283      	cmp	r3, r0
 800657e:	d9d8      	bls.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006580:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8006584:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8006588:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800658c:	f040 80f2 	bne.w	8006774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8006590:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006594:	f040 80ee 	bne.w	8006774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8006598:	00cb      	lsls	r3, r1, #3
 800659a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800659e:	7a13      	ldrb	r3, [r2, #8]
 80065a0:	064e      	lsls	r6, r1, #25
 80065a2:	ea43 0300 	orr.w	r3, r3, r0
 80065a6:	bf44      	itt	mi
 80065a8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80065ac:	b21b      	sxthmi	r3, r3
 80065ae:	e7d9      	b.n	8006564 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80065b0:	f240 6054 	movw	r0, #1620	; 0x654
 80065b4:	4283      	cmp	r3, r0
 80065b6:	d8e3      	bhi.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065b8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80065bc:	d9e0      	bls.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065be:	e7b8      	b.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065c0:	f240 6074 	movw	r0, #1652	; 0x674
 80065c4:	4283      	cmp	r3, r0
 80065c6:	d0b4      	beq.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065c8:	d82d      	bhi.n	8006626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80065ca:	f240 605e 	movw	r0, #1630	; 0x65e
 80065ce:	4283      	cmp	r3, r0
 80065d0:	d804      	bhi.n	80065dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80065d2:	f240 605d 	movw	r0, #1629	; 0x65d
 80065d6:	4283      	cmp	r3, r0
 80065d8:	d3d2      	bcc.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065da:	e7aa      	b.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065dc:	f240 605f 	movw	r0, #1631	; 0x65f
 80065e0:	4283      	cmp	r3, r0
 80065e2:	d0cd      	beq.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80065e4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80065e8:	d0a3      	beq.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80065ea:	00cb      	lsls	r3, r1, #3
 80065ec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80065f0:	7a13      	ldrb	r3, [r2, #8]
 80065f2:	0649      	lsls	r1, r1, #25
 80065f4:	ea43 0300 	orr.w	r3, r3, r0
 80065f8:	bf44      	itt	mi
 80065fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80065fe:	b21b      	sxthmi	r3, r3
 8006600:	1b5d      	subs	r5, r3, r5
 8006602:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8006606:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800660a:	7b53      	ldrb	r3, [r2, #13]
 800660c:	015b      	lsls	r3, r3, #5
 800660e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8006612:	7993      	ldrb	r3, [r2, #6]
 8006614:	430b      	orrs	r3, r1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	2105      	movs	r1, #5
 800661a:	fb93 f3f1 	sdiv	r3, r3, r1
 800661e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8006622:	440b      	add	r3, r1
 8006624:	e756      	b.n	80064d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8006626:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800662a:	4283      	cmp	r3, r0
 800662c:	d809      	bhi.n	8006642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800662e:	f240 60df 	movw	r0, #1759	; 0x6df
 8006632:	4283      	cmp	r3, r0
 8006634:	f4bf af7d 	bcs.w	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006638:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800663c:	2b05      	cmp	r3, #5
 800663e:	d8d4      	bhi.n	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8006640:	e777      	b.n	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006642:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8006646:	4283      	cmp	r3, r0
 8006648:	d09a      	beq.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800664a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800664e:	4283      	cmp	r3, r0
 8006650:	e7ca      	b.n	80065e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8006652:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8006656:	d22b      	bcs.n	80066b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8006658:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800665c:	4283      	cmp	r3, r0
 800665e:	d28f      	bcs.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8006660:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006664:	4283      	cmp	r3, r0
 8006666:	d816      	bhi.n	8006696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8006668:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800666c:	4283      	cmp	r3, r0
 800666e:	f4bf af60 	bcs.w	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006672:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8006676:	4283      	cmp	r3, r0
 8006678:	d80a      	bhi.n	8006690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800667a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800667e:	4283      	cmp	r3, r0
 8006680:	f4bf af57 	bcs.w	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8006684:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8006688:	4283      	cmp	r3, r0
 800668a:	f43f af79 	beq.w	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800668e:	e7ac      	b.n	80065ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8006690:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8006694:	e7f8      	b.n	8006688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8006696:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800669a:	4283      	cmp	r3, r0
 800669c:	d802      	bhi.n	80066a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800669e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80066a2:	e798      	b.n	80065d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80066a4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80066a8:	4283      	cmp	r3, r0
 80066aa:	f47f af42 	bne.w	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80066ae:	e767      	b.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80066b0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80066b4:	4283      	cmp	r3, r0
 80066b6:	f43f af63 	beq.w	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80066ba:	d802      	bhi.n	80066c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80066bc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80066c0:	e7f2      	b.n	80066a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80066c2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80066c6:	4283      	cmp	r3, r0
 80066c8:	d805      	bhi.n	80066d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80066ca:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80066ce:	4283      	cmp	r3, r0
 80066d0:	f4ff af2f 	bcc.w	8006532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80066d4:	e754      	b.n	8006580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80066d6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80066da:	4283      	cmp	r3, r0
 80066dc:	e7af      	b.n	800663e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80066de:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80066e2:	4617      	mov	r7, r2
 80066e4:	f102 0808 	add.w	r8, r2, #8
 80066e8:	4666      	mov	r6, ip
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	46e6      	mov	lr, ip
 80066f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80066f4:	3708      	adds	r7, #8
 80066f6:	4547      	cmp	r7, r8
 80066f8:	46f4      	mov	ip, lr
 80066fa:	d1f6      	bne.n	80066ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80066fc:	6838      	ldr	r0, [r7, #0]
 80066fe:	f8ce 0000 	str.w	r0, [lr]
 8006702:	88b9      	ldrh	r1, [r7, #4]
 8006704:	f8ae 1004 	strh.w	r1, [lr, #4]
 8006708:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800670c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8006710:	d009      	beq.n	8006726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8006712:	7b51      	ldrb	r1, [r2, #13]
 8006714:	7992      	ldrb	r2, [r2, #6]
 8006716:	0149      	lsls	r1, r1, #5
 8006718:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800671c:	4311      	orrs	r1, r2
 800671e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8006722:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8006726:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800672a:	b2ad      	uxth	r5, r5
 800672c:	d00d      	beq.n	800674a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800672e:	442b      	add	r3, r5
 8006730:	b29b      	uxth	r3, r3
 8006732:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8006736:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800673a:	10db      	asrs	r3, r3, #3
 800673c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006744:	4313      	orrs	r3, r2
 8006746:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800674a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800674e:	00cb      	lsls	r3, r1, #3
 8006750:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8006754:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006758:	064f      	lsls	r7, r1, #25
 800675a:	ea43 0302 	orr.w	r3, r3, r2
 800675e:	bf44      	itt	mi
 8006760:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006764:	b21b      	sxthmi	r3, r3
 8006766:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800676a:	1b5b      	subs	r3, r3, r5
 800676c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8006770:	4632      	mov	r2, r6
 8006772:	e6fa      	b.n	800656a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8006774:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8006778:	4617      	mov	r7, r2
 800677a:	f102 0908 	add.w	r9, r2, #8
 800677e:	4666      	mov	r6, ip
 8006780:	6838      	ldr	r0, [r7, #0]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	46e0      	mov	r8, ip
 8006786:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800678a:	3708      	adds	r7, #8
 800678c:	454f      	cmp	r7, r9
 800678e:	46c4      	mov	ip, r8
 8006790:	d1f6      	bne.n	8006780 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8006792:	6838      	ldr	r0, [r7, #0]
 8006794:	f8c8 0000 	str.w	r0, [r8]
 8006798:	88b9      	ldrh	r1, [r7, #4]
 800679a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800679e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80067a2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80067a6:	d009      	beq.n	80067bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 80067a8:	7b51      	ldrb	r1, [r2, #13]
 80067aa:	7992      	ldrb	r2, [r2, #6]
 80067ac:	0149      	lsls	r1, r1, #5
 80067ae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80067b2:	4311      	orrs	r1, r2
 80067b4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80067b8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80067bc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80067c0:	d00e      	beq.n	80067e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80067c2:	eba3 030e 	sub.w	r3, r3, lr
 80067c6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80067d0:	10db      	asrs	r3, r3, #3
 80067d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067da:	4313      	orrs	r3, r2
 80067dc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80067e0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80067e4:	00cb      	lsls	r3, r1, #3
 80067e6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80067ea:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80067ee:	0648      	lsls	r0, r1, #25
 80067f0:	ea43 0302 	orr.w	r3, r3, r2
 80067f4:	bf44      	itt	mi
 80067f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80067fa:	b21b      	sxthmi	r3, r3
 80067fc:	1b5d      	subs	r5, r3, r5
 80067fe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8006802:	e7b5      	b.n	8006770 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08006804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8006804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006808:	461e      	mov	r6, r3
 800680a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800680c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006810:	4604      	mov	r4, r0
 8006812:	4617      	mov	r7, r2
 8006814:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8006818:	f7ff fa12 	bl	8005c40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800681c:	4605      	mov	r5, r0
 800681e:	b918      	cbnz	r0, 8006828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8006820:	6030      	str	r0, [r6, #0]
 8006822:	4628      	mov	r0, r5
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4601      	mov	r1, r0
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	4638      	mov	r0, r7
 8006830:	4798      	blx	r3
 8006832:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8006836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800683a:	4602      	mov	r2, r0
 800683c:	6030      	str	r0, [r6, #0]
 800683e:	d213      	bcs.n	8006868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8006840:	4643      	mov	r3, r8
 8006842:	4639      	mov	r1, r7
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff fe3b 	bl	80064c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800684a:	6030      	str	r0, [r6, #0]
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	b143      	cbz	r3, 8006862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8006850:	7b5a      	ldrb	r2, [r3, #13]
 8006852:	7a9b      	ldrb	r3, [r3, #10]
 8006854:	0052      	lsls	r2, r2, #1
 8006856:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800685a:	4313      	orrs	r3, r2
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8006866:	e7dc      	b.n	8006822 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8006868:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d804      	bhi.n	800687c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8006872:	4639      	mov	r1, r7
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff fd17 	bl	80062a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800687a:	e7e6      	b.n	800684a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800687c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0e3      	beq.n	800684c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8006884:	f640 1302 	movw	r3, #2306	; 0x902
 8006888:	429d      	cmp	r5, r3
 800688a:	d1df      	bne.n	800684c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800688c:	4601      	mov	r1, r0
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff fcdc 	bl	800624c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8006894:	e7d9      	b.n	800684a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08006896 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8006896:	b510      	push	{r4, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800689e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80068a0:	b1f1      	cbz	r1, 80068e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80068a2:	2b0a      	cmp	r3, #10
 80068a4:	d02f      	beq.n	8006906 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80068a6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80068a8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80068ac:	3901      	subs	r1, #1
 80068ae:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80068b0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80068b4:	1c51      	adds	r1, r2, #1
 80068b6:	b289      	uxth	r1, r1
 80068b8:	2901      	cmp	r1, #1
 80068ba:	bf84      	itt	hi
 80068bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80068c0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80068c2:	f103 0201 	add.w	r2, r3, #1
 80068c6:	8722      	strh	r2, [r4, #56]	; 0x38
 80068c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80068ca:	bf98      	it	ls
 80068cc:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80068ce:	4413      	add	r3, r2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b09      	cmp	r3, #9
 80068d4:	bf88      	it	hi
 80068d6:	3b0a      	subhi	r3, #10
 80068d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80068dc:	8458      	strh	r0, [r3, #34]	; 0x22
 80068de:	e7dc      	b.n	800689a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80068e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80068e2:	2b0a      	cmp	r3, #10
 80068e4:	d00f      	beq.n	8006906 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80068e6:	4620      	mov	r0, r4
 80068e8:	f7ff fc6f 	bl	80061ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80068ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	8722      	strh	r2, [r4, #56]	; 0x38
 80068f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80068f4:	4413      	add	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	bf88      	it	hi
 80068fc:	3b0a      	subhi	r3, #10
 80068fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006902:	8458      	strh	r0, [r3, #34]	; 0x22
 8006904:	e7ec      	b.n	80068e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8006906:	bd10      	pop	{r4, pc}

08006908 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800690c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8006910:	4604      	mov	r4, r0
 8006912:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8006914:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8006916:	3a01      	subs	r2, #1
 8006918:	8702      	strh	r2, [r0, #56]	; 0x38
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	b292      	uxth	r2, r2
 800691e:	2a09      	cmp	r2, #9
 8006920:	bf86      	itte	hi
 8006922:	3b09      	subhi	r3, #9
 8006924:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8006926:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8006928:	f7ff ffb5 	bl	8006896 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800692c:	8c23      	ldrh	r3, [r4, #32]
 800692e:	2b01      	cmp	r3, #1
 8006930:	bf9c      	itt	ls
 8006932:	3301      	addls	r3, #1
 8006934:	8423      	strhls	r3, [r4, #32]
 8006936:	8be3      	ldrh	r3, [r4, #30]
 8006938:	b90b      	cbnz	r3, 800693e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800693a:	2302      	movs	r3, #2
 800693c:	83e3      	strh	r3, [r4, #30]
 800693e:	8be3      	ldrh	r3, [r4, #30]
 8006940:	3b01      	subs	r3, #1
 8006942:	b29b      	uxth	r3, r3
 8006944:	83e3      	strh	r3, [r4, #30]
 8006946:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800694a:	4628      	mov	r0, r5
 800694c:	8365      	strh	r5, [r4, #26]
 800694e:	bd38      	pop	{r3, r4, r5, pc}

08006950 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8006950:	428a      	cmp	r2, r1
 8006952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006956:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8006958:	d931      	bls.n	80069be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800695a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800695c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8006960:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8006964:	19ee      	adds	r6, r5, r7
 8006966:	1a54      	subs	r4, r2, r1
 8006968:	3e01      	subs	r6, #1
 800696a:	fa1f fe84 	uxth.w	lr, r4
 800696e:	b2b4      	uxth	r4, r6
 8006970:	eba4 090e 	sub.w	r9, r4, lr
 8006974:	fa1f f989 	uxth.w	r9, r9
 8006978:	2c09      	cmp	r4, #9
 800697a:	4626      	mov	r6, r4
 800697c:	bf88      	it	hi
 800697e:	f1a4 060a 	subhi.w	r6, r4, #10
 8006982:	f1bc 0f00 	cmp.w	ip, #0
 8006986:	bf08      	it	eq
 8006988:	f04f 0c02 	moveq.w	ip, #2
 800698c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8006990:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006994:	fa1f fc8c 	uxth.w	ip, ip
 8006998:	3c01      	subs	r4, #1
 800699a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800699e:	b2a4      	uxth	r4, r4
 80069a0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80069a4:	454c      	cmp	r4, r9
 80069a6:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80069aa:	d1e5      	bne.n	8006978 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80069ac:	eba5 050e 	sub.w	r5, r5, lr
 80069b0:	eb0e 0408 	add.w	r4, lr, r8
 80069b4:	8705      	strh	r5, [r0, #56]	; 0x38
 80069b6:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80069ba:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80069be:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80069c0:	1a64      	subs	r4, r4, r1
 80069c2:	4439      	add	r1, r7
 80069c4:	b289      	uxth	r1, r1
 80069c6:	2909      	cmp	r1, #9
 80069c8:	bf88      	it	hi
 80069ca:	390a      	subhi	r1, #10
 80069cc:	8704      	strh	r4, [r0, #56]	; 0x38
 80069ce:	86c1      	strh	r1, [r0, #54]	; 0x36
 80069d0:	250a      	movs	r5, #10
 80069d2:	b18a      	cbz	r2, 80069f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80069d4:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80069d6:	3a01      	subs	r2, #1
 80069d8:	b292      	uxth	r2, r2
 80069da:	3101      	adds	r1, #1
 80069dc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80069e0:	8701      	strh	r1, [r0, #56]	; 0x38
 80069e2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80069e4:	b901      	cbnz	r1, 80069e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 80069e6:	86c5      	strh	r5, [r0, #54]	; 0x36
 80069e8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80069ea:	3901      	subs	r1, #1
 80069ec:	b289      	uxth	r1, r1
 80069ee:	86c1      	strh	r1, [r0, #54]	; 0x36
 80069f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80069f4:	844c      	strh	r4, [r1, #34]	; 0x22
 80069f6:	e7ec      	b.n	80069d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80069f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	f7ff bf4b 	b.w	8006896 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08006a00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	2500      	movs	r5, #0
 8006a04:	4295      	cmp	r5, r2
 8006a06:	d011      	beq.n	8006a2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8006a08:	8bc4      	ldrh	r4, [r0, #30]
 8006a0a:	f831 6b02 	ldrh.w	r6, [r1], #2
 8006a0e:	4414      	add	r4, r2
 8006a10:	3c01      	subs	r4, #1
 8006a12:	1b64      	subs	r4, r4, r5
 8006a14:	b2a4      	uxth	r4, r4
 8006a16:	2c01      	cmp	r4, #1
 8006a18:	bf88      	it	hi
 8006a1a:	3c02      	subhi	r4, #2
 8006a1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006a20:	8b64      	ldrh	r4, [r4, #26]
 8006a22:	42b4      	cmp	r4, r6
 8006a24:	d117      	bne.n	8006a56 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8006a26:	3501      	adds	r5, #1
 8006a28:	b2ad      	uxth	r5, r5
 8006a2a:	e7eb      	b.n	8006a04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8006a2c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8006a30:	2400      	movs	r4, #0
 8006a32:	4413      	add	r3, r2
 8006a34:	b2a2      	uxth	r2, r4
 8006a36:	429a      	cmp	r2, r3
 8006a38:	da0f      	bge.n	8006a5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8006a3a:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8006a3c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8006a40:	4432      	add	r2, r6
 8006a42:	b292      	uxth	r2, r2
 8006a44:	2a09      	cmp	r2, #9
 8006a46:	bf88      	it	hi
 8006a48:	3a0a      	subhi	r2, #10
 8006a4a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006a4e:	3401      	adds	r4, #1
 8006a50:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8006a52:	42aa      	cmp	r2, r5
 8006a54:	d0ee      	beq.n	8006a34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8006a56:	2000      	movs	r0, #0
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	e7fc      	b.n	8006a58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08006a5e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8006a5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	4616      	mov	r6, r2
 8006a66:	1c8c      	adds	r4, r1, #2
 8006a68:	8809      	ldrh	r1, [r1, #0]
 8006a6a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8006a6e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8006a72:	42b3      	cmp	r3, r6
 8006a74:	d124      	bne.n	8006ac0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8006a76:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8006a7a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8006a7e:	f001 070f 	and.w	r7, r1, #15
 8006a82:	f8cd 8000 	str.w	r8, [sp]
 8006a86:	464b      	mov	r3, r9
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff ffb7 	bl	8006a00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8006a92:	4683      	mov	fp, r0
 8006a94:	b168      	cbz	r0, 8006ab2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8006a96:	eb0a 0109 	add.w	r1, sl, r9
 8006a9a:	4441      	add	r1, r8
 8006a9c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8006aa0:	463a      	mov	r2, r7
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f7ff ff53 	bl	8006950 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8006aaa:	4658      	mov	r0, fp
 8006aac:	b003      	add	sp, #12
 8006aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	eb07 010a 	add.w	r1, r7, sl
 8006ab6:	4449      	add	r1, r9
 8006ab8:	4441      	add	r1, r8
 8006aba:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8006abe:	e7d2      	b.n	8006a66 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8006ac0:	f04f 0b00 	mov.w	fp, #0
 8006ac4:	e7f1      	b.n	8006aaa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08006ac6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	8810      	ldrh	r0, [r2, #0]
 8006aca:	4298      	cmp	r0, r3
 8006acc:	d817      	bhi.n	8006afe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8006ace:	1e48      	subs	r0, r1, #1
 8006ad0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	d312      	bcc.n	8006afe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8006ad8:	2400      	movs	r4, #0
 8006ada:	428c      	cmp	r4, r1
 8006adc:	d20f      	bcs.n	8006afe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8006ade:	1860      	adds	r0, r4, r1
 8006ae0:	1040      	asrs	r0, r0, #1
 8006ae2:	0085      	lsls	r5, r0, #2
 8006ae4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8006ae8:	42b3      	cmp	r3, r6
 8006aea:	d902      	bls.n	8006af2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8006aec:	3001      	adds	r0, #1
 8006aee:	b284      	uxth	r4, r0
 8006af0:	e7f3      	b.n	8006ada <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8006af2:	d201      	bcs.n	8006af8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8006af4:	b281      	uxth	r1, r0
 8006af6:	e7f0      	b.n	8006ada <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8006af8:	442a      	add	r2, r5
 8006afa:	8850      	ldrh	r0, [r2, #2]
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	2000      	movs	r0, #0
 8006b00:	e7fc      	b.n	8006afc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08006b02 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8006b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b06:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8006b08:	886f      	ldrh	r7, [r5, #2]
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	087f      	lsrs	r7, r7, #1
 8006b0e:	260b      	movs	r6, #11
 8006b10:	3e01      	subs	r6, #1
 8006b12:	d013      	beq.n	8006b3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8006b14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006b16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8006b20:	4639      	mov	r1, r7
 8006b22:	4643      	mov	r3, r8
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff ffce 	bl	8006ac6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8006b2a:	b138      	cbz	r0, 8006b3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8006b2c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8006b30:	4642      	mov	r2, r8
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff ff93 	bl	8006a5e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1e9      	bne.n	8006b10 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b40 <_ZdlPvj>:
 8006b40:	f000 b812 	b.w	8006b68 <_ZdlPv>

08006b44 <__cxa_guard_acquire>:
 8006b44:	6803      	ldr	r3, [r0, #0]
 8006b46:	07db      	lsls	r3, r3, #31
 8006b48:	d406      	bmi.n	8006b58 <__cxa_guard_acquire+0x14>
 8006b4a:	7843      	ldrb	r3, [r0, #1]
 8006b4c:	b103      	cbz	r3, 8006b50 <__cxa_guard_acquire+0xc>
 8006b4e:	deff      	udf	#255	; 0xff
 8006b50:	2301      	movs	r3, #1
 8006b52:	7043      	strb	r3, [r0, #1]
 8006b54:	4618      	mov	r0, r3
 8006b56:	4770      	bx	lr
 8006b58:	2000      	movs	r0, #0
 8006b5a:	4770      	bx	lr

08006b5c <__cxa_guard_release>:
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	6003      	str	r3, [r0, #0]
 8006b60:	4770      	bx	lr

08006b62 <__cxa_pure_virtual>:
 8006b62:	b508      	push	{r3, lr}
 8006b64:	f000 f80e 	bl	8006b84 <_ZSt9terminatev>

08006b68 <_ZdlPv>:
 8006b68:	f000 b844 	b.w	8006bf4 <free>

08006b6c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006b6c:	b508      	push	{r3, lr}
 8006b6e:	4780      	blx	r0
 8006b70:	f000 f80d 	bl	8006b8e <abort>

08006b74 <_ZSt13get_terminatev>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <_ZSt13get_terminatev+0xc>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	f3bf 8f5b 	dmb	ish
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000010 	.word	0x20000010

08006b84 <_ZSt9terminatev>:
 8006b84:	b508      	push	{r3, lr}
 8006b86:	f7ff fff5 	bl	8006b74 <_ZSt13get_terminatev>
 8006b8a:	f7ff ffef 	bl	8006b6c <_ZN10__cxxabiv111__terminateEPFvvE>

08006b8e <abort>:
 8006b8e:	b508      	push	{r3, lr}
 8006b90:	2006      	movs	r0, #6
 8006b92:	f000 fa19 	bl	8006fc8 <raise>
 8006b96:	2001      	movs	r0, #1
 8006b98:	f7fa fc00 	bl	800139c <_exit>

08006b9c <__assert_func>:
 8006b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <__assert_func+0x2c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	68d8      	ldr	r0, [r3, #12]
 8006baa:	b14c      	cbz	r4, 8006bc0 <__assert_func+0x24>
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <__assert_func+0x30>)
 8006bae:	9100      	str	r1, [sp, #0]
 8006bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bb4:	4906      	ldr	r1, [pc, #24]	; (8006bd0 <__assert_func+0x34>)
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	f000 f962 	bl	8006e80 <fiprintf>
 8006bbc:	f7ff ffe7 	bl	8006b8e <abort>
 8006bc0:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <__assert_func+0x38>)
 8006bc2:	461c      	mov	r4, r3
 8006bc4:	e7f3      	b.n	8006bae <__assert_func+0x12>
 8006bc6:	bf00      	nop
 8006bc8:	2000006c 	.word	0x2000006c
 8006bcc:	08007f88 	.word	0x08007f88
 8006bd0:	08007f95 	.word	0x08007f95
 8006bd4:	08007fc3 	.word	0x08007fc3

08006bd8 <atexit>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4601      	mov	r1, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 ba90 	b.w	8007104 <__register_exitproc>

08006be4 <malloc>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <malloc+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f000 b82b 	b.w	8006c44 <_malloc_r>
 8006bee:	bf00      	nop
 8006bf0:	2000006c 	.word	0x2000006c

08006bf4 <free>:
 8006bf4:	4b02      	ldr	r3, [pc, #8]	; (8006c00 <free+0xc>)
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	f000 bae1 	b.w	80071c0 <_free_r>
 8006bfe:	bf00      	nop
 8006c00:	2000006c 	.word	0x2000006c

08006c04 <sbrk_aligned>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4e0e      	ldr	r6, [pc, #56]	; (8006c40 <sbrk_aligned+0x3c>)
 8006c08:	460c      	mov	r4, r1
 8006c0a:	6831      	ldr	r1, [r6, #0]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	b911      	cbnz	r1, 8006c16 <sbrk_aligned+0x12>
 8006c10:	f000 fa2a 	bl	8007068 <_sbrk_r>
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fa25 	bl	8007068 <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d00a      	beq.n	8006c38 <sbrk_aligned+0x34>
 8006c22:	1cc4      	adds	r4, r0, #3
 8006c24:	f024 0403 	bic.w	r4, r4, #3
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d007      	beq.n	8006c3c <sbrk_aligned+0x38>
 8006c2c:	1a21      	subs	r1, r4, r0
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 fa1a 	bl	8007068 <_sbrk_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d101      	bne.n	8006c3c <sbrk_aligned+0x38>
 8006c38:	f04f 34ff 	mov.w	r4, #4294967295
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	200008cc 	.word	0x200008cc

08006c44 <_malloc_r>:
 8006c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c48:	1ccd      	adds	r5, r1, #3
 8006c4a:	f025 0503 	bic.w	r5, r5, #3
 8006c4e:	3508      	adds	r5, #8
 8006c50:	2d0c      	cmp	r5, #12
 8006c52:	bf38      	it	cc
 8006c54:	250c      	movcc	r5, #12
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	4607      	mov	r7, r0
 8006c5a:	db01      	blt.n	8006c60 <_malloc_r+0x1c>
 8006c5c:	42a9      	cmp	r1, r5
 8006c5e:	d905      	bls.n	8006c6c <_malloc_r+0x28>
 8006c60:	230c      	movs	r3, #12
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	2600      	movs	r6, #0
 8006c66:	4630      	mov	r0, r6
 8006c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d40 <_malloc_r+0xfc>
 8006c70:	f000 f868 	bl	8006d44 <__malloc_lock>
 8006c74:	f8d8 3000 	ldr.w	r3, [r8]
 8006c78:	461c      	mov	r4, r3
 8006c7a:	bb5c      	cbnz	r4, 8006cd4 <_malloc_r+0x90>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7ff ffc0 	bl	8006c04 <sbrk_aligned>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	4604      	mov	r4, r0
 8006c88:	d155      	bne.n	8006d36 <_malloc_r+0xf2>
 8006c8a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c8e:	4626      	mov	r6, r4
 8006c90:	2e00      	cmp	r6, #0
 8006c92:	d145      	bne.n	8006d20 <_malloc_r+0xdc>
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	d048      	beq.n	8006d2a <_malloc_r+0xe6>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	eb04 0903 	add.w	r9, r4, r3
 8006ca2:	f000 f9e1 	bl	8007068 <_sbrk_r>
 8006ca6:	4581      	cmp	r9, r0
 8006ca8:	d13f      	bne.n	8006d2a <_malloc_r+0xe6>
 8006caa:	6821      	ldr	r1, [r4, #0]
 8006cac:	1a6d      	subs	r5, r5, r1
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ffa7 	bl	8006c04 <sbrk_aligned>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d037      	beq.n	8006d2a <_malloc_r+0xe6>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	442b      	add	r3, r5
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d038      	beq.n	8006d3a <_malloc_r+0xf6>
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	42a2      	cmp	r2, r4
 8006ccc:	d12b      	bne.n	8006d26 <_malloc_r+0xe2>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	e00f      	b.n	8006cf4 <_malloc_r+0xb0>
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	1b52      	subs	r2, r2, r5
 8006cd8:	d41f      	bmi.n	8006d1a <_malloc_r+0xd6>
 8006cda:	2a0b      	cmp	r2, #11
 8006cdc:	d917      	bls.n	8006d0e <_malloc_r+0xca>
 8006cde:	1961      	adds	r1, r4, r5
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	6025      	str	r5, [r4, #0]
 8006ce4:	bf18      	it	ne
 8006ce6:	6059      	strne	r1, [r3, #4]
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	bf08      	it	eq
 8006cec:	f8c8 1000 	streq.w	r1, [r8]
 8006cf0:	5162      	str	r2, [r4, r5]
 8006cf2:	604b      	str	r3, [r1, #4]
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f104 060b 	add.w	r6, r4, #11
 8006cfa:	f000 f829 	bl	8006d50 <__malloc_unlock>
 8006cfe:	f026 0607 	bic.w	r6, r6, #7
 8006d02:	1d23      	adds	r3, r4, #4
 8006d04:	1af2      	subs	r2, r6, r3
 8006d06:	d0ae      	beq.n	8006c66 <_malloc_r+0x22>
 8006d08:	1b9b      	subs	r3, r3, r6
 8006d0a:	50a3      	str	r3, [r4, r2]
 8006d0c:	e7ab      	b.n	8006c66 <_malloc_r+0x22>
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	6862      	ldr	r2, [r4, #4]
 8006d12:	d1dd      	bne.n	8006cd0 <_malloc_r+0x8c>
 8006d14:	f8c8 2000 	str.w	r2, [r8]
 8006d18:	e7ec      	b.n	8006cf4 <_malloc_r+0xb0>
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	6864      	ldr	r4, [r4, #4]
 8006d1e:	e7ac      	b.n	8006c7a <_malloc_r+0x36>
 8006d20:	4634      	mov	r4, r6
 8006d22:	6876      	ldr	r6, [r6, #4]
 8006d24:	e7b4      	b.n	8006c90 <_malloc_r+0x4c>
 8006d26:	4613      	mov	r3, r2
 8006d28:	e7cc      	b.n	8006cc4 <_malloc_r+0x80>
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	603b      	str	r3, [r7, #0]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f000 f80e 	bl	8006d50 <__malloc_unlock>
 8006d34:	e797      	b.n	8006c66 <_malloc_r+0x22>
 8006d36:	6025      	str	r5, [r4, #0]
 8006d38:	e7dc      	b.n	8006cf4 <_malloc_r+0xb0>
 8006d3a:	605b      	str	r3, [r3, #4]
 8006d3c:	deff      	udf	#255	; 0xff
 8006d3e:	bf00      	nop
 8006d40:	200008c8 	.word	0x200008c8

08006d44 <__malloc_lock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__malloc_lock+0x8>)
 8006d46:	f000 b9db 	b.w	8007100 <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	20000a11 	.word	0x20000a11

08006d50 <__malloc_unlock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__malloc_unlock+0x8>)
 8006d52:	f000 b9d6 	b.w	8007102 <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000a11 	.word	0x20000a11

08006d5c <std>:
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	4604      	mov	r4, r0
 8006d62:	e9c0 3300 	strd	r3, r3, [r0]
 8006d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6a:	6083      	str	r3, [r0, #8]
 8006d6c:	8181      	strh	r1, [r0, #12]
 8006d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d70:	81c2      	strh	r2, [r0, #14]
 8006d72:	6183      	str	r3, [r0, #24]
 8006d74:	4619      	mov	r1, r3
 8006d76:	2208      	movs	r2, #8
 8006d78:	305c      	adds	r0, #92	; 0x5c
 8006d7a:	f000 f8f4 	bl	8006f66 <memset>
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <std+0x38>)
 8006d80:	6263      	str	r3, [r4, #36]	; 0x24
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <std+0x3c>)
 8006d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <std+0x40>)
 8006d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <std+0x44>)
 8006d8c:	6224      	str	r4, [r4, #32]
 8006d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	bf00      	nop
 8006d94:	08006ee1 	.word	0x08006ee1
 8006d98:	08006f03 	.word	0x08006f03
 8006d9c:	08006f3b 	.word	0x08006f3b
 8006da0:	08006f5f 	.word	0x08006f5f

08006da4 <stdio_exit_handler>:
 8006da4:	4a02      	ldr	r2, [pc, #8]	; (8006db0 <stdio_exit_handler+0xc>)
 8006da6:	4903      	ldr	r1, [pc, #12]	; (8006db4 <stdio_exit_handler+0x10>)
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <stdio_exit_handler+0x14>)
 8006daa:	f000 b87b 	b.w	8006ea4 <_fwalk_sglue>
 8006dae:	bf00      	nop
 8006db0:	20000014 	.word	0x20000014
 8006db4:	0800790d 	.word	0x0800790d
 8006db8:	20000020 	.word	0x20000020

08006dbc <cleanup_stdio>:
 8006dbc:	6841      	ldr	r1, [r0, #4]
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <cleanup_stdio+0x34>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	d001      	beq.n	8006dcc <cleanup_stdio+0x10>
 8006dc8:	f000 fda0 	bl	800790c <_fflush_r>
 8006dcc:	68a1      	ldr	r1, [r4, #8]
 8006dce:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <cleanup_stdio+0x38>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <cleanup_stdio+0x1e>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fd99 	bl	800790c <_fflush_r>
 8006dda:	68e1      	ldr	r1, [r4, #12]
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <cleanup_stdio+0x3c>)
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d004      	beq.n	8006dec <cleanup_stdio+0x30>
 8006de2:	4620      	mov	r0, r4
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f000 bd90 	b.w	800790c <_fflush_r>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	200008d0 	.word	0x200008d0
 8006df4:	20000938 	.word	0x20000938
 8006df8:	200009a0 	.word	0x200009a0

08006dfc <global_stdio_init.part.0>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <global_stdio_init.part.0+0x30>)
 8006e00:	4c0b      	ldr	r4, [pc, #44]	; (8006e30 <global_stdio_init.part.0+0x34>)
 8006e02:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <global_stdio_init.part.0+0x38>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	f7ff ffa6 	bl	8006d5c <std>
 8006e10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e14:	2201      	movs	r2, #1
 8006e16:	2109      	movs	r1, #9
 8006e18:	f7ff ffa0 	bl	8006d5c <std>
 8006e1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e20:	2202      	movs	r2, #2
 8006e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e26:	2112      	movs	r1, #18
 8006e28:	f7ff bf98 	b.w	8006d5c <std>
 8006e2c:	20000a08 	.word	0x20000a08
 8006e30:	200008d0 	.word	0x200008d0
 8006e34:	08006da5 	.word	0x08006da5

08006e38 <__sfp_lock_acquire>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__sfp_lock_acquire+0x8>)
 8006e3a:	f000 b961 	b.w	8007100 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20000a12 	.word	0x20000a12

08006e44 <__sfp_lock_release>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__sfp_lock_release+0x8>)
 8006e46:	f000 b95c 	b.w	8007102 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20000a12 	.word	0x20000a12

08006e50 <__sinit>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	f7ff fff0 	bl	8006e38 <__sfp_lock_acquire>
 8006e58:	6a23      	ldr	r3, [r4, #32]
 8006e5a:	b11b      	cbz	r3, 8006e64 <__sinit+0x14>
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f7ff bff0 	b.w	8006e44 <__sfp_lock_release>
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <__sinit+0x28>)
 8006e66:	6223      	str	r3, [r4, #32]
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <__sinit+0x2c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f5      	bne.n	8006e5c <__sinit+0xc>
 8006e70:	f7ff ffc4 	bl	8006dfc <global_stdio_init.part.0>
 8006e74:	e7f2      	b.n	8006e5c <__sinit+0xc>
 8006e76:	bf00      	nop
 8006e78:	08006dbd 	.word	0x08006dbd
 8006e7c:	20000a08 	.word	0x20000a08

08006e80 <fiprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b503      	push	{r0, r1, lr}
 8006e84:	4601      	mov	r1, r0
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	4805      	ldr	r0, [pc, #20]	; (8006ea0 <fiprintf+0x20>)
 8006e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f000 fa0b 	bl	80072ac <_vfiprintf_r>
 8006e96:	b002      	add	sp, #8
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4770      	bx	lr
 8006ea0:	2000006c 	.word	0x2000006c

08006ea4 <_fwalk_sglue>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	4688      	mov	r8, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb8:	d505      	bpl.n	8006ec6 <_fwalk_sglue+0x22>
 8006eba:	6824      	ldr	r4, [r4, #0]
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	d1f7      	bne.n	8006eb0 <_fwalk_sglue+0xc>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d907      	bls.n	8006edc <_fwalk_sglue+0x38>
 8006ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	d003      	beq.n	8006edc <_fwalk_sglue+0x38>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	4306      	orrs	r6, r0
 8006edc:	3568      	adds	r5, #104	; 0x68
 8006ede:	e7e9      	b.n	8006eb4 <_fwalk_sglue+0x10>

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 f898 	bl	800701c <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f000 f86c 	bl	8006ff8 <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b8a7 	b.w	8007088 <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f859 	bl	8006ff8 <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b839 	b.w	8006fd8 <_close_r>

08006f66 <memset>:
 8006f66:	4402      	add	r2, r0
 8006f68:	4603      	mov	r3, r0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d100      	bne.n	8006f70 <memset+0xa>
 8006f6e:	4770      	bx	lr
 8006f70:	f803 1b01 	strb.w	r1, [r3], #1
 8006f74:	e7f9      	b.n	8006f6a <memset+0x4>

08006f76 <_raise_r>:
 8006f76:	291f      	cmp	r1, #31
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	d904      	bls.n	8006f8a <_raise_r+0x14>
 8006f80:	2316      	movs	r3, #22
 8006f82:	6003      	str	r3, [r0, #0]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
 8006f8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f8c:	b112      	cbz	r2, 8006f94 <_raise_r+0x1e>
 8006f8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f92:	b94b      	cbnz	r3, 8006fa8 <_raise_r+0x32>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f865 	bl	8007064 <_getpid_r>
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa4:	f000 b84c 	b.w	8007040 <_kill_r>
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d00a      	beq.n	8006fc2 <_raise_r+0x4c>
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	d103      	bne.n	8006fb8 <_raise_r+0x42>
 8006fb0:	2316      	movs	r3, #22
 8006fb2:	6003      	str	r3, [r0, #0]
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	e7e7      	b.n	8006f88 <_raise_r+0x12>
 8006fb8:	2400      	movs	r4, #0
 8006fba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	4798      	blx	r3
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e7e0      	b.n	8006f88 <_raise_r+0x12>
	...

08006fc8 <raise>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <raise+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f7ff bfd2 	b.w	8006f76 <_raise_r>
 8006fd2:	bf00      	nop
 8006fd4:	2000006c 	.word	0x2000006c

08006fd8 <_close_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_close_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fa1d 	bl	8001422 <_close>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_close_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_close_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000a0c 	.word	0x20000a0c

08006ff8 <_lseek_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	; (8007018 <_lseek_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fa fa32 	bl	8001470 <_lseek>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_lseek_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_lseek_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000a0c 	.word	0x20000a0c

0800701c <_read_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	; (800703c <_read_r+0x20>)
 8007020:	4604      	mov	r4, r0
 8007022:	4608      	mov	r0, r1
 8007024:	4611      	mov	r1, r2
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7fa f9c0 	bl	80013b0 <_read>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_read_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_read_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000a0c 	.word	0x20000a0c

08007040 <_kill_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_kill_r+0x20>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa f995 	bl	800137c <_kill>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_kill_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_kill_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	20000a0c 	.word	0x20000a0c

08007064 <_getpid_r>:
 8007064:	f7fa b982 	b.w	800136c <_getpid>

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	; (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fa fa0a 	bl	800148c <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000a0c 	.word	0x20000a0c

08007088 <_write_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	; (80070a8 <_write_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fa f9a7 	bl	80013ea <_write>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_write_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_write_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000a0c 	.word	0x20000a0c

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000006c 	.word	0x2000006c

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4d0d      	ldr	r5, [pc, #52]	; (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2600      	movs	r6, #0
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4d0b      	ldr	r5, [pc, #44]	; (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	; (80070fc <__libc_init_array+0x44>)
 80070cc:	f000 fd60 	bl	8007b90 <_init>
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2600      	movs	r6, #0
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	08009228 	.word	0x08009228
 80070f4:	08009228 	.word	0x08009228
 80070f8:	08009228 	.word	0x08009228
 80070fc:	08009238 	.word	0x08009238

08007100 <__retarget_lock_acquire_recursive>:
 8007100:	4770      	bx	lr

08007102 <__retarget_lock_release_recursive>:
 8007102:	4770      	bx	lr

08007104 <__register_exitproc>:
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80071bc <__register_exitproc+0xb8>
 800710c:	4606      	mov	r6, r0
 800710e:	f8d8 0000 	ldr.w	r0, [r8]
 8007112:	461f      	mov	r7, r3
 8007114:	460d      	mov	r5, r1
 8007116:	4691      	mov	r9, r2
 8007118:	f7ff fff2 	bl	8007100 <__retarget_lock_acquire_recursive>
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <__register_exitproc+0xa8>)
 800711e:	681c      	ldr	r4, [r3, #0]
 8007120:	b934      	cbnz	r4, 8007130 <__register_exitproc+0x2c>
 8007122:	4c23      	ldr	r4, [pc, #140]	; (80071b0 <__register_exitproc+0xac>)
 8007124:	601c      	str	r4, [r3, #0]
 8007126:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <__register_exitproc+0xb0>)
 8007128:	b113      	cbz	r3, 8007130 <__register_exitproc+0x2c>
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	2b1f      	cmp	r3, #31
 8007134:	dd07      	ble.n	8007146 <__register_exitproc+0x42>
 8007136:	f8d8 0000 	ldr.w	r0, [r8]
 800713a:	f7ff ffe2 	bl	8007102 <__retarget_lock_release_recursive>
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007146:	b32e      	cbz	r6, 8007194 <__register_exitproc+0x90>
 8007148:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800714c:	b968      	cbnz	r0, 800716a <__register_exitproc+0x66>
 800714e:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <__register_exitproc+0xb4>)
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <__register_exitproc+0x32>
 8007154:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007158:	f7ff fd44 	bl	8006be4 <malloc>
 800715c:	2800      	cmp	r0, #0
 800715e:	d0ea      	beq.n	8007136 <__register_exitproc+0x32>
 8007160:	2300      	movs	r3, #0
 8007162:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007166:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007170:	2201      	movs	r2, #1
 8007172:	409a      	lsls	r2, r3
 8007174:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007178:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007182:	2e02      	cmp	r6, #2
 8007184:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007188:	bf02      	ittt	eq
 800718a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800718e:	4313      	orreq	r3, r2
 8007190:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	f8d8 0000 	ldr.w	r0, [r8]
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	3302      	adds	r3, #2
 800719e:	6062      	str	r2, [r4, #4]
 80071a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80071a4:	f7ff ffad 	bl	8007102 <__retarget_lock_release_recursive>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7ca      	b.n	8007142 <__register_exitproc+0x3e>
 80071ac:	20000aa0 	.word	0x20000aa0
 80071b0:	20000a14 	.word	0x20000a14
 80071b4:	08007fc4 	.word	0x08007fc4
 80071b8:	08006be5 	.word	0x08006be5
 80071bc:	20000070 	.word	0x20000070

080071c0 <_free_r>:
 80071c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d044      	beq.n	8007250 <_free_r+0x90>
 80071c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ca:	9001      	str	r0, [sp, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f1a1 0404 	sub.w	r4, r1, #4
 80071d2:	bfb8      	it	lt
 80071d4:	18e4      	addlt	r4, r4, r3
 80071d6:	f7ff fdb5 	bl	8006d44 <__malloc_lock>
 80071da:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <_free_r+0x94>)
 80071dc:	9801      	ldr	r0, [sp, #4]
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	b933      	cbnz	r3, 80071f0 <_free_r+0x30>
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	6014      	str	r4, [r2, #0]
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ec:	f7ff bdb0 	b.w	8006d50 <__malloc_unlock>
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d908      	bls.n	8007206 <_free_r+0x46>
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf01      	itttt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	1949      	addeq	r1, r1, r5
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	e7ed      	b.n	80071e2 <_free_r+0x22>
 8007206:	461a      	mov	r2, r3
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b10b      	cbz	r3, 8007210 <_free_r+0x50>
 800720c:	42a3      	cmp	r3, r4
 800720e:	d9fa      	bls.n	8007206 <_free_r+0x46>
 8007210:	6811      	ldr	r1, [r2, #0]
 8007212:	1855      	adds	r5, r2, r1
 8007214:	42a5      	cmp	r5, r4
 8007216:	d10b      	bne.n	8007230 <_free_r+0x70>
 8007218:	6824      	ldr	r4, [r4, #0]
 800721a:	4421      	add	r1, r4
 800721c:	1854      	adds	r4, r2, r1
 800721e:	42a3      	cmp	r3, r4
 8007220:	6011      	str	r1, [r2, #0]
 8007222:	d1e0      	bne.n	80071e6 <_free_r+0x26>
 8007224:	681c      	ldr	r4, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	6053      	str	r3, [r2, #4]
 800722a:	440c      	add	r4, r1
 800722c:	6014      	str	r4, [r2, #0]
 800722e:	e7da      	b.n	80071e6 <_free_r+0x26>
 8007230:	d902      	bls.n	8007238 <_free_r+0x78>
 8007232:	230c      	movs	r3, #12
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	e7d6      	b.n	80071e6 <_free_r+0x26>
 8007238:	6825      	ldr	r5, [r4, #0]
 800723a:	1961      	adds	r1, r4, r5
 800723c:	428b      	cmp	r3, r1
 800723e:	bf04      	itt	eq
 8007240:	6819      	ldreq	r1, [r3, #0]
 8007242:	685b      	ldreq	r3, [r3, #4]
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	bf04      	itt	eq
 8007248:	1949      	addeq	r1, r1, r5
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	6054      	str	r4, [r2, #4]
 800724e:	e7ca      	b.n	80071e6 <_free_r+0x26>
 8007250:	b003      	add	sp, #12
 8007252:	bd30      	pop	{r4, r5, pc}
 8007254:	200008c8 	.word	0x200008c8

08007258 <__sfputc_r>:
 8007258:	6893      	ldr	r3, [r2, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	b410      	push	{r4}
 8007260:	6093      	str	r3, [r2, #8]
 8007262:	da08      	bge.n	8007276 <__sfputc_r+0x1e>
 8007264:	6994      	ldr	r4, [r2, #24]
 8007266:	42a3      	cmp	r3, r4
 8007268:	db01      	blt.n	800726e <__sfputc_r+0x16>
 800726a:	290a      	cmp	r1, #10
 800726c:	d103      	bne.n	8007276 <__sfputc_r+0x1e>
 800726e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007272:	f000 bb73 	b.w	800795c <__swbuf_r>
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	1c58      	adds	r0, r3, #1
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	7019      	strb	r1, [r3, #0]
 800727e:	4608      	mov	r0, r1
 8007280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007284:	4770      	bx	lr

08007286 <__sfputs_r>:
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4614      	mov	r4, r2
 800728e:	18d5      	adds	r5, r2, r3
 8007290:	42ac      	cmp	r4, r5
 8007292:	d101      	bne.n	8007298 <__sfputs_r+0x12>
 8007294:	2000      	movs	r0, #0
 8007296:	e007      	b.n	80072a8 <__sfputs_r+0x22>
 8007298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729c:	463a      	mov	r2, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ffda 	bl	8007258 <__sfputc_r>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d1f3      	bne.n	8007290 <__sfputs_r+0xa>
 80072a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072ac <_vfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460d      	mov	r5, r1
 80072b2:	b09d      	sub	sp, #116	; 0x74
 80072b4:	4614      	mov	r4, r2
 80072b6:	4698      	mov	r8, r3
 80072b8:	4606      	mov	r6, r0
 80072ba:	b118      	cbz	r0, 80072c4 <_vfiprintf_r+0x18>
 80072bc:	6a03      	ldr	r3, [r0, #32]
 80072be:	b90b      	cbnz	r3, 80072c4 <_vfiprintf_r+0x18>
 80072c0:	f7ff fdc6 	bl	8006e50 <__sinit>
 80072c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c6:	07d9      	lsls	r1, r3, #31
 80072c8:	d405      	bmi.n	80072d6 <_vfiprintf_r+0x2a>
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	059a      	lsls	r2, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_vfiprintf_r+0x2a>
 80072d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072d2:	f7ff ff15 	bl	8007100 <__retarget_lock_acquire_recursive>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	071b      	lsls	r3, r3, #28
 80072da:	d501      	bpl.n	80072e0 <_vfiprintf_r+0x34>
 80072dc:	692b      	ldr	r3, [r5, #16]
 80072de:	b99b      	cbnz	r3, 8007308 <_vfiprintf_r+0x5c>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 fb78 	bl	80079d8 <__swsetup_r>
 80072e8:	b170      	cbz	r0, 8007308 <_vfiprintf_r+0x5c>
 80072ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ec:	07dc      	lsls	r4, r3, #31
 80072ee:	d504      	bpl.n	80072fa <_vfiprintf_r+0x4e>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	b01d      	add	sp, #116	; 0x74
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	0598      	lsls	r0, r3, #22
 80072fe:	d4f7      	bmi.n	80072f0 <_vfiprintf_r+0x44>
 8007300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007302:	f7ff fefe 	bl	8007102 <__retarget_lock_release_recursive>
 8007306:	e7f3      	b.n	80072f0 <_vfiprintf_r+0x44>
 8007308:	2300      	movs	r3, #0
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	2320      	movs	r3, #32
 800730e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007312:	f8cd 800c 	str.w	r8, [sp, #12]
 8007316:	2330      	movs	r3, #48	; 0x30
 8007318:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074cc <_vfiprintf_r+0x220>
 800731c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007320:	f04f 0901 	mov.w	r9, #1
 8007324:	4623      	mov	r3, r4
 8007326:	469a      	mov	sl, r3
 8007328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800732c:	b10a      	cbz	r2, 8007332 <_vfiprintf_r+0x86>
 800732e:	2a25      	cmp	r2, #37	; 0x25
 8007330:	d1f9      	bne.n	8007326 <_vfiprintf_r+0x7a>
 8007332:	ebba 0b04 	subs.w	fp, sl, r4
 8007336:	d00b      	beq.n	8007350 <_vfiprintf_r+0xa4>
 8007338:	465b      	mov	r3, fp
 800733a:	4622      	mov	r2, r4
 800733c:	4629      	mov	r1, r5
 800733e:	4630      	mov	r0, r6
 8007340:	f7ff ffa1 	bl	8007286 <__sfputs_r>
 8007344:	3001      	adds	r0, #1
 8007346:	f000 80a9 	beq.w	800749c <_vfiprintf_r+0x1f0>
 800734a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800734c:	445a      	add	r2, fp
 800734e:	9209      	str	r2, [sp, #36]	; 0x24
 8007350:	f89a 3000 	ldrb.w	r3, [sl]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80a1 	beq.w	800749c <_vfiprintf_r+0x1f0>
 800735a:	2300      	movs	r3, #0
 800735c:	f04f 32ff 	mov.w	r2, #4294967295
 8007360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007364:	f10a 0a01 	add.w	sl, sl, #1
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007370:	931a      	str	r3, [sp, #104]	; 0x68
 8007372:	4654      	mov	r4, sl
 8007374:	2205      	movs	r2, #5
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	4854      	ldr	r0, [pc, #336]	; (80074cc <_vfiprintf_r+0x220>)
 800737c:	f7f8 ff48 	bl	8000210 <memchr>
 8007380:	9a04      	ldr	r2, [sp, #16]
 8007382:	b9d8      	cbnz	r0, 80073bc <_vfiprintf_r+0x110>
 8007384:	06d1      	lsls	r1, r2, #27
 8007386:	bf44      	itt	mi
 8007388:	2320      	movmi	r3, #32
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738e:	0713      	lsls	r3, r2, #28
 8007390:	bf44      	itt	mi
 8007392:	232b      	movmi	r3, #43	; 0x2b
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007398:	f89a 3000 	ldrb.w	r3, [sl]
 800739c:	2b2a      	cmp	r3, #42	; 0x2a
 800739e:	d015      	beq.n	80073cc <_vfiprintf_r+0x120>
 80073a0:	9a07      	ldr	r2, [sp, #28]
 80073a2:	4654      	mov	r4, sl
 80073a4:	2000      	movs	r0, #0
 80073a6:	f04f 0c0a 	mov.w	ip, #10
 80073aa:	4621      	mov	r1, r4
 80073ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b0:	3b30      	subs	r3, #48	; 0x30
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d94d      	bls.n	8007452 <_vfiprintf_r+0x1a6>
 80073b6:	b1b0      	cbz	r0, 80073e6 <_vfiprintf_r+0x13a>
 80073b8:	9207      	str	r2, [sp, #28]
 80073ba:	e014      	b.n	80073e6 <_vfiprintf_r+0x13a>
 80073bc:	eba0 0308 	sub.w	r3, r0, r8
 80073c0:	fa09 f303 	lsl.w	r3, r9, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	46a2      	mov	sl, r4
 80073ca:	e7d2      	b.n	8007372 <_vfiprintf_r+0xc6>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	1d19      	adds	r1, r3, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfbb      	ittet	lt
 80073d8:	425b      	neglt	r3, r3
 80073da:	f042 0202 	orrlt.w	r2, r2, #2
 80073de:	9307      	strge	r3, [sp, #28]
 80073e0:	9307      	strlt	r3, [sp, #28]
 80073e2:	bfb8      	it	lt
 80073e4:	9204      	strlt	r2, [sp, #16]
 80073e6:	7823      	ldrb	r3, [r4, #0]
 80073e8:	2b2e      	cmp	r3, #46	; 0x2e
 80073ea:	d10c      	bne.n	8007406 <_vfiprintf_r+0x15a>
 80073ec:	7863      	ldrb	r3, [r4, #1]
 80073ee:	2b2a      	cmp	r3, #42	; 0x2a
 80073f0:	d134      	bne.n	800745c <_vfiprintf_r+0x1b0>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	1d1a      	adds	r2, r3, #4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	9203      	str	r2, [sp, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfb8      	it	lt
 80073fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007402:	3402      	adds	r4, #2
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074dc <_vfiprintf_r+0x230>
 800740a:	7821      	ldrb	r1, [r4, #0]
 800740c:	2203      	movs	r2, #3
 800740e:	4650      	mov	r0, sl
 8007410:	f7f8 fefe 	bl	8000210 <memchr>
 8007414:	b138      	cbz	r0, 8007426 <_vfiprintf_r+0x17a>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	eba0 000a 	sub.w	r0, r0, sl
 800741c:	2240      	movs	r2, #64	; 0x40
 800741e:	4082      	lsls	r2, r0
 8007420:	4313      	orrs	r3, r2
 8007422:	3401      	adds	r4, #1
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742a:	4829      	ldr	r0, [pc, #164]	; (80074d0 <_vfiprintf_r+0x224>)
 800742c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007430:	2206      	movs	r2, #6
 8007432:	f7f8 feed 	bl	8000210 <memchr>
 8007436:	2800      	cmp	r0, #0
 8007438:	d03f      	beq.n	80074ba <_vfiprintf_r+0x20e>
 800743a:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <_vfiprintf_r+0x228>)
 800743c:	bb1b      	cbnz	r3, 8007486 <_vfiprintf_r+0x1da>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	3307      	adds	r3, #7
 8007442:	f023 0307 	bic.w	r3, r3, #7
 8007446:	3308      	adds	r3, #8
 8007448:	9303      	str	r3, [sp, #12]
 800744a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744c:	443b      	add	r3, r7
 800744e:	9309      	str	r3, [sp, #36]	; 0x24
 8007450:	e768      	b.n	8007324 <_vfiprintf_r+0x78>
 8007452:	fb0c 3202 	mla	r2, ip, r2, r3
 8007456:	460c      	mov	r4, r1
 8007458:	2001      	movs	r0, #1
 800745a:	e7a6      	b.n	80073aa <_vfiprintf_r+0xfe>
 800745c:	2300      	movs	r3, #0
 800745e:	3401      	adds	r4, #1
 8007460:	9305      	str	r3, [sp, #20]
 8007462:	4619      	mov	r1, r3
 8007464:	f04f 0c0a 	mov.w	ip, #10
 8007468:	4620      	mov	r0, r4
 800746a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800746e:	3a30      	subs	r2, #48	; 0x30
 8007470:	2a09      	cmp	r2, #9
 8007472:	d903      	bls.n	800747c <_vfiprintf_r+0x1d0>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0c6      	beq.n	8007406 <_vfiprintf_r+0x15a>
 8007478:	9105      	str	r1, [sp, #20]
 800747a:	e7c4      	b.n	8007406 <_vfiprintf_r+0x15a>
 800747c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007480:	4604      	mov	r4, r0
 8007482:	2301      	movs	r3, #1
 8007484:	e7f0      	b.n	8007468 <_vfiprintf_r+0x1bc>
 8007486:	ab03      	add	r3, sp, #12
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	462a      	mov	r2, r5
 800748c:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <_vfiprintf_r+0x22c>)
 800748e:	a904      	add	r1, sp, #16
 8007490:	4630      	mov	r0, r6
 8007492:	f3af 8000 	nop.w
 8007496:	4607      	mov	r7, r0
 8007498:	1c78      	adds	r0, r7, #1
 800749a:	d1d6      	bne.n	800744a <_vfiprintf_r+0x19e>
 800749c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	d405      	bmi.n	80074ae <_vfiprintf_r+0x202>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	059a      	lsls	r2, r3, #22
 80074a6:	d402      	bmi.n	80074ae <_vfiprintf_r+0x202>
 80074a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074aa:	f7ff fe2a 	bl	8007102 <__retarget_lock_release_recursive>
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	065b      	lsls	r3, r3, #25
 80074b2:	f53f af1d 	bmi.w	80072f0 <_vfiprintf_r+0x44>
 80074b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b8:	e71c      	b.n	80072f4 <_vfiprintf_r+0x48>
 80074ba:	ab03      	add	r3, sp, #12
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	462a      	mov	r2, r5
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <_vfiprintf_r+0x22c>)
 80074c2:	a904      	add	r1, sp, #16
 80074c4:	4630      	mov	r0, r6
 80074c6:	f000 f879 	bl	80075bc <_printf_i>
 80074ca:	e7e4      	b.n	8007496 <_vfiprintf_r+0x1ea>
 80074cc:	08007fc8 	.word	0x08007fc8
 80074d0:	08007fd2 	.word	0x08007fd2
 80074d4:	00000000 	.word	0x00000000
 80074d8:	08007287 	.word	0x08007287
 80074dc:	08007fce 	.word	0x08007fce

080074e0 <_printf_common>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	4616      	mov	r6, r2
 80074e6:	4699      	mov	r9, r3
 80074e8:	688a      	ldr	r2, [r1, #8]
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bfb8      	it	lt
 80074f4:	4613      	movlt	r3, r2
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074fc:	4607      	mov	r7, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b10a      	cbz	r2, 8007506 <_printf_common+0x26>
 8007502:	3301      	adds	r3, #1
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	0699      	lsls	r1, r3, #26
 800750a:	bf42      	ittt	mi
 800750c:	6833      	ldrmi	r3, [r6, #0]
 800750e:	3302      	addmi	r3, #2
 8007510:	6033      	strmi	r3, [r6, #0]
 8007512:	6825      	ldr	r5, [r4, #0]
 8007514:	f015 0506 	ands.w	r5, r5, #6
 8007518:	d106      	bne.n	8007528 <_printf_common+0x48>
 800751a:	f104 0a19 	add.w	sl, r4, #25
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	6832      	ldr	r2, [r6, #0]
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc26      	bgt.n	8007576 <_printf_common+0x96>
 8007528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800752c:	1e13      	subs	r3, r2, #0
 800752e:	6822      	ldr	r2, [r4, #0]
 8007530:	bf18      	it	ne
 8007532:	2301      	movne	r3, #1
 8007534:	0692      	lsls	r2, r2, #26
 8007536:	d42b      	bmi.n	8007590 <_printf_common+0xb0>
 8007538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800753c:	4649      	mov	r1, r9
 800753e:	4638      	mov	r0, r7
 8007540:	47c0      	blx	r8
 8007542:	3001      	adds	r0, #1
 8007544:	d01e      	beq.n	8007584 <_printf_common+0xa4>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	6922      	ldr	r2, [r4, #16]
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	2b04      	cmp	r3, #4
 8007550:	bf02      	ittt	eq
 8007552:	68e5      	ldreq	r5, [r4, #12]
 8007554:	6833      	ldreq	r3, [r6, #0]
 8007556:	1aed      	subeq	r5, r5, r3
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	bf0c      	ite	eq
 800755c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007560:	2500      	movne	r5, #0
 8007562:	4293      	cmp	r3, r2
 8007564:	bfc4      	itt	gt
 8007566:	1a9b      	subgt	r3, r3, r2
 8007568:	18ed      	addgt	r5, r5, r3
 800756a:	2600      	movs	r6, #0
 800756c:	341a      	adds	r4, #26
 800756e:	42b5      	cmp	r5, r6
 8007570:	d11a      	bne.n	80075a8 <_printf_common+0xc8>
 8007572:	2000      	movs	r0, #0
 8007574:	e008      	b.n	8007588 <_printf_common+0xa8>
 8007576:	2301      	movs	r3, #1
 8007578:	4652      	mov	r2, sl
 800757a:	4649      	mov	r1, r9
 800757c:	4638      	mov	r0, r7
 800757e:	47c0      	blx	r8
 8007580:	3001      	adds	r0, #1
 8007582:	d103      	bne.n	800758c <_printf_common+0xac>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	3501      	adds	r5, #1
 800758e:	e7c6      	b.n	800751e <_printf_common+0x3e>
 8007590:	18e1      	adds	r1, r4, r3
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	2030      	movs	r0, #48	; 0x30
 8007596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800759a:	4422      	add	r2, r4
 800759c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075a4:	3302      	adds	r3, #2
 80075a6:	e7c7      	b.n	8007538 <_printf_common+0x58>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4622      	mov	r2, r4
 80075ac:	4649      	mov	r1, r9
 80075ae:	4638      	mov	r0, r7
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d0e6      	beq.n	8007584 <_printf_common+0xa4>
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7d9      	b.n	800756e <_printf_common+0x8e>
	...

080075bc <_printf_i>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	7e0f      	ldrb	r7, [r1, #24]
 80075c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075c4:	2f78      	cmp	r7, #120	; 0x78
 80075c6:	4691      	mov	r9, r2
 80075c8:	4680      	mov	r8, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	469a      	mov	sl, r3
 80075ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075d2:	d807      	bhi.n	80075e4 <_printf_i+0x28>
 80075d4:	2f62      	cmp	r7, #98	; 0x62
 80075d6:	d80a      	bhi.n	80075ee <_printf_i+0x32>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	f000 80d4 	beq.w	8007786 <_printf_i+0x1ca>
 80075de:	2f58      	cmp	r7, #88	; 0x58
 80075e0:	f000 80c0 	beq.w	8007764 <_printf_i+0x1a8>
 80075e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075ec:	e03a      	b.n	8007664 <_printf_i+0xa8>
 80075ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075f2:	2b15      	cmp	r3, #21
 80075f4:	d8f6      	bhi.n	80075e4 <_printf_i+0x28>
 80075f6:	a101      	add	r1, pc, #4	; (adr r1, 80075fc <_printf_i+0x40>)
 80075f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075fc:	08007655 	.word	0x08007655
 8007600:	08007669 	.word	0x08007669
 8007604:	080075e5 	.word	0x080075e5
 8007608:	080075e5 	.word	0x080075e5
 800760c:	080075e5 	.word	0x080075e5
 8007610:	080075e5 	.word	0x080075e5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075e5 	.word	0x080075e5
 800761c:	080075e5 	.word	0x080075e5
 8007620:	080075e5 	.word	0x080075e5
 8007624:	080075e5 	.word	0x080075e5
 8007628:	0800776d 	.word	0x0800776d
 800762c:	08007695 	.word	0x08007695
 8007630:	08007727 	.word	0x08007727
 8007634:	080075e5 	.word	0x080075e5
 8007638:	080075e5 	.word	0x080075e5
 800763c:	0800778f 	.word	0x0800778f
 8007640:	080075e5 	.word	0x080075e5
 8007644:	08007695 	.word	0x08007695
 8007648:	080075e5 	.word	0x080075e5
 800764c:	080075e5 	.word	0x080075e5
 8007650:	0800772f 	.word	0x0800772f
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	602a      	str	r2, [r5, #0]
 800765c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007664:	2301      	movs	r3, #1
 8007666:	e09f      	b.n	80077a8 <_printf_i+0x1ec>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	0607      	lsls	r7, r0, #24
 800766e:	f103 0104 	add.w	r1, r3, #4
 8007672:	6029      	str	r1, [r5, #0]
 8007674:	d501      	bpl.n	800767a <_printf_i+0xbe>
 8007676:	681e      	ldr	r6, [r3, #0]
 8007678:	e003      	b.n	8007682 <_printf_i+0xc6>
 800767a:	0646      	lsls	r6, r0, #25
 800767c:	d5fb      	bpl.n	8007676 <_printf_i+0xba>
 800767e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007682:	2e00      	cmp	r6, #0
 8007684:	da03      	bge.n	800768e <_printf_i+0xd2>
 8007686:	232d      	movs	r3, #45	; 0x2d
 8007688:	4276      	negs	r6, r6
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768e:	485a      	ldr	r0, [pc, #360]	; (80077f8 <_printf_i+0x23c>)
 8007690:	230a      	movs	r3, #10
 8007692:	e012      	b.n	80076ba <_printf_i+0xfe>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	1d19      	adds	r1, r3, #4
 800769a:	6029      	str	r1, [r5, #0]
 800769c:	0605      	lsls	r5, r0, #24
 800769e:	d501      	bpl.n	80076a4 <_printf_i+0xe8>
 80076a0:	681e      	ldr	r6, [r3, #0]
 80076a2:	e002      	b.n	80076aa <_printf_i+0xee>
 80076a4:	0641      	lsls	r1, r0, #25
 80076a6:	d5fb      	bpl.n	80076a0 <_printf_i+0xe4>
 80076a8:	881e      	ldrh	r6, [r3, #0]
 80076aa:	4853      	ldr	r0, [pc, #332]	; (80077f8 <_printf_i+0x23c>)
 80076ac:	2f6f      	cmp	r7, #111	; 0x6f
 80076ae:	bf0c      	ite	eq
 80076b0:	2308      	moveq	r3, #8
 80076b2:	230a      	movne	r3, #10
 80076b4:	2100      	movs	r1, #0
 80076b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ba:	6865      	ldr	r5, [r4, #4]
 80076bc:	60a5      	str	r5, [r4, #8]
 80076be:	2d00      	cmp	r5, #0
 80076c0:	bfa2      	ittt	ge
 80076c2:	6821      	ldrge	r1, [r4, #0]
 80076c4:	f021 0104 	bicge.w	r1, r1, #4
 80076c8:	6021      	strge	r1, [r4, #0]
 80076ca:	b90e      	cbnz	r6, 80076d0 <_printf_i+0x114>
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	d04b      	beq.n	8007768 <_printf_i+0x1ac>
 80076d0:	4615      	mov	r5, r2
 80076d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076d6:	fb03 6711 	mls	r7, r3, r1, r6
 80076da:	5dc7      	ldrb	r7, [r0, r7]
 80076dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076e0:	4637      	mov	r7, r6
 80076e2:	42bb      	cmp	r3, r7
 80076e4:	460e      	mov	r6, r1
 80076e6:	d9f4      	bls.n	80076d2 <_printf_i+0x116>
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d10b      	bne.n	8007704 <_printf_i+0x148>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	07de      	lsls	r6, r3, #31
 80076f0:	d508      	bpl.n	8007704 <_printf_i+0x148>
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	6861      	ldr	r1, [r4, #4]
 80076f6:	4299      	cmp	r1, r3
 80076f8:	bfde      	ittt	le
 80076fa:	2330      	movle	r3, #48	; 0x30
 80076fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007700:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007704:	1b52      	subs	r2, r2, r5
 8007706:	6122      	str	r2, [r4, #16]
 8007708:	f8cd a000 	str.w	sl, [sp]
 800770c:	464b      	mov	r3, r9
 800770e:	aa03      	add	r2, sp, #12
 8007710:	4621      	mov	r1, r4
 8007712:	4640      	mov	r0, r8
 8007714:	f7ff fee4 	bl	80074e0 <_printf_common>
 8007718:	3001      	adds	r0, #1
 800771a:	d14a      	bne.n	80077b2 <_printf_i+0x1f6>
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	b004      	add	sp, #16
 8007722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f043 0320 	orr.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	4833      	ldr	r0, [pc, #204]	; (80077fc <_printf_i+0x240>)
 8007730:	2778      	movs	r7, #120	; 0x78
 8007732:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	6829      	ldr	r1, [r5, #0]
 800773a:	061f      	lsls	r7, r3, #24
 800773c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007740:	d402      	bmi.n	8007748 <_printf_i+0x18c>
 8007742:	065f      	lsls	r7, r3, #25
 8007744:	bf48      	it	mi
 8007746:	b2b6      	uxthmi	r6, r6
 8007748:	07df      	lsls	r7, r3, #31
 800774a:	bf48      	it	mi
 800774c:	f043 0320 	orrmi.w	r3, r3, #32
 8007750:	6029      	str	r1, [r5, #0]
 8007752:	bf48      	it	mi
 8007754:	6023      	strmi	r3, [r4, #0]
 8007756:	b91e      	cbnz	r6, 8007760 <_printf_i+0x1a4>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f023 0320 	bic.w	r3, r3, #32
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	2310      	movs	r3, #16
 8007762:	e7a7      	b.n	80076b4 <_printf_i+0xf8>
 8007764:	4824      	ldr	r0, [pc, #144]	; (80077f8 <_printf_i+0x23c>)
 8007766:	e7e4      	b.n	8007732 <_printf_i+0x176>
 8007768:	4615      	mov	r5, r2
 800776a:	e7bd      	b.n	80076e8 <_printf_i+0x12c>
 800776c:	682b      	ldr	r3, [r5, #0]
 800776e:	6826      	ldr	r6, [r4, #0]
 8007770:	6961      	ldr	r1, [r4, #20]
 8007772:	1d18      	adds	r0, r3, #4
 8007774:	6028      	str	r0, [r5, #0]
 8007776:	0635      	lsls	r5, r6, #24
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	d501      	bpl.n	8007780 <_printf_i+0x1c4>
 800777c:	6019      	str	r1, [r3, #0]
 800777e:	e002      	b.n	8007786 <_printf_i+0x1ca>
 8007780:	0670      	lsls	r0, r6, #25
 8007782:	d5fb      	bpl.n	800777c <_printf_i+0x1c0>
 8007784:	8019      	strh	r1, [r3, #0]
 8007786:	2300      	movs	r3, #0
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	4615      	mov	r5, r2
 800778c:	e7bc      	b.n	8007708 <_printf_i+0x14c>
 800778e:	682b      	ldr	r3, [r5, #0]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	602a      	str	r2, [r5, #0]
 8007794:	681d      	ldr	r5, [r3, #0]
 8007796:	6862      	ldr	r2, [r4, #4]
 8007798:	2100      	movs	r1, #0
 800779a:	4628      	mov	r0, r5
 800779c:	f7f8 fd38 	bl	8000210 <memchr>
 80077a0:	b108      	cbz	r0, 80077a6 <_printf_i+0x1ea>
 80077a2:	1b40      	subs	r0, r0, r5
 80077a4:	6060      	str	r0, [r4, #4]
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	2300      	movs	r3, #0
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b0:	e7aa      	b.n	8007708 <_printf_i+0x14c>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	462a      	mov	r2, r5
 80077b6:	4649      	mov	r1, r9
 80077b8:	4640      	mov	r0, r8
 80077ba:	47d0      	blx	sl
 80077bc:	3001      	adds	r0, #1
 80077be:	d0ad      	beq.n	800771c <_printf_i+0x160>
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	079b      	lsls	r3, r3, #30
 80077c4:	d413      	bmi.n	80077ee <_printf_i+0x232>
 80077c6:	68e0      	ldr	r0, [r4, #12]
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	4298      	cmp	r0, r3
 80077cc:	bfb8      	it	lt
 80077ce:	4618      	movlt	r0, r3
 80077d0:	e7a6      	b.n	8007720 <_printf_i+0x164>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4632      	mov	r2, r6
 80077d6:	4649      	mov	r1, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	47d0      	blx	sl
 80077dc:	3001      	adds	r0, #1
 80077de:	d09d      	beq.n	800771c <_printf_i+0x160>
 80077e0:	3501      	adds	r5, #1
 80077e2:	68e3      	ldr	r3, [r4, #12]
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	1a5b      	subs	r3, r3, r1
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	dcf2      	bgt.n	80077d2 <_printf_i+0x216>
 80077ec:	e7eb      	b.n	80077c6 <_printf_i+0x20a>
 80077ee:	2500      	movs	r5, #0
 80077f0:	f104 0619 	add.w	r6, r4, #25
 80077f4:	e7f5      	b.n	80077e2 <_printf_i+0x226>
 80077f6:	bf00      	nop
 80077f8:	08007fd9 	.word	0x08007fd9
 80077fc:	08007fea 	.word	0x08007fea

08007800 <__sflush_r>:
 8007800:	898a      	ldrh	r2, [r1, #12]
 8007802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007806:	4605      	mov	r5, r0
 8007808:	0710      	lsls	r0, r2, #28
 800780a:	460c      	mov	r4, r1
 800780c:	d458      	bmi.n	80078c0 <__sflush_r+0xc0>
 800780e:	684b      	ldr	r3, [r1, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	dc05      	bgt.n	8007820 <__sflush_r+0x20>
 8007814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	dc02      	bgt.n	8007820 <__sflush_r+0x20>
 800781a:	2000      	movs	r0, #0
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007822:	2e00      	cmp	r6, #0
 8007824:	d0f9      	beq.n	800781a <__sflush_r+0x1a>
 8007826:	2300      	movs	r3, #0
 8007828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800782c:	682f      	ldr	r7, [r5, #0]
 800782e:	6a21      	ldr	r1, [r4, #32]
 8007830:	602b      	str	r3, [r5, #0]
 8007832:	d032      	beq.n	800789a <__sflush_r+0x9a>
 8007834:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	075a      	lsls	r2, r3, #29
 800783a:	d505      	bpl.n	8007848 <__sflush_r+0x48>
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	1ac0      	subs	r0, r0, r3
 8007840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007842:	b10b      	cbz	r3, 8007848 <__sflush_r+0x48>
 8007844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007846:	1ac0      	subs	r0, r0, r3
 8007848:	2300      	movs	r3, #0
 800784a:	4602      	mov	r2, r0
 800784c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800784e:	6a21      	ldr	r1, [r4, #32]
 8007850:	4628      	mov	r0, r5
 8007852:	47b0      	blx	r6
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	d106      	bne.n	8007868 <__sflush_r+0x68>
 800785a:	6829      	ldr	r1, [r5, #0]
 800785c:	291d      	cmp	r1, #29
 800785e:	d82b      	bhi.n	80078b8 <__sflush_r+0xb8>
 8007860:	4a29      	ldr	r2, [pc, #164]	; (8007908 <__sflush_r+0x108>)
 8007862:	410a      	asrs	r2, r1
 8007864:	07d6      	lsls	r6, r2, #31
 8007866:	d427      	bmi.n	80078b8 <__sflush_r+0xb8>
 8007868:	2200      	movs	r2, #0
 800786a:	6062      	str	r2, [r4, #4]
 800786c:	04d9      	lsls	r1, r3, #19
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	6022      	str	r2, [r4, #0]
 8007872:	d504      	bpl.n	800787e <__sflush_r+0x7e>
 8007874:	1c42      	adds	r2, r0, #1
 8007876:	d101      	bne.n	800787c <__sflush_r+0x7c>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b903      	cbnz	r3, 800787e <__sflush_r+0x7e>
 800787c:	6560      	str	r0, [r4, #84]	; 0x54
 800787e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007880:	602f      	str	r7, [r5, #0]
 8007882:	2900      	cmp	r1, #0
 8007884:	d0c9      	beq.n	800781a <__sflush_r+0x1a>
 8007886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800788a:	4299      	cmp	r1, r3
 800788c:	d002      	beq.n	8007894 <__sflush_r+0x94>
 800788e:	4628      	mov	r0, r5
 8007890:	f7ff fc96 	bl	80071c0 <_free_r>
 8007894:	2000      	movs	r0, #0
 8007896:	6360      	str	r0, [r4, #52]	; 0x34
 8007898:	e7c0      	b.n	800781c <__sflush_r+0x1c>
 800789a:	2301      	movs	r3, #1
 800789c:	4628      	mov	r0, r5
 800789e:	47b0      	blx	r6
 80078a0:	1c41      	adds	r1, r0, #1
 80078a2:	d1c8      	bne.n	8007836 <__sflush_r+0x36>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0c5      	beq.n	8007836 <__sflush_r+0x36>
 80078aa:	2b1d      	cmp	r3, #29
 80078ac:	d001      	beq.n	80078b2 <__sflush_r+0xb2>
 80078ae:	2b16      	cmp	r3, #22
 80078b0:	d101      	bne.n	80078b6 <__sflush_r+0xb6>
 80078b2:	602f      	str	r7, [r5, #0]
 80078b4:	e7b1      	b.n	800781a <__sflush_r+0x1a>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	e7ad      	b.n	800781c <__sflush_r+0x1c>
 80078c0:	690f      	ldr	r7, [r1, #16]
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	d0a9      	beq.n	800781a <__sflush_r+0x1a>
 80078c6:	0793      	lsls	r3, r2, #30
 80078c8:	680e      	ldr	r6, [r1, #0]
 80078ca:	bf08      	it	eq
 80078cc:	694b      	ldreq	r3, [r1, #20]
 80078ce:	600f      	str	r7, [r1, #0]
 80078d0:	bf18      	it	ne
 80078d2:	2300      	movne	r3, #0
 80078d4:	eba6 0807 	sub.w	r8, r6, r7
 80078d8:	608b      	str	r3, [r1, #8]
 80078da:	f1b8 0f00 	cmp.w	r8, #0
 80078de:	dd9c      	ble.n	800781a <__sflush_r+0x1a>
 80078e0:	6a21      	ldr	r1, [r4, #32]
 80078e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078e4:	4643      	mov	r3, r8
 80078e6:	463a      	mov	r2, r7
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b0      	blx	r6
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dc06      	bgt.n	80078fe <__sflush_r+0xfe>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	e78e      	b.n	800781c <__sflush_r+0x1c>
 80078fe:	4407      	add	r7, r0
 8007900:	eba8 0800 	sub.w	r8, r8, r0
 8007904:	e7e9      	b.n	80078da <__sflush_r+0xda>
 8007906:	bf00      	nop
 8007908:	dfbffffe 	.word	0xdfbffffe

0800790c <_fflush_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	4605      	mov	r5, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b913      	cbnz	r3, 800791c <_fflush_r+0x10>
 8007916:	2500      	movs	r5, #0
 8007918:	4628      	mov	r0, r5
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	b118      	cbz	r0, 8007926 <_fflush_r+0x1a>
 800791e:	6a03      	ldr	r3, [r0, #32]
 8007920:	b90b      	cbnz	r3, 8007926 <_fflush_r+0x1a>
 8007922:	f7ff fa95 	bl	8006e50 <__sinit>
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f3      	beq.n	8007916 <_fflush_r+0xa>
 800792e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d404      	bmi.n	800793e <_fflush_r+0x32>
 8007934:	0599      	lsls	r1, r3, #22
 8007936:	d402      	bmi.n	800793e <_fflush_r+0x32>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f7ff fbe1 	bl	8007100 <__retarget_lock_acquire_recursive>
 800793e:	4628      	mov	r0, r5
 8007940:	4621      	mov	r1, r4
 8007942:	f7ff ff5d 	bl	8007800 <__sflush_r>
 8007946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007948:	07da      	lsls	r2, r3, #31
 800794a:	4605      	mov	r5, r0
 800794c:	d4e4      	bmi.n	8007918 <_fflush_r+0xc>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	d4e1      	bmi.n	8007918 <_fflush_r+0xc>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f7ff fbd4 	bl	8007102 <__retarget_lock_release_recursive>
 800795a:	e7dd      	b.n	8007918 <_fflush_r+0xc>

0800795c <__swbuf_r>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	460e      	mov	r6, r1
 8007960:	4614      	mov	r4, r2
 8007962:	4605      	mov	r5, r0
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x12>
 8007966:	6a03      	ldr	r3, [r0, #32]
 8007968:	b90b      	cbnz	r3, 800796e <__swbuf_r+0x12>
 800796a:	f7ff fa71 	bl	8006e50 <__sinit>
 800796e:	69a3      	ldr	r3, [r4, #24]
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	071a      	lsls	r2, r3, #28
 8007976:	d525      	bpl.n	80079c4 <__swbuf_r+0x68>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b31b      	cbz	r3, 80079c4 <__swbuf_r+0x68>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	1a98      	subs	r0, r3, r2
 8007982:	6963      	ldr	r3, [r4, #20]
 8007984:	b2f6      	uxtb	r6, r6
 8007986:	4283      	cmp	r3, r0
 8007988:	4637      	mov	r7, r6
 800798a:	dc04      	bgt.n	8007996 <__swbuf_r+0x3a>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f7ff ffbc 	bl	800790c <_fflush_r>
 8007994:	b9e0      	cbnz	r0, 80079d0 <__swbuf_r+0x74>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	701e      	strb	r6, [r3, #0]
 80079a4:	6962      	ldr	r2, [r4, #20]
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d004      	beq.n	80079b6 <__swbuf_r+0x5a>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d506      	bpl.n	80079c0 <__swbuf_r+0x64>
 80079b2:	2e0a      	cmp	r6, #10
 80079b4:	d104      	bne.n	80079c0 <__swbuf_r+0x64>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff ffa7 	bl	800790c <_fflush_r>
 80079be:	b938      	cbnz	r0, 80079d0 <__swbuf_r+0x74>
 80079c0:	4638      	mov	r0, r7
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	4621      	mov	r1, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 f806 	bl	80079d8 <__swsetup_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0d5      	beq.n	800797c <__swbuf_r+0x20>
 80079d0:	f04f 37ff 	mov.w	r7, #4294967295
 80079d4:	e7f4      	b.n	80079c0 <__swbuf_r+0x64>
	...

080079d8 <__swsetup_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <__swsetup_r+0xac>)
 80079dc:	4605      	mov	r5, r0
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	460c      	mov	r4, r1
 80079e2:	b118      	cbz	r0, 80079ec <__swsetup_r+0x14>
 80079e4:	6a03      	ldr	r3, [r0, #32]
 80079e6:	b90b      	cbnz	r3, 80079ec <__swsetup_r+0x14>
 80079e8:	f7ff fa32 	bl	8006e50 <__sinit>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f2:	0718      	lsls	r0, r3, #28
 80079f4:	d422      	bmi.n	8007a3c <__swsetup_r+0x64>
 80079f6:	06d9      	lsls	r1, r3, #27
 80079f8:	d407      	bmi.n	8007a0a <__swsetup_r+0x32>
 80079fa:	2309      	movs	r3, #9
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e034      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a0a:	0758      	lsls	r0, r3, #29
 8007a0c:	d512      	bpl.n	8007a34 <__swsetup_r+0x5c>
 8007a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a10:	b141      	cbz	r1, 8007a24 <__swsetup_r+0x4c>
 8007a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d002      	beq.n	8007a20 <__swsetup_r+0x48>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fbd0 	bl	80071c0 <_free_r>
 8007a20:	2300      	movs	r3, #0
 8007a22:	6363      	str	r3, [r4, #52]	; 0x34
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0308 	orr.w	r3, r3, #8
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b94b      	cbnz	r3, 8007a54 <__swsetup_r+0x7c>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4a:	d003      	beq.n	8007a54 <__swsetup_r+0x7c>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 f840 	bl	8007ad4 <__smakebuf_r>
 8007a54:	89a0      	ldrh	r0, [r4, #12]
 8007a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a5a:	f010 0301 	ands.w	r3, r0, #1
 8007a5e:	d00a      	beq.n	8007a76 <__swsetup_r+0x9e>
 8007a60:	2300      	movs	r3, #0
 8007a62:	60a3      	str	r3, [r4, #8]
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	425b      	negs	r3, r3
 8007a68:	61a3      	str	r3, [r4, #24]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	b943      	cbnz	r3, 8007a80 <__swsetup_r+0xa8>
 8007a6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a72:	d1c4      	bne.n	80079fe <__swsetup_r+0x26>
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	0781      	lsls	r1, r0, #30
 8007a78:	bf58      	it	pl
 8007a7a:	6963      	ldrpl	r3, [r4, #20]
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	e7f4      	b.n	8007a6a <__swsetup_r+0x92>
 8007a80:	2000      	movs	r0, #0
 8007a82:	e7f7      	b.n	8007a74 <__swsetup_r+0x9c>
 8007a84:	2000006c 	.word	0x2000006c

08007a88 <__swhatbuf_r>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	2900      	cmp	r1, #0
 8007a92:	b096      	sub	sp, #88	; 0x58
 8007a94:	4615      	mov	r5, r2
 8007a96:	461e      	mov	r6, r3
 8007a98:	da0d      	bge.n	8007ab6 <__swhatbuf_r+0x2e>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007aa0:	f04f 0100 	mov.w	r1, #0
 8007aa4:	bf0c      	ite	eq
 8007aa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aaa:	2340      	movne	r3, #64	; 0x40
 8007aac:	2000      	movs	r0, #0
 8007aae:	6031      	str	r1, [r6, #0]
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	b016      	add	sp, #88	; 0x58
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
 8007ab6:	466a      	mov	r2, sp
 8007ab8:	f000 f848 	bl	8007b4c <_fstat_r>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	dbec      	blt.n	8007a9a <__swhatbuf_r+0x12>
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ac6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007aca:	4259      	negs	r1, r3
 8007acc:	4159      	adcs	r1, r3
 8007ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad2:	e7eb      	b.n	8007aac <__swhatbuf_r+0x24>

08007ad4 <__smakebuf_r>:
 8007ad4:	898b      	ldrh	r3, [r1, #12]
 8007ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad8:	079d      	lsls	r5, r3, #30
 8007ada:	4606      	mov	r6, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	d507      	bpl.n	8007af0 <__smakebuf_r+0x1c>
 8007ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	2301      	movs	r3, #1
 8007aea:	6163      	str	r3, [r4, #20]
 8007aec:	b002      	add	sp, #8
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	ab01      	add	r3, sp, #4
 8007af2:	466a      	mov	r2, sp
 8007af4:	f7ff ffc8 	bl	8007a88 <__swhatbuf_r>
 8007af8:	9900      	ldr	r1, [sp, #0]
 8007afa:	4605      	mov	r5, r0
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff f8a1 	bl	8006c44 <_malloc_r>
 8007b02:	b948      	cbnz	r0, 8007b18 <__smakebuf_r+0x44>
 8007b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d4ef      	bmi.n	8007aec <__smakebuf_r+0x18>
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	e7e3      	b.n	8007ae0 <__smakebuf_r+0xc>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	6020      	str	r0, [r4, #0]
 8007b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	9b00      	ldr	r3, [sp, #0]
 8007b24:	6163      	str	r3, [r4, #20]
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	6120      	str	r0, [r4, #16]
 8007b2a:	b15b      	cbz	r3, 8007b44 <__smakebuf_r+0x70>
 8007b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 f81d 	bl	8007b70 <_isatty_r>
 8007b36:	b128      	cbz	r0, 8007b44 <__smakebuf_r+0x70>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	431d      	orrs	r5, r3
 8007b48:	81a5      	strh	r5, [r4, #12]
 8007b4a:	e7cf      	b.n	8007aec <__smakebuf_r+0x18>

08007b4c <_fstat_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_fstat_r+0x20>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	4611      	mov	r1, r2
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	f7f9 fc6e 	bl	800143a <_fstat>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d102      	bne.n	8007b68 <_fstat_r+0x1c>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	b103      	cbz	r3, 8007b68 <_fstat_r+0x1c>
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000a0c 	.word	0x20000a0c

08007b70 <_isatty_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d06      	ldr	r5, [pc, #24]	; (8007b8c <_isatty_r+0x1c>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f7f9 fc6d 	bl	800145a <_isatty>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_isatty_r+0x1a>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_isatty_r+0x1a>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20000a0c 	.word	0x20000a0c

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
