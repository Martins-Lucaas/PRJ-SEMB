
Multiparameter_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005608  08005608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005610  08005610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  2000000c  08005624  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08005624  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188ab  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a9  00000000  00000000  0003892a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001172  00000000  00000000  0003d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032260  00000000  00000000  0003e26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021657  00000000  00000000  000704ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b84  00000000  00000000  00091b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fe0  00000000  00000000  001756a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0017b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080055d0 	.word	0x080055d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080055d0 	.word	0x080055d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 ff18 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f816 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa54 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 fa2a 	bl	8000968 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f9fa 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000518:	f000 f87c 	bl	8000614 <MX_ADC1_Init>
  MX_I2C3_Init();
 800051c:	f000 f90e 	bl	800073c <MX_I2C3_Init>
  MX_I2C2_Init();
 8000520:	f000 f8de 	bl	80006e0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000524:	f000 f938 	bl	8000798 <MX_SPI1_Init>
  MX_CRC_Init();
 8000528:	f000 f8c6 	bl	80006b8 <MX_CRC_Init>
  MX_TIM3_Init();
 800052c:	f000 f96a 	bl	8000804 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f9c2 	bl	80008b8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x34>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 f816 	bl	8005578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <SystemClock_Config+0xd4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <SystemClock_Config+0xd4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005ac:	230f      	movs	r3, #15
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005b8:	2305      	movs	r3, #5
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fff3 	bl	80035b0 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d0:	f000 fa9e 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2103      	movs	r1, #3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f9bc 	bl	8002970 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005fe:	f000 fa87 	bl	8000b10 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC1_Init+0x98>)
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x9c>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_ADC1_Init+0x98>)
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xa0>)
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_ADC1_Init+0x98>)
 8000674:	f000 fec6 	bl	8001404 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 fa47 	bl	8000b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000682:	2301      	movs	r3, #1
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_ADC1_Init+0x98>)
 8000694:	f000 fefa 	bl	800148c <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069e:	f000 fa37 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_CRC_Init+0x20>)
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MX_CRC_Init+0x24>)
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_CRC_Init+0x20>)
 80006c4:	f001 f9f2 	bl	8001aac <HAL_CRC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ce:	f000 fa1f 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	40023000 	.word	0x40023000

080006e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C2_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C2_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C2_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C2_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C2_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C2_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C2_Init+0x50>)
 800071e:	f001 fe9b 	bl	8002458 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f9f2 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000d8 	.word	0x200000d8
 8000734:	40005800 	.word	0x40005800
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C3_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C3_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C3_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C3_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C3_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C3_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C3_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C3_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C3_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C3_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C3_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C3_Init+0x50>)
 800077a:	f001 fe6d 	bl	8002458 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 f9c4 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000012c 	.word	0x2000012c
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f003 f97f 	bl	8003aec <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f98c 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000180 	.word	0x20000180
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <MX_TIM3_Init+0xb0>)
 800082a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM3_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM3_Init+0xac>)
 800083a:	f241 3287 	movw	r2, #4999	; 0x1387
 800083e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_TIM3_Init+0xac>)
 800084e:	f003 fbb3 	bl	8003fb8 <HAL_TIM_PWM_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f95a 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4619      	mov	r1, r3
 800086a:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_TIM3_Init+0xac>)
 800086c:	f004 f836 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000876:	f000 f94b 	bl	8000b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	2360      	movs	r3, #96	; 0x60
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 800087e:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM3_Init+0xac>)
 8000894:	f003 fce8 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800089e:	f000 f937 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM3_Init+0xac>)
 80008a4:	f000 fb60 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000238 	.word	0x20000238
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART3_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f004 f884 	bl	80049fc <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f909 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000280 	.word	0x20000280
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fec6 	bl	80026e0 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8d9 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200002c4 	.word	0x200002c4

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2038      	movs	r0, #56	; 0x38
 8000990:	f001 f862 	bl	8001a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000994:	2038      	movs	r0, #56	; 0x38
 8000996:	f001 f87b 	bl	8001a90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	203b      	movs	r0, #59	; 0x3b
 80009a0:	f001 f85a 	bl	8001a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009a4:	203b      	movs	r0, #59	; 0x3b
 80009a6:	f001 f873 	bl	8001a90 <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a42      	ldr	r2, [pc, #264]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x128>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a34      	ldr	r2, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, displ_cs_Pin|touch_cs_Pin|displ_dc_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000a44:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a46:	f001 fced 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(displ_rst_GPIO_Port, displ_rst_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a52:	f001 fce7 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_adc_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a5e:	f001 fce1 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : touch_int_Pin */
  GPIO_InitStruct.Pin = touch_int_Pin;
 8000a62:	2310      	movs	r3, #16
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(touch_int_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000a78:	f001 fb40 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : displ_cs_Pin touch_cs_Pin displ_dc_Pin */
  GPIO_InitStruct.Pin = displ_cs_Pin|touch_cs_Pin|displ_dc_Pin;
 8000a7c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a96:	f001 fb31 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : displ_rst_Pin */
  GPIO_InitStruct.Pin = displ_rst_Pin;
 8000a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(displ_rst_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000ab4:	f001 fb22 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_adc_Pin PA10 */
  GPIO_InitStruct.Pin = led_adc_Pin|GPIO_PIN_10;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x130>)
 8000ad2:	f001 fb13 	bl	80020fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 fc3d 	bl	800137c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010000 	.word	0x40010000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <HAL_ADC_MspInit+0xdc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d157      	bne.n	8000c3e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_ADC_MspInit+0xe0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <HAL_ADC_MspInit+0xe4>)
 8000bda:	f001 fa8f 	bl	80020fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_ADC_MspInit+0xec>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c24:	f000 ff5e 	bl	8001ae4 <HAL_DMA_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c2e:	f7ff ff6f 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_ADC_MspInit+0xe8>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	20000070 	.word	0x20000070
 8000c58:	40026410 	.word	0x40026410

08000c5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_CRC_MspInit+0x3c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10d      	bne.n	8000c8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023000 	.word	0x40023000
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_I2C_MspInit+0x168>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d14c      	bne.n	8000d5c <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = temp_scl_Pin;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_scl_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	483e      	ldr	r0, [pc, #248]	; (8000e10 <HAL_I2C_MspInit+0x170>)
 8000d18:	f001 f9f0 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = temp_sda_Pin;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(temp_sda_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4836      	ldr	r0, [pc, #216]	; (8000e14 <HAL_I2C_MspInit+0x174>)
 8000d3a:	f001 f9df 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d5a:	e050      	b.n	8000dfe <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <HAL_I2C_MspInit+0x178>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d14b      	bne.n	8000dfe <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = oxi_sda_Pin;
 8000d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000db0:	2304      	movs	r3, #4
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_sda_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4816      	ldr	r0, [pc, #88]	; (8000e14 <HAL_I2C_MspInit+0x174>)
 8000dbc:	f001 f99e 	bl	80020fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = oxi_scl_Pin;
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(oxi_scl_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <HAL_I2C_MspInit+0x17c>)
 8000dde:	f001 f98d 	bl	80020fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_I2C_MspInit+0x16c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	; 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40005800 	.word	0x40005800
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <HAL_SPI_MspInit+0xf0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d161      	bne.n	8000f06 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_SPI_MspInit+0xf4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = displ_sck_Pin|touch_mosi_Pin|displ_mosi_Pin;
 8000e7a:	23e0      	movs	r3, #224	; 0xe0
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4820      	ldr	r0, [pc, #128]	; (8000f18 <HAL_SPI_MspInit+0xf8>)
 8000e96:	f001 f931 	bl	80020fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_SPI_MspInit+0x100>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ea2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000edc:	f000 fe02 	bl	8001ae4 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ee6:	f7ff fe13 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000eee:	649a      	str	r2, [r3, #72]	; 0x48
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_SPI_MspInit+0xfc>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2023      	movs	r0, #35	; 0x23
 8000efc:	f000 fdac 	bl	8001a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f00:	2023      	movs	r0, #35	; 0x23
 8000f02:	f000 fdc5 	bl	8001a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40013000 	.word	0x40013000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	200001d8 	.word	0x200001d8
 8000f20:	40026458 	.word	0x40026458

08000f24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10d      	bne.n	8000f52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_TIM_MspPostInit+0x68>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11d      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = displ_led_Pin;
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(displ_led_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_TIM_MspPostInit+0x70>)
 8000fc2:	f001 f89b 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_UART_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12c      	bne.n	8001058 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = usart_emg_rx_Pin|usart_emg_tx_Pin;
 8001036:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_UART_MspInit+0x8c>)
 8001054:	f001 f852 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40004800 	.word	0x40004800
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800

0800106c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0a0      	sub	sp, #128	; 0x80
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	225c      	movs	r2, #92	; 0x5c
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fa73 	bl	8005578 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109a:	d141      	bne.n	8001120 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80010a2:	2300      	movs	r3, #0
 80010a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fdac 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80010b6:	f7ff fd2b 	bl	8000b10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e8:	230a      	movs	r3, #10
 80010ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f0:	4619      	mov	r1, r3
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <HAL_PCD_MspInit+0xc0>)
 80010f4:	f001 f802 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 80010fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001102:	6353      	str	r3, [r2, #52]	; 0x34
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6453      	str	r3, [r2, #68]	; 0x44
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PCD_MspInit+0xbc>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3780      	adds	r7, #128	; 0x80
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_InitTick+0xd4>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_InitTick+0xd4>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6453      	str	r3, [r2, #68]	; 0x44
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_InitTick+0xd4>)
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fd1c 	bl	8002ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800116c:	f001 fd06 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_InitTick+0xd8>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3b01      	subs	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_InitTick+0xdc>)
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <HAL_InitTick+0xe0>)
 8001188:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_InitTick+0xdc>)
 800118c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001190:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_InitTick+0xdc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_InitTick+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_InitTick+0xdc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_InitTick+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <HAL_InitTick+0xdc>)
 80011ac:	f002 fe3a 	bl	8003e24 <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11b      	bne.n	80011f6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <HAL_InitTick+0xdc>)
 80011c0:	f002 fe8a 	bl	8003ed8 <HAL_TIM_Base_Start_IT>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d111      	bne.n	80011f6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011d2:	2019      	movs	r0, #25
 80011d4:	f000 fc5c 	bl	8001a90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d808      	bhi.n	80011f0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011de:	2200      	movs	r2, #0
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	2019      	movs	r0, #25
 80011e4:	f000 fc38 	bl	8001a58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_InitTick+0xe4>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e002      	b.n	80011f6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3730      	adds	r7, #48	; 0x30
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	431bde83 	.word	0x431bde83
 800120c:	200007d0 	.word	0x200007d0
 8001210:	40010000 	.word	0x40010000
 8001214:	20000004 	.word	0x20000004

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001276:	f002 feee 	bl	8004056 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200007d0 	.word	0x200007d0

08001284 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <SPI1_IRQHandler+0x10>)
 800128a:	f002 fcb9 	bl	8003c00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000180 	.word	0x20000180

08001298 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA2_Stream0_IRQHandler+0x10>)
 800129e:	f000 fcf1 	bl	8001c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000070 	.word	0x20000070

080012ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <DMA2_Stream3_IRQHandler+0x10>)
 80012b2:	f000 fce7 	bl	8001c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001d8 	.word	0x200001d8

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff ffd7 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f004 f939 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f8f3 	bl	8000500 <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	08005618 	.word	0x08005618
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	2000081c 	.word	0x2000081c

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 fb6e 	bl	8001a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f7ff fee2 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fbd6 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000818 	.word	0x20000818

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000818 	.word	0x20000818

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008

08001404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e033      	b.n	8001482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fba2 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800144a:	f023 0302 	bic.w	r3, r3, #2
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f94a 	bl	80016f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
 8001472:	e001      	b.n	8001478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e113      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x244>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d925      	bls.n	8001504 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68d9      	ldr	r1, [r3, #12]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	3b1e      	subs	r3, #30
 80014ce:	2207      	movs	r2, #7
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43da      	mvns	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	400a      	ands	r2, r1
 80014dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4403      	add	r3, r0
 80014f6:	3b1e      	subs	r3, #30
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	e022      	b.n	800154a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6919      	ldr	r1, [r3, #16]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	2207      	movs	r2, #7
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	400a      	ands	r2, r1
 8001526:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	4603      	mov	r3, r0
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4403      	add	r3, r0
 8001540:	409a      	lsls	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d824      	bhi.n	800159c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b05      	subs	r3, #5
 8001564:	221f      	movs	r2, #31
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b05      	subs	r3, #5
 800158e:	fa00 f203 	lsl.w	r2, r0, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
 800159a:	e04c      	b.n	8001636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d824      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b23      	subs	r3, #35	; 0x23
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b23      	subs	r3, #35	; 0x23
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
 80015ec:	e023      	b.n	8001636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b41      	subs	r3, #65	; 0x41
 8001600:	221f      	movs	r2, #31
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b41      	subs	r3, #65	; 0x41
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_ADC_ConfigChannel+0x250>)
 8001638:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <HAL_ADC_ConfigChannel+0x254>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d10f      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1d8>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b12      	cmp	r3, #18
 800164a:	d10b      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_ADC_ConfigChannel+0x254>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x23a>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_ADC_ConfigChannel+0x258>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x1f4>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b11      	cmp	r3, #17
 800167e:	d122      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_ADC_ConfigChannel+0x258>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d111      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_ADC_ConfigChannel+0x25c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_ADC_ConfigChannel+0x260>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9a      	lsrs	r2, r3, #18
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b8:	e002      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	40012000 	.word	0x40012000
 80016e4:	10000012 	.word	0x10000012
 80016e8:	20000000 	.word	0x20000000
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <ADC_Init+0x1f0>)
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	021a      	lsls	r2, r3, #8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <ADC_Init+0x1f4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001796:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	e00f      	b.n	80017ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0202 	bic.w	r2, r2, #2
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	005a      	lsls	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800182a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800183a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	3b01      	subs	r3, #1
 8001848:	035a      	lsls	r2, r3, #13
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	e007      	b.n	8001864 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	3b01      	subs	r3, #1
 8001880:	051a      	lsls	r2, r3, #20
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a6:	025a      	lsls	r2, r3, #9
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6899      	ldr	r1, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	029a      	lsls	r2, r3, #10
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40012300 	.word	0x40012300
 80018e4:	0f000001 	.word	0x0f000001

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff4c 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6a:	f7ff ff61 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7ff ffb1 	bl	80019dc <NVIC_EncodePriority>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff80 	bl	8001988 <__NVIC_SetPriority>
}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff54 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	795b      	ldrb	r3, [r3, #5]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff f8c4 	bl	8000c5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fc58 	bl	80013a4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e099      	b.n	8001c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fc3f 	bl	80013a4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d908      	bls.n	8001b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e078      	b.n	8001c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e8      	bne.n	8001b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_DMA_Init+0x158>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d117      	bne.n	8001c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa0b 	bl	8002004 <DMA_CheckFifoParam>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c02:	2301      	movs	r3, #1
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f9c2 	bl	8001f98 <DMA_CalcBaseAndBitshift>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	f010803f 	.word	0xf010803f

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00c      	b.n	8001c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2205      	movs	r2, #5
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c90:	4b8e      	ldr	r3, [pc, #568]	; (8001ecc <HAL_DMA_IRQHandler+0x248>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a8e      	ldr	r2, [pc, #568]	; (8001ed0 <HAL_DMA_IRQHandler+0x24c>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2208      	movs	r2, #8
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01a      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0204 	bic.w	r2, r2, #4
 8001cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2208      	movs	r2, #8
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2201      	movs	r2, #1
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2204      	movs	r2, #4
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0204 	orr.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2210      	movs	r2, #16
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d043      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03c      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2210      	movs	r2, #16
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d108      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d024      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
 8001db2:	e01f      	b.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e016      	b.n	8001df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0208 	bic.w	r2, r2, #8
 8001de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2220      	movs	r2, #32
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 808f 	beq.w	8001f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8087 	beq.w	8001f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d136      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0216 	bic.w	r2, r2, #22
 8001e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x1da>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d07e      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
        }
        return;
 8001e9a:	e079      	b.n	8001f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d031      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e02c      	b.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d023      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
 8001ee4:	e01e      	b.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10f      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0210 	bic.w	r2, r2, #16
 8001f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d032      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d022      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d307      	bcc.n	8001f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f2      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x2cc>
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f90:	bf00      	nop
    }
  }
}
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3b10      	subs	r3, #16
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <DMA_CalcBaseAndBitshift+0x64>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <DMA_CalcBaseAndBitshift+0x68>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d909      	bls.n	8001fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd8:	e007      	b.n	8001fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	aaaaaaab 	.word	0xaaaaaaab
 8002000:	08005600 	.word	0x08005600

08002004 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11f      	bne.n	800205e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d856      	bhi.n	80020d2 <DMA_CheckFifoParam+0xce>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <DMA_CheckFifoParam+0x28>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	0800203d 	.word	0x0800203d
 8002030:	0800204f 	.word	0x0800204f
 8002034:	0800203d 	.word	0x0800203d
 8002038:	080020d3 	.word	0x080020d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d046      	beq.n	80020d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e043      	b.n	80020d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002056:	d140      	bne.n	80020da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205c:	e03d      	b.n	80020da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002066:	d121      	bne.n	80020ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d837      	bhi.n	80020de <DMA_CheckFifoParam+0xda>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <DMA_CheckFifoParam+0x70>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002085 	.word	0x08002085
 8002078:	0800208b 	.word	0x0800208b
 800207c:	08002085 	.word	0x08002085
 8002080:	0800209d 	.word	0x0800209d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      break;
 8002088:	e030      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d025      	beq.n	80020e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209a:	e022      	b.n	80020e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a4:	d11f      	bne.n	80020e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020aa:	e01c      	b.n	80020e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d903      	bls.n	80020ba <DMA_CheckFifoParam+0xb6>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d003      	beq.n	80020c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020b8:	e018      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      break;
 80020be:	e015      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00e      	beq.n	80020ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      break;
 80020d0:	e00b      	b.n	80020ea <DMA_CheckFifoParam+0xe6>
      break;
 80020d2:	bf00      	nop
 80020d4:	e00a      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e008      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e006      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e004      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e002      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;   
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
    }
  } 
  
  return status; 
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e165      	b.n	80023e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 8154 	bne.w	80023de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d005      	beq.n	800214e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	2b02      	cmp	r3, #2
 800214c:	d130      	bne.n	80021b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d017      	beq.n	80021ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ae 	beq.w	80023de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_GPIO_Init+0x300>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a5c      	ldr	r2, [pc, #368]	; (80023fc <HAL_GPIO_Init+0x300>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <HAL_GPIO_Init+0x300>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_GPIO_Init+0x304>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <HAL_GPIO_Init+0x308>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x21a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4e      	ldr	r2, [pc, #312]	; (8002408 <HAL_GPIO_Init+0x30c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x216>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_GPIO_Init+0x310>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x212>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_GPIO_Init+0x314>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	; (8002414 <HAL_GPIO_Init+0x318>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x20a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4a      	ldr	r2, [pc, #296]	; (8002418 <HAL_GPIO_Init+0x31c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x206>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a49      	ldr	r2, [pc, #292]	; (800241c <HAL_GPIO_Init+0x320>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x202>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 80022fe:	2307      	movs	r3, #7
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x21c>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x304>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_GPIO_Init+0x324>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a31      	ldr	r2, [pc, #196]	; (8002420 <HAL_GPIO_Init+0x324>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <HAL_GPIO_Init+0x324>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a26      	ldr	r2, [pc, #152]	; (8002420 <HAL_GPIO_Init+0x324>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_GPIO_Init+0x324>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_GPIO_Init+0x324>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <HAL_GPIO_Init+0x324>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_GPIO_Init+0x324>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae96 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40013c00 	.word	0x40013c00

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e12b      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fc0e 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024bc:	f000 fb4a 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a81      	ldr	r2, [pc, #516]	; (80026cc <HAL_I2C_Init+0x274>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d807      	bhi.n	80024dc <HAL_I2C_Init+0x84>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_I2C_Init+0x278>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e006      	b.n	80024ea <HAL_I2C_Init+0x92>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a7d      	ldr	r2, [pc, #500]	; (80026d4 <HAL_I2C_Init+0x27c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e7      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_I2C_Init+0x280>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9b      	lsrs	r3, r3, #18
 80024fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <HAL_I2C_Init+0x274>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d802      	bhi.n	800252c <HAL_I2C_Init+0xd4>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3301      	adds	r3, #1
 800252a:	e009      	b.n	8002540 <HAL_I2C_Init+0xe8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_I2C_Init+0x284>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	495c      	ldr	r1, [pc, #368]	; (80026cc <HAL_I2C_Init+0x274>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d819      	bhi.n	8002594 <HAL_I2C_Init+0x13c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fbb1 f3f3 	udiv	r3, r1, r3
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002574:	400b      	ands	r3, r1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_I2C_Init+0x138>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fbb1 f3f3 	udiv	r3, r1, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	e051      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002590:	2304      	movs	r3, #4
 8002592:	e04f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_I2C_Init+0x168>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_I2C_Init+0x18e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x196>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10e      	bne.n	8002614 <HAL_I2C_Init+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e58      	subs	r0, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	fbb0 f3f3 	udiv	r3, r0, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6809      	ldr	r1, [r1, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6911      	ldr	r1, [r2, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	000186a0 	.word	0x000186a0
 80026d0:	001e847f 	.word	0x001e847f
 80026d4:	003d08ff 	.word	0x003d08ff
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b08f      	sub	sp, #60	; 0x3c
 80026e4:	af0a      	add	r7, sp, #40	; 0x28
 80026e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e116      	b.n	8002920 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe fcad 	bl	800106c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fc86 	bl	8005042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	687e      	ldr	r6, [r7, #4]
 800273e:	466d      	mov	r5, sp
 8002740:	f106 0410 	add.w	r4, r6, #16
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002750:	e885 0003 	stmia.w	r5, {r0, r1}
 8002754:	1d33      	adds	r3, r6, #4
 8002756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	f002 fc11 	bl	8004f80 <USB_CoreInit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0d7      	b.n	8002920 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fc74 	bl	8005064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e04a      	b.n	8002818 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	333d      	adds	r3, #61	; 0x3d
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	333c      	adds	r3, #60	; 0x3c
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	b298      	uxth	r0, r3
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3344      	adds	r3, #68	; 0x44
 80027be:	4602      	mov	r2, r0
 80027c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3340      	adds	r3, #64	; 0x40
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3348      	adds	r3, #72	; 0x48
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334c      	adds	r3, #76	; 0x4c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3354      	adds	r3, #84	; 0x54
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3af      	bcc.n	8002782 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3b5      	bcc.n	8002828 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	687e      	ldr	r6, [r7, #4]
 80028c4:	466d      	mov	r5, sp
 80028c6:	f106 0410 	add.w	r4, r6, #16
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028da:	1d33      	adds	r3, r6, #4
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f002 fc0c 	bl	80050fc <USB_DevInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e014      	b.n	8002920 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f80a 	bl	8002928 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fdca 	bl	80054b2 <USB_DevDisconnect>

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	f043 0303 	orr.w	r3, r3, #3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fca0 	bl	80013a4 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fc9c 	bl	80013a4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 fbb1 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fb0a 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	080055e8 	.word	0x080055e8
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b58:	f7ff fff0 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	080055f8 	.word	0x080055f8

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff ffdc 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0b5b      	lsrs	r3, r3, #13
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	080055f8 	.word	0x080055f8

08002ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCC_GetClockConfig+0x60>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	601a      	str	r2, [r3, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c46:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	496c      	ldr	r1, [pc, #432]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c6e:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c74:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	4960      	ldr	r1, [pc, #384]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4955      	ldr	r1, [pc, #340]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	4946      	ldr	r1, [pc, #280]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d04:	2301      	movs	r3, #1
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 808a 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fb31 	bl	80013a4 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fb2d 	bl	80013a4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e278      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	6a3a      	ldr	r2, [r7, #32]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d98:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d114      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fafb 	bl	80013a4 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe faf7 	bl	80013a4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e240      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de0:	d114      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	4902      	ldr	r1, [pc, #8]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470e40 	.word	0x42470e40
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	4944      	ldr	r1, [pc, #272]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e3e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	492e      	ldr	r1, [pc, #184]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d011      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	4926      	ldr	r1, [pc, #152]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	491a      	ldr	r1, [pc, #104]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d011      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	4911      	ldr	r1, [pc, #68]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f02:	2301      	movs	r3, #1
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	f040 80ff 	bne.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe fa41 	bl	80013a4 <HAL_GetTick>
 8002f22:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f24:	e00e      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f26:	f7fe fa3d 	bl	80013a4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d907      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e188      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	424711e0 	.word	0x424711e0
 8002f40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ea      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d028      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d124      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f78:	4b71      	ldr	r3, [pc, #452]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	3301      	adds	r3, #1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4961      	ldr	r1, [pc, #388]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d035      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fec:	d130      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003000:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	431a      	orrs	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	071b      	lsls	r3, r3, #28
 8003030:	4943      	ldr	r1, [pc, #268]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800303a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303e:	f023 021f 	bic.w	r2, r3, #31
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	493d      	ldr	r1, [pc, #244]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d029      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003064:	d124      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	0f1b      	lsrs	r3, r3, #28
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	019b      	lsls	r3, r3, #6
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	431a      	orrs	r2, r3
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	071b      	lsls	r3, r3, #28
 80030a8:	4925      	ldr	r1, [pc, #148]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d016      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	019b      	lsls	r3, r3, #6
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	071b      	lsls	r3, r3, #28
 80030e2:	4917      	ldr	r1, [pc, #92]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe f958 	bl	80013a4 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030f8:	f7fe f954 	bl	80013a4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e09f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 8095 	bne.w	8003248 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003124:	f7fe f93e 	bl	80013a4 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312a:	e00f      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800312c:	f7fe f93a 	bl	80013a4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d908      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e085      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	42470068 	.word	0x42470068
 8003148:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003158:	d0e8      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02b      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2b00      	cmp	r3, #0
 8003180:	d127      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	431a      	orrs	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	4928      	ldr	r1, [pc, #160]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	3b01      	subs	r3, #1
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	4922      	ldr	r1, [pc, #136]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01d      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d118      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	0e1b      	lsrs	r3, r3, #24
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	019b      	lsls	r3, r3, #6
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	4910      	ldr	r1, [pc, #64]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003220:	f7fe f8c0 	bl	80013a4 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003228:	f7fe f8bc 	bl	80013a4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e007      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003246:	d1ef      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	42470070 	.word	0x42470070

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003260:	b0a6      	sub	sp, #152	; 0x98
 8003262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003282:	4bc8      	ldr	r3, [pc, #800]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b0c      	cmp	r3, #12
 800328c:	f200 817e 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x330>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032cd 	.word	0x080032cd
 800329c:	0800358d 	.word	0x0800358d
 80032a0:	0800358d 	.word	0x0800358d
 80032a4:	0800358d 	.word	0x0800358d
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	0800358d 	.word	0x0800358d
 80032b0:	0800358d 	.word	0x0800358d
 80032b4:	0800358d 	.word	0x0800358d
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	0800358d 	.word	0x0800358d
 80032c0:	0800358d 	.word	0x0800358d
 80032c4:	0800358d 	.word	0x0800358d
 80032c8:	08003447 	.word	0x08003447
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4bb6      	ldr	r3, [pc, #728]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80032d2:	e15f      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d4:	4bb5      	ldr	r3, [pc, #724]	; (80035ac <HAL_RCC_GetSysClockFreq+0x350>)
 80032d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032da:	e15b      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4bb1      	ldr	r3, [pc, #708]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e8:	4bae      	ldr	r3, [pc, #696]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d031      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f4:	4bab      	ldr	r3, [pc, #684]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	2200      	movs	r2, #0
 80032fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	663b      	str	r3, [r7, #96]	; 0x60
 8003308:	2300      	movs	r3, #0
 800330a:	667b      	str	r3, [r7, #100]	; 0x64
 800330c:	4ba7      	ldr	r3, [pc, #668]	; (80035ac <HAL_RCC_GetSysClockFreq+0x350>)
 800330e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003312:	462a      	mov	r2, r5
 8003314:	fb03 f202 	mul.w	r2, r3, r2
 8003318:	2300      	movs	r3, #0
 800331a:	4621      	mov	r1, r4
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	4aa2      	ldr	r2, [pc, #648]	; (80035ac <HAL_RCC_GetSysClockFreq+0x350>)
 8003324:	4621      	mov	r1, r4
 8003326:	fba1 1202 	umull	r1, r2, r1, r2
 800332a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800332c:	460a      	mov	r2, r1
 800332e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003330:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003332:	4413      	add	r3, r2
 8003334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	2200      	movs	r2, #0
 800333c:	65bb      	str	r3, [r7, #88]	; 0x58
 800333e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003344:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003348:	f7fc ff5c 	bl	8000204 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003356:	e064      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003358:	4b92      	ldr	r3, [pc, #584]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	2200      	movs	r2, #0
 8003360:	653b      	str	r3, [r7, #80]	; 0x50
 8003362:	657a      	str	r2, [r7, #84]	; 0x54
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003374:	4622      	mov	r2, r4
 8003376:	462b      	mov	r3, r5
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	0159      	lsls	r1, r3, #5
 8003382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003386:	0150      	lsls	r0, r2, #5
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4621      	mov	r1, r4
 800338e:	1a51      	subs	r1, r2, r1
 8003390:	6139      	str	r1, [r7, #16]
 8003392:	4629      	mov	r1, r5
 8003394:	eb63 0301 	sbc.w	r3, r3, r1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a6:	4659      	mov	r1, fp
 80033a8:	018b      	lsls	r3, r1, #6
 80033aa:	4651      	mov	r1, sl
 80033ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b0:	4651      	mov	r1, sl
 80033b2:	018a      	lsls	r2, r1, #6
 80033b4:	4651      	mov	r1, sl
 80033b6:	ebb2 0801 	subs.w	r8, r2, r1
 80033ba:	4659      	mov	r1, fp
 80033bc:	eb63 0901 	sbc.w	r9, r3, r1
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d4:	4690      	mov	r8, r2
 80033d6:	4699      	mov	r9, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	eb18 0303 	adds.w	r3, r8, r3
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	462b      	mov	r3, r5
 80033e2:	eb49 0303 	adc.w	r3, r9, r3
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033f4:	4629      	mov	r1, r5
 80033f6:	028b      	lsls	r3, r1, #10
 80033f8:	4621      	mov	r1, r4
 80033fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fe:	4621      	mov	r1, r4
 8003400:	028a      	lsls	r2, r1, #10
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340a:	2200      	movs	r2, #0
 800340c:	643b      	str	r3, [r7, #64]	; 0x40
 800340e:	647a      	str	r2, [r7, #68]	; 0x44
 8003410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003414:	f7fc fef6 	bl	8000204 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003422:	4b60      	ldr	r3, [pc, #384]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	3301      	adds	r3, #1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003434:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003444:	e0a6      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003446:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02a      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	2200      	movs	r2, #0
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
 8003468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003470:	2100      	movs	r1, #0
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_GetSysClockFreq+0x350>)
 8003474:	fb03 f201 	mul.w	r2, r3, r1
 8003478:	2300      	movs	r3, #0
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	4413      	add	r3, r2
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_RCC_GetSysClockFreq+0x350>)
 8003482:	fba0 1202 	umull	r1, r2, r0, r2
 8003486:	677a      	str	r2, [r7, #116]	; 0x74
 8003488:	460a      	mov	r2, r1
 800348a:	673a      	str	r2, [r7, #112]	; 0x70
 800348c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800348e:	4413      	add	r3, r2
 8003490:	677b      	str	r3, [r7, #116]	; 0x74
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	2200      	movs	r2, #0
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
 800349a:	637a      	str	r2, [r7, #52]	; 0x34
 800349c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80034a4:	f7fc feae 	bl	8000204 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034b2:	e05b      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	2200      	movs	r2, #0
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	f04f 0000 	mov.w	r0, #0
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	0159      	lsls	r1, r3, #5
 80034de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e2:	0150      	lsls	r0, r2, #5
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4641      	mov	r1, r8
 80034ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003508:	ebb2 040a 	subs.w	r4, r2, sl
 800350c:	eb63 050b 	sbc.w	r5, r3, fp
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	00eb      	lsls	r3, r5, #3
 800351a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351e:	00e2      	lsls	r2, r4, #3
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	4643      	mov	r3, r8
 8003526:	18e3      	adds	r3, r4, r3
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	464b      	mov	r3, r9
 800352c:	eb45 0303 	adc.w	r3, r5, r3
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800353e:	4629      	mov	r1, r5
 8003540:	028b      	lsls	r3, r1, #10
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003548:	4621      	mov	r1, r4
 800354a:	028a      	lsls	r2, r1, #10
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003554:	2200      	movs	r2, #0
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	61fa      	str	r2, [r7, #28]
 800355a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355e:	f7fc fe51 	bl	8000204 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4613      	mov	r3, r2
 8003568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800356c:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0f1b      	lsrs	r3, r3, #28
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800357a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800358a:	e003      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800358e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003598:	4618      	mov	r0, r3
 800359a:	3798      	adds	r7, #152	; 0x98
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	017d7840 	.word	0x017d7840

080035b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e28d      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8083 	beq.w	80036d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035d0:	4b94      	ldr	r3, [pc, #592]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d019      	beq.n	8003610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035dc:	4b91      	ldr	r3, [pc, #580]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035e8:	4b8e      	ldr	r3, [pc, #568]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d00c      	beq.n	8003610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f6:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d112      	bne.n	8003628 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360e:	d10b      	bne.n	8003628 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	4b84      	ldr	r3, [pc, #528]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0x124>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d157      	bne.n	80036d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e25a      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x90>
 8003632:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7b      	ldr	r2, [pc, #492]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <HAL_RCC_OscConfig+0xcc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0xb4>
 800364a:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b73      	ldr	r3, [pc, #460]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0xcc>
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6b      	ldr	r2, [pc, #428]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fe8e 	bl	80013a4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fd fe8a 	bl	80013a4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e21f      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b61      	ldr	r3, [pc, #388]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xdc>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd fe7a 	bl	80013a4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fd fe76 	bl	80013a4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e20b      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x104>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06f      	beq.n	80037c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036e2:	4b50      	ldr	r3, [pc, #320]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d017      	beq.n	800371e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ee:	4b4d      	ldr	r3, [pc, #308]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d105      	bne.n	8003706 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b44      	ldr	r3, [pc, #272]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x186>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1d3      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4937      	ldr	r1, [pc, #220]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_OscConfig+0x278>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fe23 	bl	80013a4 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7fd fe1f 	bl	80013a4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1b4      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4925      	ldr	r1, [pc, #148]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x278>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd fe02 	bl	80013a4 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fd fdfe 	bl	80013a4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e193      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d036      	beq.n	800383c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_RCC_OscConfig+0x27c>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fde2 	bl	80013a4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fd fdde 	bl	80013a4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e173      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_OscConfig+0x274>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x234>
 8003802:	e01b      	b.n	800383c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_OscConfig+0x27c>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fd fdcb 	bl	80013a4 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e00e      	b.n	8003830 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fd fdc7 	bl	80013a4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d907      	bls.n	8003830 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e15c      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
 8003824:	40023800 	.word	0x40023800
 8003828:	42470000 	.word	0x42470000
 800382c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	4b8a      	ldr	r3, [pc, #552]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ea      	bne.n	8003812 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8097 	beq.w	8003978 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384e:	4b83      	ldr	r3, [pc, #524]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a7e      	ldr	r2, [pc, #504]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b79      	ldr	r3, [pc, #484]	; (8003a60 <HAL_RCC_OscConfig+0x4b0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d118      	bne.n	80038b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x4b0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x4b0>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fd fd87 	bl	80013a4 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fd fd83 	bl	80013a4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e118      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x4b0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x31e>
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x358>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x340>
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	4b5e      	ldr	r3, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a5d      	ldr	r2, [pc, #372]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0x358>
 80038f0:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a59      	ldr	r2, [pc, #356]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fd48 	bl	80013a4 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fd44 	bl	80013a4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0d7      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <HAL_RCC_OscConfig+0x368>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fd32 	bl	80013a4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fd fd2e 	bl	80013a4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0c1      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395a:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ee      	bne.n	8003944 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80ad 	beq.w	8003adc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d060      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d145      	bne.n	8003a22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <HAL_RCC_OscConfig+0x4b4>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fd02 	bl	80013a4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fcfe 	bl	80013a4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e093      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	491b      	ldr	r1, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x4b4>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fd fcd3 	bl	80013a4 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fd fccf 	bl	80013a4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e064      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x452>
 8003a20:	e05c      	b.n	8003adc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_OscConfig+0x4b4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd fcbc 	bl	80013a4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fcb8 	bl	80013a4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04d      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x480>
 8003a4e:	e045      	b.n	8003adc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e040      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000
 8003a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCC_OscConfig+0x538>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d030      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d129      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d122      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d119      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e07b      	b.n	8003bf6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd f96e 	bl	8000e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0104 	and.w	r1, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0210 	and.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10e      	bne.n	8003c40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
    return;
 8003c3e:	e0ce      	b.n	8003dde <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_SPI_IRQHandler+0x5e>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
    return;
 8003c5c:	e0bf      	b.n	8003dde <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_SPI_IRQHandler+0x7e>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80b0 	beq.w	8003dde <HAL_SPI_IRQHandler+0x1de>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80aa 	beq.w	8003dde <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d011      	beq.n	8003cc4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	e00b      	b.n	8003cdc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
        return;
 8003cda:	e080      	b.n	8003dde <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d014      	beq.n	8003d10 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0208 	orr.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d04f      	beq.n	8003ddc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <HAL_SPI_IRQHandler+0x168>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d034      	beq.n	8003dd2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0203 	bic.w	r2, r2, #3
 8003d76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d011      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_SPI_IRQHandler+0x1e4>)
 8003d86:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd ff57 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d016      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_SPI_IRQHandler+0x1e4>)
 8003db2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd ff41 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003dd0:	e003      	b.n	8003dda <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f808 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003dd8:	e000      	b.n	8003ddc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003dda:	bf00      	nop
    return;
 8003ddc:	bf00      	nop
  }
}
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	08003dfd 	.word	0x08003dfd

08003de8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff ffe6 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e041      	b.n	8003eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f839 	bl	8003ec2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f000 faea 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d001      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e04e      	b.n	8003f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d022      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d01d      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_TIM_Base_Start_IT+0xd4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d111      	bne.n	8003f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d010      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7a:	e007      	b.n	8003f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40010400 	.word	0x40010400
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40001800 	.word	0x40001800

08003fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e041      	b.n	800404e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc ffa0 	bl	8000f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 fa20 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d122      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d11b      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0202 	mvn.w	r2, #2
 8004082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9b1 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 800409e:	e005      	b.n	80040ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9a3 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9b4 	bl	8004414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d122      	bne.n	8004106 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d11b      	bne.n	8004106 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0204 	mvn.w	r2, #4
 80040d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f987 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 80040f2:	e005      	b.n	8004100 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f979 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f98a 	bl	8004414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b08      	cmp	r3, #8
 8004112:	d122      	bne.n	800415a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11b      	bne.n	800415a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0208 	mvn.w	r2, #8
 800412a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2204      	movs	r2, #4
 8004130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f95d 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f94f 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f960 	bl	8004414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b10      	cmp	r3, #16
 8004166:	d122      	bne.n	80041ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d11b      	bne.n	80041ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0210 	mvn.w	r2, #16
 800417e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2208      	movs	r2, #8
 8004184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f933 	bl	8004400 <HAL_TIM_IC_CaptureCallback>
 800419a:	e005      	b.n	80041a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f925 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f936 	bl	8004414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0201 	mvn.w	r2, #1
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fc fc89 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fbf1 	bl	80049e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d10e      	bne.n	8004232 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d107      	bne.n	8004232 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8fb 	bl	8004428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b20      	cmp	r3, #32
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0220 	mvn.w	r2, #32
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fbbb 	bl	80049d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004282:	2302      	movs	r3, #2
 8004284:	e0ae      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f200 809f 	bhi.w	80043d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080043d5 	.word	0x080043d5
 80042a4:	080043d5 	.word	0x080043d5
 80042a8:	080043d5 	.word	0x080043d5
 80042ac:	08004311 	.word	0x08004311
 80042b0:	080043d5 	.word	0x080043d5
 80042b4:	080043d5 	.word	0x080043d5
 80042b8:	080043d5 	.word	0x080043d5
 80042bc:	08004353 	.word	0x08004353
 80042c0:	080043d5 	.word	0x080043d5
 80042c4:	080043d5 	.word	0x080043d5
 80042c8:	080043d5 	.word	0x080043d5
 80042cc:	08004393 	.word	0x08004393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f950 	bl	800457c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0208 	orr.w	r2, r2, #8
 80042ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	619a      	str	r2, [r3, #24]
      break;
 800430e:	e064      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f9a0 	bl	800465c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	619a      	str	r2, [r3, #24]
      break;
 8004350:	e043      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f9f5 	bl	8004748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0208 	orr.w	r2, r2, #8
 800436c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0204 	bic.w	r2, r2, #4
 800437c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
      break;
 8004390:	e023      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa49 	bl	8004830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]
      break;
 80043d2:	e002      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a40      	ldr	r2, [pc, #256]	; (8004550 <TIM_Base_SetConfig+0x114>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445a:	d00f      	beq.n	800447c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3d      	ldr	r2, [pc, #244]	; (8004554 <TIM_Base_SetConfig+0x118>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <TIM_Base_SetConfig+0x11c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3b      	ldr	r2, [pc, #236]	; (800455c <TIM_Base_SetConfig+0x120>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <TIM_Base_SetConfig+0x124>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <TIM_Base_SetConfig+0x114>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02b      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d027      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <TIM_Base_SetConfig+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d023      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2b      	ldr	r2, [pc, #172]	; (8004558 <TIM_Base_SetConfig+0x11c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01f      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2a      	ldr	r2, [pc, #168]	; (800455c <TIM_Base_SetConfig+0x120>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01b      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a29      	ldr	r2, [pc, #164]	; (8004560 <TIM_Base_SetConfig+0x124>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d017      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a28      	ldr	r2, [pc, #160]	; (8004564 <TIM_Base_SetConfig+0x128>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a27      	ldr	r2, [pc, #156]	; (8004568 <TIM_Base_SetConfig+0x12c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00f      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <TIM_Base_SetConfig+0x130>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <TIM_Base_SetConfig+0x134>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <TIM_Base_SetConfig+0x138>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <TIM_Base_SetConfig+0x13c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d108      	bne.n	8004500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <TIM_Base_SetConfig+0x114>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0xf8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <TIM_Base_SetConfig+0x124>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d103      	bne.n	800453c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	615a      	str	r2, [r3, #20]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	40000c00 	.word	0x40000c00
 8004560:	40010400 	.word	0x40010400
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	40001800 	.word	0x40001800
 8004574:	40001c00 	.word	0x40001c00
 8004578:	40002000 	.word	0x40002000

0800457c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a20      	ldr	r2, [pc, #128]	; (8004654 <TIM_OC1_SetConfig+0xd8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC1_SetConfig+0x64>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <TIM_OC1_SetConfig+0xdc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10c      	bne.n	80045fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0308 	bic.w	r3, r3, #8
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC1_SetConfig+0xd8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_OC1_SetConfig+0x8e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <TIM_OC1_SetConfig+0xdc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40010000 	.word	0x40010000
 8004658:	40010400 	.word	0x40010400

0800465c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0210 	bic.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0320 	bic.w	r3, r3, #32
 80046a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <TIM_OC2_SetConfig+0xe4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC2_SetConfig+0x68>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <TIM_OC2_SetConfig+0xe8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10d      	bne.n	80046e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <TIM_OC2_SetConfig+0xe4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC2_SetConfig+0x94>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <TIM_OC2_SetConfig+0xe8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d113      	bne.n	8004718 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40010400 	.word	0x40010400

08004748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a21      	ldr	r2, [pc, #132]	; (8004828 <TIM_OC3_SetConfig+0xe0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_OC3_SetConfig+0x66>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <TIM_OC3_SetConfig+0xe4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10d      	bne.n	80047ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <TIM_OC3_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_OC3_SetConfig+0x92>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a15      	ldr	r2, [pc, #84]	; (800482c <TIM_OC3_SetConfig+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d113      	bne.n	8004802 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	621a      	str	r2, [r3, #32]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40010000 	.word	0x40010000
 800482c:	40010400 	.word	0x40010400

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <TIM_OC4_SetConfig+0xa4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC4_SetConfig+0x68>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <TIM_OC4_SetConfig+0xa8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d109      	bne.n	80048ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40010400 	.word	0x40010400

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e05a      	b.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d01d      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10c      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4313      	orrs	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e03f      	b.n	8004a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fada 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	; 0x24
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f829 	bl	8004a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b0c0      	sub	sp, #256	; 0x100
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	ea40 0301 	orr.w	r3, r0, r1
 8004ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af0:	f021 010c 	bic.w	r1, r1, #12
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004afe:	430b      	orrs	r3, r1
 8004b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b12:	6999      	ldr	r1, [r3, #24]
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	ea40 0301 	orr.w	r3, r0, r1
 8004b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <UART_SetConfig+0x2cc>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d005      	beq.n	8004b38 <UART_SetConfig+0xa0>
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b8d      	ldr	r3, [pc, #564]	; (8004d68 <UART_SetConfig+0x2d0>)
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d104      	bne.n	8004b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe f820 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8004b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b40:	e003      	b.n	8004b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b42:	f7fe f807 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8004b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	f040 810c 	bne.w	8004d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	1891      	adds	r1, r2, r2
 8004b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b72:	415b      	adcs	r3, r3
 8004b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	eb12 0801 	adds.w	r8, r2, r1
 8004b80:	4629      	mov	r1, r5
 8004b82:	eb43 0901 	adc.w	r9, r3, r1
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	4699      	mov	r9, r3
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	eb18 0303 	adds.w	r3, r8, r3
 8004ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ba8:	462b      	mov	r3, r5
 8004baa:	eb49 0303 	adc.w	r3, r9, r3
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	18db      	adds	r3, r3, r3
 8004bca:	653b      	str	r3, [r7, #80]	; 0x50
 8004bcc:	4613      	mov	r3, r2
 8004bce:	eb42 0303 	adc.w	r3, r2, r3
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bdc:	f7fb fb12 	bl	8000204 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4b61      	ldr	r3, [pc, #388]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004be6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	011c      	lsls	r4, r3, #4
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c10:	4641      	mov	r1, r8
 8004c12:	eb12 0a01 	adds.w	sl, r2, r1
 8004c16:	4649      	mov	r1, r9
 8004c18:	eb43 0b01 	adc.w	fp, r3, r1
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c30:	4692      	mov	sl, r2
 8004c32:	469b      	mov	fp, r3
 8004c34:	4643      	mov	r3, r8
 8004c36:	eb1a 0303 	adds.w	r3, sl, r3
 8004c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	eb4b 0303 	adc.w	r3, fp, r3
 8004c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	18db      	adds	r3, r3, r3
 8004c60:	643b      	str	r3, [r7, #64]	; 0x40
 8004c62:	4613      	mov	r3, r2
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c72:	f7fb fac7 	bl	8000204 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2264      	movs	r2, #100	; 0x64
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	1acb      	subs	r3, r1, r3
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca0:	441c      	add	r4, r3
 8004ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	1851      	adds	r1, r2, r1
 8004cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cca:	4649      	mov	r1, r9
 8004ccc:	414b      	adcs	r3, r1
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cdc:	4659      	mov	r1, fp
 8004cde:	00cb      	lsls	r3, r1, #3
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	00ca      	lsls	r2, r1, #3
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d18:	460b      	mov	r3, r1
 8004d1a:	18db      	adds	r3, r3, r3
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	4613      	mov	r3, r2
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d2e:	f7fb fa69 	bl	8000204 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	; 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	3332      	adds	r3, #50	; 0x32
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	f003 0207 	and.w	r2, r3, #7
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4422      	add	r2, r4
 8004d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d60:	e106      	b.n	8004f70 <UART_SetConfig+0x4d8>
 8004d62:	bf00      	nop
 8004d64:	40011000 	.word	0x40011000
 8004d68:	40011400 	.word	0x40011400
 8004d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d82:	4642      	mov	r2, r8
 8004d84:	464b      	mov	r3, r9
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	6239      	str	r1, [r7, #32]
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d92:	4641      	mov	r1, r8
 8004d94:	1854      	adds	r4, r2, r1
 8004d96:	4649      	mov	r1, r9
 8004d98:	eb43 0501 	adc.w	r5, r3, r1
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	00eb      	lsls	r3, r5, #3
 8004da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004daa:	00e2      	lsls	r2, r4, #3
 8004dac:	4614      	mov	r4, r2
 8004dae:	461d      	mov	r5, r3
 8004db0:	4643      	mov	r3, r8
 8004db2:	18e3      	adds	r3, r4, r3
 8004db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db8:	464b      	mov	r3, r9
 8004dba:	eb45 0303 	adc.w	r3, r5, r3
 8004dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dde:	4629      	mov	r1, r5
 8004de0:	008b      	lsls	r3, r1, #2
 8004de2:	4621      	mov	r1, r4
 8004de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de8:	4621      	mov	r1, r4
 8004dea:	008a      	lsls	r2, r1, #2
 8004dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df0:	f7fb fa08 	bl	8000204 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4b60      	ldr	r3, [pc, #384]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	011c      	lsls	r4, r3, #4
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	61b9      	str	r1, [r7, #24]
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e24:	4641      	mov	r1, r8
 8004e26:	1851      	adds	r1, r2, r1
 8004e28:	6139      	str	r1, [r7, #16]
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	00cb      	lsls	r3, r1, #3
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e46:	4651      	mov	r1, sl
 8004e48:	00ca      	lsls	r2, r1, #3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4642      	mov	r2, r8
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e58:	464b      	mov	r3, r9
 8004e5a:	460a      	mov	r2, r1
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	008b      	lsls	r3, r1, #2
 8004e80:	4641      	mov	r1, r8
 8004e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e86:	4641      	mov	r1, r8
 8004e88:	008a      	lsls	r2, r1, #2
 8004e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e8e:	f7fb f9b9 	bl	8000204 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2264      	movs	r2, #100	; 0x64
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	1acb      	subs	r3, r1, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	4a33      	ldr	r2, [pc, #204]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec2:	677a      	str	r2, [r7, #116]	; 0x74
 8004ec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed8:	4641      	mov	r1, r8
 8004eda:	1851      	adds	r1, r2, r1
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	4649      	mov	r1, r9
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	00cb      	lsls	r3, r1, #3
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efa:	4651      	mov	r1, sl
 8004efc:	00ca      	lsls	r2, r1, #3
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	4642      	mov	r2, r8
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	460a      	mov	r2, r1
 8004f0e:	eb42 0303 	adc.w	r3, r2, r3
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1e:	667a      	str	r2, [r7, #100]	; 0x64
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f36:	4641      	mov	r1, r8
 8004f38:	008a      	lsls	r2, r1, #2
 8004f3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f3e:	f7fb f961 	bl	8000204 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004f48:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2164      	movs	r1, #100	; 0x64
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	3332      	adds	r3, #50	; 0x32
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f003 020f 	and.w	r2, r3, #15
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4422      	add	r2, r4
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f76:	46bd      	mov	sp, r7
 8004f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7c:	51eb851f 	.word	0x51eb851f

08004f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f80:	b084      	sub	sp, #16
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	f107 001c 	add.w	r0, r7, #28
 8004f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d122      	bne.n	8004fde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa9c 	bl	8005510 <USB_CoreReset>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e01a      	b.n	8005014 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa90 	bl	8005510 <USB_CoreReset>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
 8005006:	e005      	b.n	8005014 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10b      	bne.n	8005032 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f043 0206 	orr.w	r2, r3, #6
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr

08005042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 0201 	bic.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d115      	bne.n	80050b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005092:	2001      	movs	r0, #1
 8005094:	f7fc f992 	bl	80013bc <HAL_Delay>
      ms++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa28 	bl	80054f4 <USB_GetMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d01e      	beq.n	80050e8 <USB_SetCurrentMode+0x84>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b31      	cmp	r3, #49	; 0x31
 80050ae:	d9f0      	bls.n	8005092 <USB_SetCurrentMode+0x2e>
 80050b0:	e01a      	b.n	80050e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fc f979 	bl	80013bc <HAL_Delay>
      ms++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa0f 	bl	80054f4 <USB_GetMode>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <USB_SetCurrentMode+0x84>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b31      	cmp	r3, #49	; 0x31
 80050e0:	d9f0      	bls.n	80050c4 <USB_SetCurrentMode+0x60>
 80050e2:	e001      	b.n	80050e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e005      	b.n	80050f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b32      	cmp	r3, #50	; 0x32
 80050ec:	d101      	bne.n	80050f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050fc:	b084      	sub	sp, #16
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800510a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e009      	b.n	8005130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3340      	adds	r3, #64	; 0x40
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3301      	adds	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b0e      	cmp	r3, #14
 8005134:	d9f2      	bls.n	800511c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11c      	bne.n	8005176 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514a:	f043 0302 	orr.w	r3, r3, #2
 800514e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e005      	b.n	8005182 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005188:	461a      	mov	r2, r3
 800518a:	2300      	movs	r3, #0
 800518c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005194:	4619      	mov	r1, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	461a      	mov	r2, r3
 800519e:	680b      	ldr	r3, [r1, #0]
 80051a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10c      	bne.n	80051c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051ae:	2100      	movs	r1, #0
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f965 	bl	8005480 <USB_SetDevSpeed>
 80051b6:	e008      	b.n	80051ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051b8:	2101      	movs	r1, #1
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f960 	bl	8005480 <USB_SetDevSpeed>
 80051c0:	e003      	b.n	80051ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051c2:	2103      	movs	r1, #3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f95b 	bl	8005480 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ca:	2110      	movs	r1, #16
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8f3 	bl	80053b8 <USB_FlushTxFifo>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f91f 	bl	8005420 <USB_FlushRxFifo>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	461a      	mov	r2, r3
 8005200:	2300      	movs	r3, #0
 8005202:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	461a      	mov	r2, r3
 800520c:	2300      	movs	r3, #0
 800520e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	e043      	b.n	800529e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800522c:	d118      	bne.n	8005260 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	461a      	mov	r2, r3
 8005242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	e013      	b.n	8005272 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	461a      	mov	r2, r3
 8005258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e008      	b.n	8005272 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	461a      	mov	r2, r3
 800526e:	2300      	movs	r3, #0
 8005270:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d3b7      	bcc.n	8005216 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e043      	b.n	8005334 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c2:	d118      	bne.n	80052f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e013      	b.n	8005308 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	461a      	mov	r2, r3
 80052ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e008      	b.n	8005308 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800532c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3b7      	bcc.n	80052ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800535c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f043 0210 	orr.w	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <USB_DevInit+0x2b8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f043 0208 	orr.w	r2, r3, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053b0:	b004      	add	sp, #16
 80053b2:	4770      	bx	lr
 80053b4:	803c3800 	.word	0x803c3800

080053b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <USB_FlushTxFifo+0x64>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e01b      	b.n	8005410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	daf2      	bge.n	80053c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	019b      	lsls	r3, r3, #6
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a08      	ldr	r2, [pc, #32]	; (800541c <USB_FlushTxFifo+0x64>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e006      	b.n	8005410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b20      	cmp	r3, #32
 800540c:	d0f0      	beq.n	80053f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	00030d40 	.word	0x00030d40

08005420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <USB_FlushRxFifo+0x5c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e018      	b.n	8005470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	daf2      	bge.n	800542c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2210      	movs	r2, #16
 800544e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a08      	ldr	r2, [pc, #32]	; (800547c <USB_FlushRxFifo+0x5c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e006      	b.n	8005470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b10      	cmp	r3, #16
 800546c:	d0f0      	beq.n	8005450 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	00030d40 	.word	0x00030d40

08005480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4313      	orrs	r3, r2
 80054a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054cc:	f023 0303 	bic.w	r3, r3, #3
 80054d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0301 	and.w	r3, r3, #1
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <USB_CoreReset+0x64>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d901      	bls.n	800552e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e01b      	b.n	8005566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	daf2      	bge.n	800551c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a09      	ldr	r2, [pc, #36]	; (8005574 <USB_CoreReset+0x64>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d0f0      	beq.n	8005546 <USB_CoreReset+0x36>

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	00030d40 	.word	0x00030d40

08005578 <memset>:
 8005578:	4402      	add	r2, r0
 800557a:	4603      	mov	r3, r0
 800557c:	4293      	cmp	r3, r2
 800557e:	d100      	bne.n	8005582 <memset+0xa>
 8005580:	4770      	bx	lr
 8005582:	f803 1b01 	strb.w	r1, [r3], #1
 8005586:	e7f9      	b.n	800557c <memset+0x4>

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	; (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	; (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	; (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	; (80055cc <__libc_init_array+0x44>)
 800559c:	f000 f818 	bl	80055d0 <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	08005610 	.word	0x08005610
 80055c4:	08005610 	.word	0x08005610
 80055c8:	08005610 	.word	0x08005610
 80055cc:	08005614 	.word	0x08005614

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
