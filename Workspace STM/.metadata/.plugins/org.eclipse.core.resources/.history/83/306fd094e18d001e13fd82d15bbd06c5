/*
 * max30100.c
 *
 *  Created on: Nov 26, 2023
 *      Author: gabri
 */

#include "max30100.h"
#include <stdio.h>

#ifdef __cplusplus
extern "C"
{
#endif

I2C_HandleTypeDef *hi2c;

// Função de plotagem integrada. Chamada durante uma interrupção para imprimir/plotar a amostra atual.
// Substitua isso em seu main.c se você não estiver usando printf() para impressão.
void max30100_plot(uint32_t ir_sample, uint32_t red_sample)
{
    UNUSED(ir_sample);
    UNUSED(red_sample);
}

// Função de iniciação do MAX30100.
void max30100_init(max30100_t *obj)
{
    obj->_ui2c = hi2c;
    obj->_interrupt_flag = 0;
    memset(obj->_ir_samples, 0, MAX30100_SAMPLE_LEN_MAX * sizeof(uint32_t));
    memset(obj->_red_samples, 0, MAX30100_SAMPLE_LEN_MAX * sizeof(uint32_t));
}

// Escreve um buffer de buflen bytes em um registro do MAX30100.
void max30100_write(max30100_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
    *payload = reg;
    if (buf != NULL && buflen != 0)
        memcpy(payload + 1, buf, buflen);
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30100_I2C_ADDR << 1, payload, buflen + 1, MAX30100_I2C_TIMEOUT);
    free(payload);
}

// Lê buflen bytes de um registro do MAX30100 e armazena no buffer.
void max30100_read(max30100_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
    uint8_t reg_addr = reg;
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30100_I2C_ADDR << 1, &reg_addr, 1, MAX30100_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30100_I2C_ADDR << 1, buf, buflen, MAX30100_I2C_TIMEOUT);
}

// Reseta o sensor.
void max30100_reset(max30100_t *obj)
{
    uint8_t val = 0x40;
    max30100_write(obj, MAX30100_MODE_CONFIG, &val, 1);
}

// Ativa a interrupção A_FULL.
void max30100_set_a_full(max30100_t *obj, uint8_t enable)
{
    uint8_t reg = 0;
    max30100_read(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
    reg &= ~(0x01 << MAX30100_INTERRUPT_A_FULL);
    reg |= ((enable & 0x01) << MAX30100_INTERRUPT_A_FULL);
    max30100_write(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
}

// Ativa a interrupção PPG_RDY.
void max30100_set_ppg_rdy(max30100_t *obj, uint8_t enable)
{
    uint8_t reg = 0;
    max30100_read(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
    reg &= ~(0x01 << MAX30100_INTERRUPT_PPG_RDY);
    reg |= ((enable & 0x01) << MAX30100_INTERRUPT_PPG_RDY);
    max30100_write(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
}

// Ativa a interrupção ALC_OVF.
void max30100_set_alc_ovf(max30100_t *obj, uint8_t enable)
{
    uint8_t reg = 0;
    max30100_read(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
    reg &= ~(0x01 << MAX30100_INTERRUPT_ALC_OVF);
    reg |= ((enable & 0x01) << MAX30100_INTERRUPT_ALC_OVF);
    max30100_write(obj, MAX30100_INTERRUPT_ENABLE_1, &reg, 1);
}

// Ativa a interrupção DIE_TEMP_RDY.
void max30100_set_die_temp_rdy(max30100_t *obj, uint8_t enable)
{
    uint8_t reg = (enable & 0x01) << MAX30100_INTERRUPT_DIE_TEMP_RDY;
    max30100_write(obj, MAX30100_INTERRUPT_ENABLE_2, &reg, 1);
}

// Ativa a medição de temperatura.
void max30100_set_die_temp_en(max30100_t *obj, uint8_t enable)
{
    uint8_t reg = (enable & 0x01) << MAX30100_DIE_TEMP_EN;
    max30100_write(obj, MAX30100_DIE_TEMP_CONFIG, &reg, 1);
}

// Define a bandeira de interrupção em uma interrupção. Deve ser chamado no manipulador de interrupção externa correspondente.
void max30100_on_interrupt(max30100_t *obj)
{
    obj->_interrupt_flag = 1;
}

// Verifica se a bandeira de interrupção está ativa.
uint8_t max30100_has_interrupt(max30100_t *obj)
{
    return obj->_interrupt_flag;
}

// Lê os registradores de status de interrupção (0x00 e 0x01) e realiza tarefas correspondentes.
void max30100_interrupt_handler(max30100_t *obj)
{
    uint8_t reg[2] = {0x00};
    // A flag de interrupção nos registradores 0x00 e 0x01 é limpa na leitura
    max30100_read(obj, MAX30100_INTERRUPT_STATUS_1, reg, 2);

    if ((reg[0] >> MAX30100_INTERRUPT_A_FULL) & 0x01)
    {
        // FIFO quase cheio
        max30100_read_fifo(obj);
    }

    if ((reg[0] >> MAX30100_INTERRUPT_PPG_RDY) & 0x01)
    {
        // Novos dados disponíveis na FIFO
    }

    if ((reg[0] >> MAX30100_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Overflow de luz ambiente
    }

    if ((reg[1] >> MAX30100_INTERRUPT_DIE_TEMP_RDY) & 0x01)
    {
        // Dados de temperatura prontos
        int8_t temp_int;
        uint8_t temp_frac;
        max30100_read_temp(obj, &temp_int, &temp_frac);
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reseta a flag de interrupção
    obj->_interrupt_flag = 0;
}

// Desliga o sensor.
void max30100_shutdown(max30100_t *obj, uint8_t shdn)
{
    uint8_t config;
    max30100_read(obj, MAX30100_MODE_CONFIG, &config, 1);
    config = (config & 0x7f) | (shdn << MAX30100_MODE_SHDN);
    max30100_write(obj, MAX30100_MODE_CONFIG, &config, 1);
}

// Define o modo de medição.
void max30100_set_mode(max30100_t *obj, max30100_mode_t mode)
{
    uint8_t config;
    max30100_read(obj, MAX30100_MODE_CONFIG, &config, 1);
    config = (config & 0xf8) | mode;
    max30100_write(obj, MAX30100_MODE_CONFIG, &config, 1);
    max30100_clear_fifo(obj);
}

// Define a taxa de amostragem.
void max30100_set_sampling_rate(max30100_t *obj, max30100_sr_t sr)
{
    uint8_t config;
    max30100_read(obj, MAX30100_SPO2_CONFIG, &config, 1);
    config = (config & 0x63) << MAX30100_SPO2_SR;
    max30100_write(obj, MAX30100_SPO2_CONFIG, &config, 1);
}

// Define a largura de pulso do LED.
void max30100_set_led_pulse_width(max30100_t *obj, max30100_led_pw_t pw)
{
    uint8_t config;
    max30100_read(obj, MAX30100_SPO2_CONFIG, &config, 1);
    config = (config & 0x7c) | (pw << MAX30100_SPO2_LEW_PW);
    max30100_write(obj, MAX30100_SPO2_CONFIG, &config, 1);
}

// Define a resolução do ADC.
void max30100_set_adc_resolution(max30100_t *obj, max30100_adc_t adc)
{
    uint8_t config;
    max30100_read(obj, MAX30100_SPO2_CONFIG, &config, 1);
    config = (config & 0x1f) | (adc << MAX30100_SPO2_ADC_RGE);
    max30100_write(obj, MAX30100_SPO2_CONFIG, &config, 1);
}

// Define a corrente do LED 1.
void max30100_set_led_current_1(max30100_t *obj, float ma)
{
    uint8_t pa = ma / 0.2;
    max30100_write(obj, MAX30100_LED_IR_PA1, &pa, 1);
}

// Define a corrente do LED 2.
void max30100_set_led_current_2(max30100_t *obj, float ma)
{
    uint8_t pa = ma / 0.2;
    max30100_write(obj, MAX30100_LED_RED_PA2, &pa, 1);
}

// Define o modo de slot no modo multi-LED.
void max30100_set_multi_led_slot_1_2(max30100_t *obj, max30100_multi_led_ctrl_t slot1, max30100_multi_led_ctrl_t slot2)
{
    uint8_t val = 0;
    val |= ((slot1 << MAX30100_MULTI_LED_CTRL_SLOT1) | (slot2 << MAX30100_MULTI_LED_CTRL_SLOT2));
    max30100_write(obj, MAX30100_MULTI_LED_CTRL_1, &val, 1);
}

// Define o modo de slot no modo multi-LED.
void max30100_set_multi_led_slot_3_4(max30100_t *obj, max30100_multi_led_ctrl_t slot3, max30100_multi_led_ctrl_t slot4)
{
    uint8_t val = 0;
    val |= ((slot3 << MAX30100_MULTI_LED_CTRL_SLOT3) | (slot4 << MAX30100_MULTI_LED_CTRL_SLOT4));
    max30100_write(obj, MAX30100_MULTI_LED_CTRL_2, &val, 1);
}

// Define a configuração da FIFO.
void max30100_set_fifo_config(max30100_t *obj, max30100_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
    uint8_t config = 0x00;
    config |= smp_ave << MAX30100_FIFO_CONFIG_SMP_AVE;
    config |= ((roll_over_en & 0x01) << MAX30100_FIFO_CONFIG_ROLL_OVER_EN);
    config |= ((fifo_a_full & 0x0f) << MAX30100_FIFO_CONFIG_FIFO_A_FULL);
    max30100_write(obj, MAX30100_FIFO_CONFIG, &config, 1);
}

// Limpa todos os ponteiros da FIFO no sensor.
void max30100_clear_fifo(max30100_t *obj)
{
    uint8_t val = 0x00;
    max30100_write(obj, MAX30100_FIFO_WR_PTR, &val, 3);
    max30100_write(obj, MAX30100_FIFO_RD_PTR, &val, 3);
    max30100_write(obj, MAX30100_OVF_COUNTER, &val, 3);
}

// Lê o conteúdo da FIFO e armazena no buffer no objeto max30100_t.
void max30100_read_fifo(max30100_t *obj)
{
    // Primeira transação: Obter o FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
    max30100_read(obj, MAX30100_FIFO_WR_PTR, &wr_ptr, 1);
    max30100_read(obj, MAX30100_FIFO_RD_PTR, &rd_ptr, 1);

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
    if (num_samples < 1)
    {
        num_samples += 32;
    }

    // Segunda transação: Ler NUM_SAMPLES_TO_READ amostras da FIFO
    for (int8_t i = 0; i < num_samples; i++)
    {
        uint8_t sample[6];
        max30100_read(obj, MAX30100_FIFO_DATA, sample, 6);
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
        obj->_ir_samples[i] = ir_sample;
        obj->_red_samples[i] = red_sample;
        max30100_plot(ir_sample, red_sample);
    }
}

// Lê a temperatura do dado.
void max30100_read_temp(max30100_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
    max30100_read(obj, MAX30100_DIE_TINT, (uint8_t *)temp_int, 1);
    max30100_read(obj, MAX30100_DIE_TFRAC, temp_frac, 1);
}

#ifdef __cplusplus
}
#endif



